<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>Dingoo A320 &gt;&gt; OpenDingux</h3>
<p><b>移植S6D04M0X21驅動程式</b></p>
<hr size="1">
<p>
修改的部份跟ILI9340差不多，僅是差別在初始化程式碼部份，如下說明：
</p>

<pre>
diff qi-kernel/drivers/video/jz4740_slcd_panels_orig.c qi-kernel/drivers/video/jz4740_slcd_panels.c
</pre>
<pre class="brush:cpp">
676,969d675
&lt; 
&lt; #ifdef CONFIG_JZ_SLCD_S6D04M0X21
&lt; 
&lt; #define S6D04M0X21_GPIO_CS_N   JZ_GPIO_PORTB(17)  /* Chip select */
&lt; #define S6D04M0X21_GPIO_RESET_N   JZ_GPIO_PORTB(18)  /* LCD reset */
&lt; 
&lt; static void s6d04m0x21_enable(struct jzfb *jzfb)
&lt; {
&lt;   /* RESET pulse */
&lt;   gpio_set_value(S6D04M0X21_GPIO_RESET_N, 0);
&lt;   mdelay(100);
&lt;   gpio_set_value(S6D04M0X21_GPIO_RESET_N, 1);
&lt;   mdelay(150);
&lt; 
&lt;   /* Enable chip select */
&lt;   gpio_set_value(S6D04M0X21_GPIO_CS_N, 0);
&lt; 
&lt;   /* Black magic */
&lt;   mdelay(160);
&lt;   send_panel_command(jzfb,0x0001); 
&lt;   mdelay(120); 
&lt;   send_panel_command(jzfb,0x00f0); 
&lt;   send_panel_data(jzfb,0x005a); 
&lt;   send_panel_data(jzfb,0x005a); 
&lt;   send_panel_command(jzfb,0x00f3); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_command(jzfb,0x00ff); 
&lt;   send_panel_data(jzfb,0x0030); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0040); 
&lt;   send_panel_command(jzfb,0x0011); 
&lt;   mdelay(120); 
&lt;   send_panel_command(jzfb,0x00f3); 
&lt;   send_panel_data(jzfb,0x0001); 
&lt;   send_panel_data(jzfb,0x0026); 
&lt;   send_panel_data(jzfb,0x0026); 
&lt;   send_panel_data(jzfb,0x0007); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_data(jzfb,0x0057); 
&lt;   send_panel_data(jzfb,0x0057); 
&lt;   send_panel_data(jzfb,0x002c); 
&lt;   send_panel_command(jzfb,0x00f4); 
&lt;   send_panel_data(jzfb,0x0060); 
&lt;   send_panel_data(jzfb,0x0060); 
&lt;   send_panel_data(jzfb,0x006F); 
&lt;   send_panel_data(jzfb,0x006F); 
&lt;   send_panel_data(jzfb,0x0044); 
&lt;   send_panel_command(jzfb,0x00f5); 
&lt;   send_panel_data(jzfb,0x0012); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_data(jzfb,0x0003); 
&lt;   send_panel_data(jzfb,0x00f0); 
&lt;   send_panel_data(jzfb,0x0030); 
&lt;   send_panel_data(jzfb,0x001f); 
&lt;   mdelay(10); 
&lt;   send_panel_command(jzfb,0x00f3); 
&lt;   send_panel_data(jzfb,0x0003); 
&lt;   mdelay(20); 
&lt;   send_panel_command(jzfb,0x00ff); 
&lt;   send_panel_data(jzfb,0x0030); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0070); 
&lt;   mdelay(20); 
&lt;   send_panel_command(jzfb,0x00f3); 
&lt;   send_panel_data(jzfb,0x000f); 
&lt;   send_panel_command(jzfb,0x00ff); 
&lt;   send_panel_data(jzfb,0x0030); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0078); 
&lt;   mdelay(20); 
&lt;   send_panel_command(jzfb,0x00f3); 
&lt;   send_panel_data(jzfb,0x001f); 
&lt;   send_panel_command(jzfb,0x00ff); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0078); 
&lt;   mdelay(20); 
&lt;   send_panel_command(jzfb,0x00f3); 
&lt;   send_panel_data(jzfb,0x001f); 
&lt;   mdelay(40); 
&lt;   send_panel_command(jzfb,0x00f3); 
&lt;   send_panel_data(jzfb,0x00ff); 
&lt;   send_panel_data(jzfb,0x0026); 
&lt;   send_panel_data(jzfb,0x0026); 
&lt;   send_panel_data(jzfb,0x0007); 
&lt;   send_panel_data(jzfb,0x0055); 
&lt;   send_panel_data(jzfb,0x0057); 
&lt;   send_panel_data(jzfb,0x0057); 
&lt;   send_panel_data(jzfb,0x002c); 
&lt;   mdelay(50); 
&lt;   send_panel_command(jzfb,0x0011); 
&lt;   mdelay(100); 
&lt;   send_panel_command(jzfb,0x00f2); 
&lt;   send_panel_data(jzfb,0x0013); 
&lt;   send_panel_data(jzfb,0x0013); 
&lt;   send_panel_data(jzfb,0x0001); 
&lt;   send_panel_data(jzfb,0x0008); 
&lt;   send_panel_data(jzfb,0x0008); 
&lt;   send_panel_data(jzfb,0x0008); 
&lt;   send_panel_data(jzfb,0x0008); 
&lt;   send_panel_data(jzfb,0x0010); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0010); 
&lt;   send_panel_data(jzfb,0x0010); 
&lt;   send_panel_command(jzfb,0x00fd); 
&lt;   send_panel_data(jzfb,0x0055); 
&lt;   send_panel_command(jzfb,0x0035); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_command(jzfb,0x0036); 
&lt;   send_panel_data(jzfb,0x00e8); 
&lt;   send_panel_command(jzfb,0x003a); 
&lt;   send_panel_data(jzfb,0x0055); 
&lt;   send_panel_command(jzfb,0x00fe); 
&lt;   send_panel_data(jzfb,0x0016); 
&lt;   send_panel_data(jzfb,0x0016); 
&lt;   send_panel_data(jzfb,0x0028); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0006); 
&lt;   send_panel_command(jzfb,0x00f6); 
&lt;   send_panel_data(jzfb,0x0010); 
&lt;   send_panel_data(jzfb,0x0080); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0010); 
&lt;   send_panel_command(jzfb,0x0051); 
&lt;   send_panel_data(jzfb,0x00ff); 
&lt;   send_panel_command(jzfb,0x0053); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_command(jzfb,0x0055); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_command(jzfb,0x005e); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_command(jzfb,0x00ca); 
&lt;   send_panel_data(jzfb,0x0080); 
&lt;   send_panel_data(jzfb,0x0080); 
&lt;   send_panel_data(jzfb,0x0020); 
&lt;   send_panel_command(jzfb,0x00cb); 
&lt;   send_panel_data(jzfb,0x0001); 
&lt;   send_panel_command(jzfb,0x00f7); 
&lt;   send_panel_data(jzfb,0x0092); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x0026); 
&lt;   send_panel_data(jzfb,0x001c); 
&lt;   send_panel_data(jzfb,0x001c); 
&lt;   send_panel_data(jzfb,0x0024); 
&lt;   send_panel_data(jzfb,0x001b); 
&lt;   send_panel_data(jzfb,0x0009); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_data(jzfb,0x0018); 
&lt;   send_panel_command(jzfb,0x00f8); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x0024); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x001f); 
&lt;   send_panel_data(jzfb,0x0027); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x000a); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_command(jzfb,0x00f9); 
&lt;   send_panel_data(jzfb,0x0086); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x0010); 
&lt;   send_panel_data(jzfb,0x0010); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x001b); 
&lt;   send_panel_data(jzfb,0x001f); 
&lt;   send_panel_data(jzfb,0x0027); 
&lt;   send_panel_data(jzfb,0x001b); 
&lt;   send_panel_data(jzfb,0x001f); 
&lt;   send_panel_data(jzfb,0x0027); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x000a); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_data(jzfb,0x0018); 
&lt;   send_panel_command(jzfb,0x00fa); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x0024); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x001f); 
&lt;   send_panel_data(jzfb,0x0027); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x000a); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_command(jzfb,0x00fb); 
&lt;   send_panel_data(jzfb,0x0080); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x001b); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x0026); 
&lt;   send_panel_data(jzfb,0x0017); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x0014); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_data(jzfb,0x0018); 
&lt;   send_panel_command(jzfb,0x00fc); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x001a); 
&lt;   send_panel_data(jzfb,0x001d); 
&lt;   send_panel_data(jzfb,0x0024); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x001f); 
&lt;   send_panel_data(jzfb,0x0027); 
&lt;   send_panel_data(jzfb,0x001e); 
&lt;   send_panel_data(jzfb,0x000a); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_data(jzfb,0x0011); 
&lt;   send_panel_command(jzfb,0x002a); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0001); 
&lt;   send_panel_data(jzfb,0x003f); 
&lt;   send_panel_command(jzfb,0x002b); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x0000); 
&lt;   send_panel_data(jzfb,0x00ef); 
&lt;   send_panel_command(jzfb,0x0029); 
&lt;   send_panel_command(jzfb,0x002c); 
&lt; }
&lt; 
&lt; /* TODO(IGP): make sure LCD power consumption is low in these conditions */
&lt; static void s6d04m0x21_disable(struct jzfb *jzfb)
&lt; {
&lt;   /* Keep chip select disabled */
&lt;   gpio_set_value(S6D04M0X21_GPIO_CS_N, 1);
&lt;   /* Keep RESET active */
&lt;   gpio_set_value(S6D04M0X21_GPIO_RESET_N, 0);
&lt; }
&lt; 
&lt; static int s6d04m0x21_init(struct jzfb *jzfb)
&lt; {
&lt;   struct device *dev = &jzfb-&gt;pdev-&gt;dev;
&lt;   int ret;
&lt; 
&lt;   ret = gpio_request(S6D04M0X21_GPIO_CS_N, dev_name(dev));
&lt;   if (ret)
&lt;     goto err_cs;
&lt;   gpio_direction_output(S6D04M0X21_GPIO_CS_N, 1);
&lt; 
&lt;   ret = gpio_request(S6D04M0X21_GPIO_RESET_N, dev_name(dev));
&lt;   if (ret)
&lt;     goto err_reset;
&lt;   gpio_direction_output(S6D04M0X21_GPIO_RESET_N, 0);
&lt;   
&lt;   mdelay(100);
&lt;   return 0;
&lt; 
&lt; err_reset:
&lt;   gpio_free(S6D04M0X21_GPIO_CS_N);
&lt; err_cs:
&lt;   dev_err(dev, "Could not reserve GPIO pins for S6D04M0X21 panel driver\n");
&lt;   return ret;
&lt; }
&lt; 
&lt; static void s6d04m0x21_exit(struct jzfb *jzfb)
&lt; {
&lt;   gpio_free(S6D04M0X21_GPIO_CS_N);
&lt;   gpio_free(S6D04M0X21_GPIO_RESET_N);
&lt; }
&lt; 
&lt; #endif
&lt; 
997,1003d702
&lt;   },
&lt; #endif
&lt; #ifdef CONFIG_JZ_SLCD_S6D04M0X21
&lt;   {
&lt;     s6d04m0x21_init, s6d04m0x21_exit,
&lt;     s6d04m0x21_enable, s6d04m0x21_disable,
&lt;     "s6d04m0x21",
</pre><br>

<pre>
diff qi-kernel/drivers/video/Kconfig_orig.c qi-kernel/drivers/video/Kconfig.c
</pre>
<pre class="brush:cpp">
2417a2418,2421
&gt; config JZ_SLCD_S6D04M0X21
&gt;   bool "S6D04M0X21 Smart LCD panel"
&gt;   depends on FB_JZ4740_SLCD
</pre><br>

<pre>
$ make menuconfig
</pre>

<p>
Device Drivers &gt; Graphics support &gt; Support for frame buffer devices<br>
<img src="port_s6d04m0x21/1.jpg" class="maxSize">
</p>

<pre>
$ make
</pre><br>

<p>
完成<br>
<img src="port_s6d04m0x21/2.jpg" class="maxSize"></p>
</p>

<p>
<br><a href="../../../handheld.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
