<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushAsm.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>FC3000 &gt;&gt; Assembly</h3>
<p><b>LED</b></p>
<hr size="1">
<p>
參考資料：<br>
1. <a href="https://github.com/steward-fu/mcu-pdf/tree/master/f1c100s">pdf</a><br>
2. <a href="http://nano.lichee.pro/">lichee</a><br>
3. <a href="https://mangopi.org/mangopi_r">mangopi_r</a><br>
4. <a href="https://www.allwinnertech.com/index.php?c=product&a=index&pid=4">allwinner</a><br><br>

由於FC3000掌機的LED並非由F1C100S控制，因此，司徒只好把屏的控制當作第一個LED練習，LCD腳位如下：
</p>
<table>
  <tr><td>LCD BK</td><td>PE6</td></tr>
  <tr><td>LCD RST</td><td>PE11</td></tr>
  <tr><td>LCD CS</td><td>PD21</td></tr>
  <tr><td>LCD RS</td><td>PD19</td></tr>
  <tr><td>LCD WR</td><td>PD18</td></tr>
  <tr><td>LCD DB11</td><td>PD13</td></tr>
  <tr><td>LCD DB12</td><td>PD14</td></tr>
  <tr><td>LCD DB13</td><td>PD15</td></tr>
  <tr><td>LCD DB14</td><td>PD16</td></tr>
  <tr><td>LCD DB15</td><td>PD17</td></tr>
  <tr><td>LCD DB5</td><td>PD6</td></tr>
  <tr><td>LCD DB6</td><td>PD7</td></tr>
  <tr><td>LCD DB7</td><td>PD8</td></tr>
  <tr><td>LCD DB8</td><td>PD10</td></tr>
  <tr><td>LCD DB9</td><td>PD11</td></tr>
  <tr><td>LCD DB10</td><td>PD12</td></tr>
  <tr><td>LCD DB0</td><td>PD1</td></tr>
  <tr><td>LCD DB1</td><td>PD2</td></tr>
  <tr><td>LCD DB2</td><td>PD3</td></tr>
  <tr><td>LCD DB3</td><td>PD4</td></tr>
  <tr><td>LCD DB4</td><td>PD5</td></tr>
</table><br>

<p>
暫存器<br>
<img src="../../mcu/f1c100s/asm_led/2.jpg" class="maxSize"><br><br>

main.s
</p>
<pre class="brush:asm">
  .global _start
  
  .equiv PIO_BASE,  0x01c20800 
  .equiv PD,        (0x24 * 3)
  .equiv PE,        (0x24 * 4)
  .equiv PIO_CFG0,  0x00
  .equiv PIO_CFG1,  0x04
  .equiv PIO_CFG2,  0x08
  .equiv PIO_DATA,  0x10

  .equiv LCD_CS,    (1 &lt;&lt; 21)
  .equiv LCD_RD,    (1 &lt;&lt; 20)
  .equiv LCD_RS,    (1 &lt;&lt; 19)
  .equiv LCD_WR,    (1 &lt;&lt; 18)
  .equiv LCD_RST,   (1 &lt;&lt; 11)
  .equiv LCD_BL,    (1 &lt;&lt; 6)
  
  .arm
  .text
_start:
  .long 0xea000016
  .byte 'e', 'G', 'O', 'N', '.', 'B', 'T', '0'
  .long 0, __spl_size
  .byte 'S', 'P', 'L', 2
  .long 0, 0
  .long 0, 0, 0, 0, 0, 0, 0, 0
  .long 0, 0, 0, 0, 0, 0, 0, 0
   
_vector:
  b reset
  b .
  b .
  b .
  b .
  b .
  b .
  b .
   
reset:
  ldr r4, =PIO_BASE + PD
  ldr r1, =0x11111111
  str r1, [r4, #PIO_CFG0]
  str r1, [r4, #PIO_CFG1]
  ldr r1, =0x00111111
  str r1, [r4, #PIO_CFG2]

  ldr r4, =PIO_BASE + PE
  ldr r1, [r4, #PIO_CFG0]
  bic r1, #0xf000000
  orr r1, #0x1000000
  str r1, [r4, #PIO_CFG0]

  ldr r1, [r4, #PIO_CFG1]
  bic r1, #0xf000
  orr r1, #0x1000
  str r1, [r4, #PIO_CFG1]

  ldr r4, =PIO_BASE + PD
  ldr r1, =0xffffffff
  str r1, [r4, #PIO_DATA]

  ldr r4, =PIO_BASE + PE
  ldr r1, =0xffffffff
  str r1, [r4, #PIO_DATA]

  bl lcd_rst

  ldr r0, =0x800
  bl lcd_cmd

  ldr r0, =0x100
  bl lcd_dat

  ldr r0, =0x1000
  bl lcd_cmd

  ldr r0, =0x700
  bl lcd_dat

  ldr r0, =0x1800
  bl lcd_cmd

  ldr r0, =0xc002
  bl lcd_dat

  ldr r0, =0x2000
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x4000
  bl lcd_cmd

  ldr r0, =0x1200
  bl lcd_dat

  ldr r0, =0x4800
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x5000
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x6000
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x6800
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x7800
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x8000
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x8800
  bl lcd_cmd

  ldr r0, =0x3800
  bl lcd_dat

  ldr r0, =0x9000
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x9800
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x3800
  bl lcd_cmd

  ldr r0, =0x800
  bl lcd_dat

  ldr r0, =0x8000
  bl lcd_cmd

  ldr r0, =0x8682
  bl lcd_dat

  ldr r0, =0x8800
  bl lcd_cmd

  ldr r0, =0x3e60
  bl lcd_dat

  ldr r0, =0x9000
  bl lcd_cmd

  ldr r0, =0xc080
  bl lcd_dat

  ldr r0, =0x9800
  bl lcd_cmd

  ldr r0, =0x603
  bl lcd_dat

  ldr r0, =0x4820
  bl lcd_cmd

  ldr r0, =0xf000
  bl lcd_dat

  ldr r0, =0x5820
  bl lcd_cmd

  ldr r0, =0x7000
  bl lcd_dat

  ldr r0, =0x20
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x820
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x8020
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x8820
  bl lcd_cmd

  ldr r0, =0x3d00
  bl lcd_dat

  ldr r0, =0x9020
  bl lcd_cmd

  ldr r0, =0x2000
  bl lcd_dat

  ldr r0, =0xa820
  bl lcd_cmd

  ldr r0, =0x2a00
  bl lcd_dat

  ldr r0, =0xb020
  bl lcd_cmd

  ldr r0, =0x2000
  bl lcd_dat

  ldr r0, =0xb820
  bl lcd_cmd

  ldr r0, =0x3b00
  bl lcd_dat

  ldr r0, =0xc020
  bl lcd_cmd

  ldr r0, =0x1000
  bl lcd_dat

  ldr r0, =0xc820
  bl lcd_cmd

  ldr r0, =0x3f00
  bl lcd_dat

  ldr r0, =0xe020
  bl lcd_cmd

  ldr r0, =0x1500
  bl lcd_dat

  ldr r0, =0xe820
  bl lcd_cmd

  ldr r0, =0x2000
  bl lcd_dat

  ldr r0, =0x8040
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x8840
  bl lcd_cmd

  ldr r0, =0x78e0
  bl lcd_dat

  ldr r0, =0x9040
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x9840
  bl lcd_cmd

  ldr r0, =0xf920
  bl lcd_dat

  ldr r0, =0x60
  bl lcd_cmd

  ldr r0, =0x714
  bl lcd_dat

  ldr r0, =0x860
  bl lcd_cmd

  ldr r0, =0x800
  bl lcd_dat

  ldr r0, =0x5060
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x80
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x880
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x1080
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x1880
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x2080
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x2880
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x8080
  bl lcd_cmd

  ldr r0, =0x8000
  bl lcd_dat

  ldr r0, =0x9080
  bl lcd_cmd

  ldr r0, =0x600
  bl lcd_dat

  ldr r0, =0x1800
  bl lcd_cmd

  ldr r0, =0x4020
  bl lcd_dat

  ldr r0, =0x3800
  bl lcd_cmd

  ldr r0, =0x9920
  bl lcd_dat

  ldr r0, =0x8040
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x8840
  bl lcd_cmd

  ldr r0, =0x78e0
  bl lcd_dat

  ldr r0, =0x9040
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x9840
  bl lcd_cmd

  ldr r0, =0xf920
  bl lcd_dat

  ldr r0, =0x20
  bl lcd_cmd

  ldr r0, =0x78e0
  bl lcd_dat

  ldr r0, =0x820
  bl lcd_cmd

  ldr r0, =0x0
  bl lcd_dat

  ldr r0, =0x1020
  bl lcd_cmd

  ldr r4, =320*80
  ldr r5, =0x1f
0:
  mov r0, r5
  bl lcd_dat
  subs r4, #1
  bne 0b
  
  ldr r4, =320*80
  ldr r5, =0x7e0
0:
  mov r0, r5
  bl lcd_dat
  subs r4, #1
  bne 0b
  
  ldr r4, =320*80
  ldr r5, =0xf800
0:
  mov r0, r5
  bl lcd_dat
  subs r4, #1
  bne 0b
  b .

delay:
  push {lr}
0:
  subs r0, #1
  bne 0b
  pop {pc}

lcd_rst:
  push {r4, r5, lr}
  ldr r4, =PIO_BASE + PE
  ldr r5, =0xffffffff

  bic r5, #LCD_RST
  str r5, [r4, #PIO_DATA]
  ldr r0, =10000
  bl delay

  orr r5, #LCD_RST
  str r5, [r4, #PIO_DATA]
  ldr r0, =10000
  bl delay
  pop {r4, r5, pc}

lcd_wr:
  push {r4, r5, lr}
  ldr r4, =PIO_BASE + PD

  and r2, r0, #0x00ff
  and r3, r0, #0xff00
  lsl r2, #1
  lsl r3, #2

  eor r5, r5
  orr r5, r1
  orr r5, r2
  orr r5, r3
  orr r5, #LCD_RD
  str r5, [r4, #PIO_DATA]

  orr r5, #LCD_WR
  str r5, [r4, #PIO_DATA]
  pop {r4, r5, pc}

lcd_dat:
  push {lr}
  mov r1, #LCD_RS
  bl lcd_wr
  pop {pc}

lcd_cmd:
  push {lr}
  mov r1, #0
  bl lcd_wr
  pop {pc}
  .end
</pre><br>

<p>
main.ld
</p>
<pre>
OUTPUT_FORMAT("elf32-littlearm", "elf32-bigarm", "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(_start)

MEMORY {
  ram : ORIGIN = 0x00000000, LENGTH = 32M
}

SECTIONS {
  .text :
  {
    PROVIDE(__spl_start = .);
    *(.text*)
    PROVIDE(__spl_end = .);
    *(.init.text)
    *(.exit.text)
    *(.glue*)
    *(.note.gnu.build-id)
  } &gt; ram
  PROVIDE(__spl_size = __spl_end - __spl_start);

  .rodata ALIGN(8) :
  {
    PROVIDE(__rodata_start = .);
    *(SORT_BY_ALIGNMENT(SORT_BY_NAME(.rodata*)))
    PROVIDE(__rodata_end = .);
  } &gt; ram

  .data ALIGN(8) :
  {
    PROVIDE(__data_start = .);  
    *(.data*)
    . = ALIGN(8);
      PROVIDE(__data_end = .);
    PROVIDE(__image_end = .);
  } &gt; ram

  .bss ALIGN(8) (NOLOAD) :
  {
    PROVIDE(__bss_start = .);
    *(.bss*)
    *(.sbss*)
    *(COMMON)
    . = ALIGN(8);
    PROVIDE(__bss_end = .);
  } &gt; ram

  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  .stab.excl 0 : { *(.stab.excl) }
  .stab.exclstr 0 : { *(.stab.exclstr) }
  .stab.index 0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment 0 : { *(.comment) }
  .debug_abbrev 0 : { *(.debug_abbrev) }
  .debug_info 0 : { *(.debug_info) }
  .debug_line 0 : { *(.debug_line) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  .debug_aranges 0 : { *(.debug_aranges) }
}
</pre><br>

<p>
Makefile
</p>
<pre>
all:
	arm-none-eabi-as -mcpu=arm9 -o main.o main.s
	arm-none-eabi-ld -T main.ld -o main.elf main.o
	arm-none-eabi-objcopy -O binary main.elf main.bin
	gcc mksunxi.c -o mksunxi
	./mksunxi main.bin

flash:
	sudo dd if=main.bin of=/dev/sdX bs=1024 seek=8

clean:
	rm -rf main.bin main.o main.elf
</pre>
<p>
P.S. <b>sdX</b>是記憶卡的位置，MicroSD前置請保留8MB<br>

<p>
編譯
</p>
<pre>
$ make
  arm-none-eabi-as -mcpu=arm9 -o main.o main.s
  arm-none-eabi-ld -T main.ld -o main.elf main.o
  arm-none-eabi-objcopy -O binary main.elf main.bin
  gcc mksunxi.c -o mksunxi
  ./mksunxi main.bin
  The bootloader head has been fixed, spl size is 512 bytes.
</pre><br>

<p>
接著插入MicroSD至PC，修改<b>sdX</b>位置，執行如下命令
</p>
<pre>
$ make flash
  sudo dd if=main.bin of=/dev/sdc bs=1024 seek=8
  2+0 records in
  2+0 records out
  2048 bytes (2.0 kB, 2.0 KiB) copied, 0.0435819 s, 47.0 kB/s
</pre><br>

<p>
將MicroSD插入FC3000，開機即可<br>
<img src="asm_lcd_gpio/1.jpg" class="maxSize"><br>
<img src="asm_lcd_gpio/2.jpg" class="maxSize">
</p>

<p>
<br><a href="../../mcu.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
