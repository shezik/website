<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Game Gear Micro</h3>
<p><b>Linux系統刷機、解說細項</b></p>
<hr size="1">
<p>
參考資料：<br>
1. <a href="https://github.com/steward-fu/ggm/releases">releases</a><br><br>

目前司徒已經完成Game Gear Micro掌機的第一版Linux系統，雖然改機難度有點偏高，不過，司徒還是相當推薦喜歡改機的愛好者可以動手試試，那種樂趣只有自己體驗過才懂得，而基於開源精神，司徒目前已經把所有源代碼發布在<a href="https://github.com/steward-fu/ggm/releases">GitHub</a>，分享給有興趣研究的開源愛好者，雖然開源並沒有強制的法律約束力，不過，司徒還是建議大家可以多多分享修改後的源代碼，這種東西或許就是我們可以傳承給下一代的好東西！司徒接著說明刷機過程和源代碼修改的部份，如果對於源代碼沒興趣的玩家，只要看前半部份的說明就可以。<br><br>

<b>刷機步驟：</b><br>
1. 下載<a href="https://github.com/steward-fu/ggm/releases/download/v1.0/ggm_linux_sd_20220618.img.7z">ggm_linux_sd_20220618.img.7z</a><br>
2. 解壓縮ggm_linux_sd_20220618.img.7z<br>
3. 將ggm_linux_sd_20220618.img刷到MicroSD<br>
4. 插入MicroSD後，開機就可以看到如下畫面：<br>
<img src="linux/1.jpg" class="maxSize"> <img src="linux/2.jpg" class="maxSize"><br>
按鍵1：官方系統(NAND Flash)<br>
按鍵2：Linux系統(MicroSD)<br><br>

按下<b>按鍵1</b>就會進入官方系統(NAND Flash)<br>
<img src="linux/3.jpg" class="maxSize"><br><br>

按下<b>按鍵2</b>就會進入Linux系統(MicroSD)<br>
<img src="linux/4.jpg" class="maxSize"> <img src="linux/5.jpg" class="maxSize"><br><br>

為了致敬SEGA，司徒將桌面拆成四個字母使用：<br>
<img src="linux/6.jpg" class="maxSize"> <img src="linux/7.jpg" class="maxSize"><br>
<img src="linux/8.jpg" class="maxSize"> <img src="linux/9.jpg" class="maxSize"><br>
<img src="linux/10.jpg" class="maxSize"> <img src="linux/11.jpg" class="maxSize"><br>
<img src="linux/12.jpg" class="maxSize"> <img src="linux/13.jpg" class="maxSize"><br><br>

S：設定(Setting)<br>
進入S後，有兩個設定可以使用，分別是亮度調整以及超頻，使用十字按鍵操作，按下藍色START按鍵會返回桌面<br>
<img src="linux/14.jpg" class="maxSize"> <img src="linux/18.jpg" class="maxSize"><br><br>

E：實驗(Experiment)<br>
目前尚未完成，這部份之後會用來跑虛擬GPU實驗項目，目前司徒先放閃屏測試程式，按下藍色START按鍵會返回桌面<br>
<img src="linux/15.jpg" class="maxSize"> <img src="linux/19.jpg" class="maxSize"><br><br>

G：GBA模擬器(GBA Emulator)<br>
司徒使用gpsp模擬器進行修改，為了配合GGM的屏幕特性，司徒修改很多東西，而進入GBA模擬器後，如果沒有遊戲檔案(/roms/gba/)，則提示如下畫面<br>
<img src="linux/16.jpg" class="maxSize"> <img src="linux/17.jpg" class="maxSize"><br><br>

司徒重新改寫了載入遊戲選單，支援中文顯示，字型大小做了適當調整，每次啟動該選單時，會自動停在上次載入遊戲的位置，選單效能也進行優化，不會因為大量遊戲而造成卡頓(如PSP上面那樣)，支援LR快速選單跳躍功能<br>
<img src="linux/20.jpg" class="maxSize"><br><br>

GGM的屏幕顯示區域是240x195，但是，GBA解析度是240x160，因此，多餘的35像素部份，司徒使用<b>GAME BOY ADVANCE</b>字眼顯示<br>
<img src="linux/21.jpg" class="maxSize"><br><br>

按下<b>藍色START</b>按鍵進入選單(按鍵1退出菜單)，司徒也對菜單進行大改寫，只保留司徒覺得想要的部份<br>
<img src="linux/22.jpg" class="maxSize"><br><br>

司徒也花了相當大量的時間在改善閃屏問題，司徒覺得目前狀態算是相當不錯，畫面顯示也相當柔順，如果玩家還是不滿意，建議超頻使用<br>
<img src="linux/23.jpg" class="maxSize"><br><br>

A：Arduboy模擬器(Arduboy Emulator)<br>
目前尚未完成，目前司徒先放聲音以及按鍵測試，按下藍色START按鍵會返回桌面<br>
<img src="linux/24.jpg" class="maxSize"> <img src="linux/25.jpg" class="maxSize"><br><br>

<b>源代碼修改說明：</b><br>
UBOOT修改部份如下<br>
<img src="linux/26.jpg" class="maxSize"><br><br>

在reset時，就先跳轉到boot_menu，為何要在reset一開始就先跳轉呢？因為這是唯一一個可以轉從SPI啟動的時機
</p>
<pre>
    .globl  reset
    .globl  save_boot_params_ret
    .type   save_boot_params_ret,%function

reset:
    bl boot_menu

    /* Allow the board to save important registers */
    b   save_boot_params
</pre><br>

<p>
boot_menu一開始就會判斷是否從RAM執行(UBOOT Relocate後)，如果是，代表UBOOT正在啟動Linux Kernel
</p>
<pre>
boot_menu:
    push {lr}
    tst pc, #0x80000000
    bne boot_linux
</pre><br>
<p>
如果不是正在啟動Linux Kernel，則顯示開機選單，圖片位於MicroSD 2MB偏移位置
</p>
<pre>
    bl ccu_module_init
    bl dram_module_init
    bl sd_module_init

    ldr r0, =IMG_BASE / 512
    ldr r1, =0x80000000
    ldr r2, =(2 * 1024 * 1024) / 512
    bl load_image
    bl lcd_init

    ldr r4, =PIO_BASE + PE
0:
    ldr r0, [r4, #PIO_DATA]
    tst r0, #(1 &lt;&lt; 9)
    beq boot_stock
    tst r0, #(1 &lt;&lt; 10)
    beq boot_linux
    b 0b
</pre><br>
<p>
如果是需要從SPI啟動，則直接呼叫BROM的SPI啟動位址，反之則直接返回原本UBOOT，繼續啟動Linux Kernel的步驟
</p>
<pre>
boot_stock:
    bl lcd_off
    ldr pc, =0xffff4110

boot_linux:
    pop {pc}
</pre><br>
<p>
GBA模擬器修改部份，菜單源代碼替換成gui4ggm.c，原本舊的gui.c保留不動，SDL部份都改成Double Buffer
</p>
<pre>
rl_screen = SDL_SetVideoMode(240, 240, 16, SDL_SWSURFACE | SDL_DOUBLEBUF);
screen = SDL_CreateRGBSurface(SDL_SWSURFACE, 240 * video_scale, 240 * video_scale, 16, 0, 0, 0, 0);
</pre><br>
<p>
像素搬移的部份
</p>
<pre>
int x=0, y=0;
uint32_t *s = (uint32_t*)screen->pixels + (30 * 120);
uint32_t *d = (uint32_t*)rl_screen->pixels + (30 * 120);
for(y=0; y&lt;195; y++){
    for(x=0; x&lt;120; x++){
        *d++ = *s++;
    }
}
</pre><br>
<p>
VSYNC改使用IOCTL方式(司徒已經實作在Framebuffer顯示驅動中)
</p>
<pre>
//delay_us((u64)virtual_frame_count * 50000 / 3 - new_ticks + 2);
if(fbdev &gt; 0){
    int zero=0;
    ioctl(fbdev, FBIO_WAITFORVSYNC, &amp;zero);
}
</pre><br>
<p>
<b>編譯步驟：</b><br>
Miyoo編譯開發工具
</p>
<pre>
$ cd
$ wget https://github.com/steward-fu/miyoo/releases/download/v1.0/toolchain.7z
$ 7za x toolchain.7z
$ sudo mv miyoo /opt/
$ export PATH=$PATH:/opt/miyoo/bin
</pre><br>
<p>
編譯Kernel
</p>
<pre>
$ cd
$ wget https://github.com/steward-fu/ggm/releases/download/src/kernel_20220618.tar.gz
$ tar xvf kernel_20220618.tar.gz
$ cd kernel
$ ./run.sh ggm
</pre><br>
<p>
編譯UBOOT
</p>
<pre>
$ cd
$ wget https://github.com/steward-fu/ggm/releases/download/src/uboot.tar.gz
$ tar xvf uboot.tar.gz
$ cd uboot
$ ./run.sh /dev/sdX ggm
</pre><br>
<p>
編譯GBA模擬器
</p>
<pre>
$ cd
$ wget https://github.com/steward-fu/ggm/releases/download/src/gpsp_20220618.tar.gz
$ tar xvf gpsp_20220618.tar.gz
$ cd gpsp/ggm
$ make -j
</pre><br>
<p>
MicroSD佈局如下<br>
<img src="linux/27.jpg" class="maxSize"><br>
ui：主界面顯示App<br>
app_s：設定App(run.sh)<br>
app_e：實驗App(run.sh)<br>
app_g：GBA模擬器(run.sh)<br>
app_a：Arduboy模擬器(run.sh)<br>
rootfs：系統<br>
mininit：由Kernel呼叫用來掛載rootfs(squashfs系統)<br>
swap.img：虛擬內存(128MB)<br><br>

音量控制是司徒失算的部份，一般音量轉盤都是直接控制大小聲音，但是GGM掌機並不是這樣設計，所以目前無法控制音量，另一部份則是電池顯示，不完美的部份就留給想要折騰的玩家，司徒接下來會把剩餘的虛擬GPU以及Arduboy模擬器完成
</p>

<p>
<br><a href="../../handheld.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
