<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>PMP V</h3>
<p><b>USB Boot流程</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="https://github.com/OpenDingux/jzboot">jzboot</a><br>
2. <a href="http://d1.amobbs.com/bbs_upload782111/files_32/ourdev_576548.pdf">jz4760 boot rom</a><br><br>

君正MIPS CPU支援USB開機啟動，傳輸的USB端點為控制和巨量兩種類型<br>
<img src="jz_usb_boot/1.jpg" class="maxSize"><br><br>

傳輸流程如下：<br>
<img src="jz_usb_boot/2.jpg" class="maxSize"><br><br>

支援命令如下：
</p>
<table>
<tr><th>Command</th><th>Description</th></tr>
<tr><td>0x00: VR_GET_CPU_INFO</td><td>query cpu information</td></tr>
<tr><td>0x01: VR_SET_DATA_ADDRESS</td><td>set data address</td></tr>
<tr><td>0x02: VR_SET_DATA_LENGTH</td><td>set data length</td></tr>
<tr><td>0x03: VR_FLUSH_CACHES</td><td>flush d-cache and i-cache</td></tr>
<tr><td>0x04: VR_PROGRAM_START1</td><td>execute stage1 program (&lt;16KB) to initialize gpio and sdram</td></tr>
<tr><td>0x05: VR_PROGRAM_START2</td><td>execute stage2 program from sdram</td></tr>
</table><br>

<p>
流程圖如下：<br>
<img src="jz_usb_boot/3.jpg" class="maxSize"><br><br>

命令0x00的內容：<br>
<img src="jz_usb_boot/4.jpg" class="maxSize"><br><br>

命令0x01的內容：<br>
<img src="jz_usb_boot/5.jpg" class="maxSize"><br><br>

命令0x02的內容：<br>
<img src="jz_usb_boot/6.jpg" class="maxSize"><br><br>

命令0x03的內容：<br>
<img src="jz_usb_boot/7.jpg" class="maxSize"><br><br>

命令0x04的內容：<br>
<img src="jz_usb_boot/8.jpg" class="maxSize"><br><br>

命令0x05的內容：<br>
<img src="jz_usb_boot/9.jpg" class="maxSize"><br><br>

jzboot.c
</p>
<pre class="brush:cpp">
#include &lt;errno.h&gt;
#include &lt;getopt.h&gt;
#include &lt;libusb-1.0/libusb.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;

#define MY_NAME      "jzboot"

#define STAGE1_LOAD_ADDR  0x80000000
#define STAGE2_LOAD_ADDR  0x81000000

#define TIMEOUT_MS    5000

#define ARRAY_SIZE(x) (sizeof(x) ? sizeof(x) / sizeof((x)[0]) : 0)

enum commands {
  CMD_GET_CPU_INFO,
  CMD_SET_DATA_ADDR,
  CMD_SET_DATA_LEN,
  CMD_FLUSH_CACHES,
  CMD_START1,
  CMD_START2,
};

static const uint16_t ingenic_ids[] = {
  0x601a,
  0xa108,
};

static const uint16_t ingenic_product_ids[] = {
  0x4740,
  0x4750,
  0x4760,
  0x4770,
  0x4780,
};

static uint16_t pid;

static unsigned int stage1_load_addr = STAGE1_LOAD_ADDR;
static unsigned int stage2_load_addr = STAGE2_LOAD_ADDR;

static FILE *stage1;
static FILE *stage2;
static FILE *devicetree;

static const struct option options[] = {
  {"help", no_argument, 0, 'h'},
  {"stage1-addr", required_argument, 0, 'a'},
  {"stage2-addr", required_argument, 0, 'b'},
  {0, 0, 0, 0},
};

static const char *options_descriptions[] = {
  "Show this help and quit.",
  "Set the load and boot address of the 1st-stage bootloader.",
  "Set the load and boot address of the program.",
};

static void usage(void)
{
  unsigned int i;

  printf("Usage:\n\t" MY_NAME " [OPTIONS ...] stage1 [kernel] [devicetree]\n\nOptions:\n");
  for (i = 0; options[i].name; i++)
    printf("\t-%c, --%s\n\t\t\t%s\n",
          options[i].val, options[i].name,
          options_descriptions[i]);
}

static int cmd_get_info(libusb_device_handle *hdl)
{
  unsigned char info[8];

  int ret;

  ret = libusb_control_transfer(hdl, LIBUSB_ENDPOINT_IN |
      LIBUSB_REQUEST_TYPE_VENDOR | LIBUSB_RECIPIENT_DEVICE,
      CMD_GET_CPU_INFO, 0, 0, info, sizeof(info), TIMEOUT_MS);

  if (ret != sizeof(info))
    return -EIO;

  return 0;
}

static int cmd_control(libusb_device_handle *hdl, uint32_t cmd, uint32_t attr)
{
  return libusb_control_transfer(hdl, LIBUSB_ENDPOINT_OUT |
      LIBUSB_REQUEST_TYPE_VENDOR | LIBUSB_RECIPIENT_DEVICE,
      cmd, (attr &gt;&gt; 16) &amp; 0xffff, attr &amp; 0xffff,
      NULL, 0, TIMEOUT_MS);
}

static int cmd_load_data(libusb_device_handle *hdl, FILE *f,
       uint32_t addr, size_t *data_size)
{
  int ret, bytes_transferred;
  size_t size, to_read, to_write;
  unsigned char *data;
  char *ptr;

  /* Get the file size */
  fseek(f, 0, SEEK_END);
  size = ftell(f);
  fseek(f, 0, SEEK_SET);

  if (data_size)
    *data_size = size;

  data = malloc(size);
  if (!data)
    return -ENOMEM;

  ptr = (char *)data;
  to_read = size;
  do {
    size_t bytes_read = fread(ptr, 1, to_read, f);
    if (!bytes_read) {
      ret = -EIO;
      goto out_free;
    }

    ptr += bytes_read;
    to_read -= bytes_read;
  } while (to_read &gt; 0);

  /* Send the SET_DATA_LEN command */
  ret = cmd_control(hdl, CMD_SET_DATA_LEN, size);
  if (ret)
    goto out_free;

  /* Send the SET_DATA_ADDR command */
  ret = cmd_control(hdl, CMD_SET_DATA_ADDR, addr);
  if (ret)
    goto out_free;

  ptr = (char *)data;
  to_write = size;

  do {
    ret = libusb_bulk_transfer(hdl, LIBUSB_ENDPOINT_OUT | 0x1,
             ptr, (int)to_write,
             &amp;bytes_transferred, TIMEOUT_MS);
    if (ret)
      goto out_free;

    to_write -= bytes_transferred;
    ptr += bytes_transferred;
  } while (to_write &gt; 0);

  printf("Uploaded %lu bytes at address 0x%08x\n",
         (unsigned long)size, addr);

out_free:
  free(data);
  return ret;
}

int main(int argc, char **argv)
{
  libusb_context *usb_ctx;
  libusb_device_handle *hdl = NULL;
  int exit_code = EXIT_FAILURE;
  size_t kernel_size;
  unsigned int i, j;
  int ret, c;
  char *end;

  while ((c = getopt_long(argc, argv, "+ha:b:", options, NULL)) != -1) {
    switch (c) {
    case 'h':
      usage();
      return EXIT_SUCCESS;
    case 'a':
      stage1_load_addr = strtol(optarg, &amp;end, 16);
      if (optarg == end) {
        fprintf(stderr, "Unable to parse stage1 addr\n");
        return EXIT_FAILURE;
      }
      break;
    case 'b':
      stage2_load_addr = strtol(optarg, &amp;end, 16);
      if (optarg == end) {
        fprintf(stderr, "Unable to parse stage2 addr\n");
        return EXIT_FAILURE;
      }
      break;
    case '?':
      return EXIT_FAILURE;
    }
  }

  if (optind == argc || argc &gt; optind + 3) {
    fprintf(stderr, "Unable to parse arguments.\n");
    usage();
    return EXIT_FAILURE;
  }

  stage1 = fopen(argv[optind], "rb");
  if (!stage1) {
    fprintf(stderr, "Unable to open stage1 program\n");
    return EXIT_FAILURE;
  }

  if (argc &gt;= optind + 2) {
    stage2 = fopen(argv[optind + 1], "rb");
    if (!stage2) {
      fprintf(stderr, "Unable to open stage2 program\n");
      return EXIT_FAILURE;
    }
  }

  if (argc &gt;= optind + 3) {
    devicetree = fopen(argv[optind + 2], "rb");
    if (!devicetree) {
      fprintf(stderr, "Unable to open devicetree\n");
      return EXIT_FAILURE;
    }
  }

  ret = libusb_init(&amp;usb_ctx);
  if (ret) {
    fprintf(stderr, "Unable to init libusb\n");
    goto out_close_files;
  }

  for (j = 0; !hdl &amp;&amp; j &lt; ARRAY_SIZE(ingenic_ids); j++) {
    for (i = 0; !hdl &amp;&amp; i &lt; ARRAY_SIZE(ingenic_product_ids); i++) {
      hdl = libusb_open_device_with_vid_pid(usb_ctx,
        ingenic_ids[j], ingenic_product_ids[i]);
    }
  }


  if (!hdl) {
    fprintf(stderr, "Unable to find Ingenic device.\n");
    goto out_exit_libusb;
  }

  pid = ingenic_product_ids[i - 1];

  ret = libusb_claim_interface(hdl, 0);
  if (ret) {
    fprintf(stderr, "Unable to claim interface 0\n");
    goto out_close_dev_handle;
  }

  if (cmd_get_info(hdl)) {
    fprintf(stderr, "Unable to read CPU info\n");
    goto out_close_dev_handle;
  }

  printf("Found Ingenic JZ%x based device\n", pid);

  ret = cmd_load_data(hdl, stage1, stage1_load_addr, NULL);
  if (ret) {
    fprintf(stderr, "Unable to upload stage1 bootloader\n");
    goto out_close_dev_handle;
  }

  ret = cmd_control(hdl, CMD_START1, stage1_load_addr);
  if (ret) {
    fprintf(stderr, "Unable to execute stage1 bootloader\n");
    goto out_close_dev_handle;
  }

  if (!stage2)
    goto out_complete;

  printf("Waiting for stage1 bootloader to complete operation...\n");
  for (i = 0; i &lt; 100; i++) {
    if (!cmd_get_info(hdl))
      break;

    usleep(10000); /* 10ms * 100 = 1s */
  }

  if (i == 100) {
    fprintf(stderr, "Stage1 bootloader did not return.\n");
    goto out_close_dev_handle;
  }

  ret = cmd_load_data(hdl, stage2, stage2_load_addr, &amp;kernel_size);
  if (ret) {
    fprintf(stderr, "Unable to upload stage2 program\n");
    goto out_close_dev_handle;
  }

  if (devicetree) {
    ret = cmd_load_data(hdl, devicetree,
            stage2_load_addr + kernel_size, NULL);
    if (ret) {
      fprintf(stderr, "Unable to upload devicetree\n");
      goto out_close_dev_handle;
    }
  }

  ret = cmd_control(hdl, CMD_FLUSH_CACHES, 0);
  if (ret) {
    fprintf(stderr, "Unable to flush caches\n");
    goto out_close_dev_handle;
  }

  ret = cmd_control(hdl, CMD_START2, stage2_load_addr);
  if (ret) {
    fprintf(stderr, "Unable to execute program\n");
    goto out_close_dev_handle;
  }

out_complete:
  printf("Operation complete.\n");
  exit_code = EXIT_SUCCESS;
out_close_dev_handle:
  libusb_close(hdl);
out_exit_libusb:
  libusb_exit(usb_ctx);
out_close_files:
  fclose(stage1);
  if (stage2)
    fclose(stage2);
  if (devicetree)
    fclose(devicetree);
  return exit_code;
}
</pre><br>

<p>
編譯命令：
</p>
<pre>
$ gcc jzboot.c -o jzboot -lusb-1.0
</pre><br>

<p>
<br><a href="../../handheld.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
