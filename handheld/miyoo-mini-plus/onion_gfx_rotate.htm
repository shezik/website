<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Miyoo Mini Plus &gt;&gt; Onion</h3>
<p><b>gfx screen rotation</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="https://github.com/OnionUI/Onion">onion</a><br><br>

main.c
</p>
<pre class="brush:cpp">
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;stdint.h&gt;
#include &lt;linux/fb.h&gt;
#include &lt;sys/ioctl.h&gt;
#include &lt;SDL/SDL.h&gt;
#include &lt;mi_sys.h&gt;
#include &lt;mi_gfx.h&gt;

int fd_fb = 0;
struct fb_fix_screeninfo finfo = {0};
struct fb_var_screeninfo vinfo = {0};
MI_PHY fb_phyAddr = {0};
MI_GFX_Surface_t stSrc = {0};
MI_GFX_Rect_t stSrcRect = {0};
MI_GFX_Surface_t stDst = {0};
MI_GFX_Rect_t stDstRect = {0};
MI_GFX_Opt_t stOpt = {0};

void GFX_Init(void)
{
    if (fd_fb == 0) {
        SDL_SetVideoMode(640, 480, 32, SDL_SWSURFACE);
        MI_SYS_Init();
        MI_GFX_Open();

        fd_fb = open("/dev/fb0", O_RDWR);
        ioctl(fd_fb, FBIOGET_FSCREENINFO, &amp;finfo);
        fb_phyAddr = finfo.smem_start;
        ioctl(fd_fb, FBIOGET_VSCREENINFO, &amp;vinfo);
        vinfo.yoffset = 0;
        ioctl(fd_fb, FBIOPUT_VSCREENINFO, &amp;vinfo);
        MI_SYS_MemsetPa(fb_phyAddr, 0, 640 * 480 * 4 * 2);

        stDst.phyAddr = fb_phyAddr;
        stDst.eColorFmt = E_MI_GFX_FMT_ARGB8888;
        stDst.u32Width = 640;
        stDst.u32Height = 480;
        stDst.u32Stride = 640 * 4;
        stDstRect.s32Xpos = 0;
        stDstRect.s32Ypos = 0;
        stDstRect.u32Width = 640;
        stDstRect.u32Height = 480;

        memset(&amp;stOpt, 0, sizeof(stOpt));
        stOpt.eSrcDfbBldOp = E_MI_GFX_DFB_BLD_ONE;
        stOpt.eRotate = E_MI_GFX_ROTATE_180;
    }
}

void GFX_Quit(void)
{
    if (fd_fb) {
        vinfo.yoffset = 0;
        ioctl(fd_fb, FBIOPUT_VSCREENINFO, &amp;vinfo);
        close(fd_fb);
        fd_fb = 0;
        MI_GFX_Close();
        MI_SYS_Exit();
    }
}

#define pixelsPa unused1
SDL_Surface* GFX_CreateRGBSurface(uint32_t flags, int width, int height, int depth, uint32_t Rmask, uint32_t Gmask, uint32_t Bmask, uint32_t Amask)
{
    SDL_Surface *surface;
    MI_PHY phyAddr;
    void *virAddr;
    int pitch = width * uint32_t(depth/8);
    uint32_t size = pitch * height;

    MI_SYS_MMA_Alloc(NULL, size, &amp;phyAddr);
    MI_SYS_Mmap(phyAddr, size, &amp;virAddr, TRUE);
    surface = SDL_CreateRGBSurfaceFrom(virAddr,width,height,depth,pitch,Rmask,Gmask,Bmask,Amask);
    if (surface != NULL) {
        surface-&gt;pixelsPa = phyAddr;
    }
    return surface;
}

void GFX_FreeSurface(SDL_Surface *surface)
{
    MI_PHY phyAddr = surface-&gt;pixelsPa;
    void *virAddr = surface-&gt;pixels;
    uint32_t size = surface-&gt;pitch * surface-&gt;h;

    SDL_FreeSurface(surface);
    if (phyAddr) {
        MI_SYS_Munmap(virAddr, size);
        MI_SYS_MMA_Free(phyAddr);
    }
}

void GFX_ClearSurface(SDL_Surface *surface)
{
    MI_SYS_MemsetPa(surface-&gt;pixelsPa,0,surface-&gt;pitch * surface-&gt;h);
}

void GFX_CopySurface(SDL_Surface *src, SDL_Surface *dst)
{
    uint32_t size = src-&gt;pitch * src-&gt;h;

    if (size == uint32_t(dst-&gt;pitch * dst-&gt;h)) {
        MI_SYS_FlushInvCache(src-&gt;pixels, size);
        MI_SYS_MemcpyPa(dst-&gt;pixelsPa,src-&gt;pixelsPa,size);
    }
}

void GFX_Flip(SDL_Surface *surface)
{
    MI_U16 u16Fence;

    stSrc.phyAddr = surface-&gt;pixelsPa;
    if (surface-&gt;format-&gt;BytesPerPixel == 2) {
        stSrc.eColorFmt = E_MI_GFX_FMT_RGB565;
    } 
    else {
        stSrc.eColorFmt = E_MI_GFX_FMT_ARGB8888;
    }
    stSrc.u32Width = surface-&gt;w;
    stSrc.u32Height = surface-&gt;h;
    stSrc.u32Stride = surface-&gt;pitch;
    stSrcRect.s32Xpos = 0;
    stSrcRect.s32Ypos = 0;
    stSrcRect.u32Width = stSrc.u32Width;
    stSrcRect.u32Height = stSrc.u32Height;
#ifdef DOUBLEBUF
    vinfo.yoffset ^= 480;
    stDst.phyAddr = fb_phyAddr + (640 * vinfo.yoffset * 4);
#endif
    MI_SYS_FlushInvCache(surface-&gt;pixels, surface-&gt;pitch * surface-&gt;h);
    MI_GFX_BitBlit(&amp;stSrc,&amp;stSrcRect,&amp;stDst,&amp;stDstRect,&amp;stOpt,&amp;u16Fence);
    MI_GFX_WaitAllDone(FALSE, u16Fence);
#ifdef DOUBLEBUF
    ioctl(fd_fb, FBIOPAN_DISPLAY, &amp;vinfo);
#endif
}

SDL_Surface *screen = NULL;

int main(int argc, char *argv[])
{
    SDL_Rect rt = {0};

    SDL_Init(SDL_INIT_VIDEO);
    GFX_Init();
    SDL_ShowCursor(0);
    screen = GFX_CreateRGBSurface(0, 640, 480, 16, 0, 0, 0, 0);
    
    SDL_FillRect(screen, &amp;screen-&gt;clip_rect, SDL_MapRGB(screen-&gt;format, 0xff, 0x00, 0x00));

    rt.x = 50;
    rt.y = 50;
    rt.w = 30;
    rt.h = 30;
    SDL_FillRect(screen, &amp;rt, SDL_MapRGB(screen-&gt;format, 0x00, 0xff, 0x00));

    rt.x = 100;
    rt.y = 100;
    rt.w = 50;
    rt.h = 100;
    SDL_FillRect(screen, &amp;rt, SDL_MapRGB(screen-&gt;format, 0x00, 0x00, 0xff));

    GFX_Flip(screen);
    SDL_Delay(3000);

    GFX_FreeSurface(screen);
    GFX_Quit();
    SDL_Quit();
    return 0;
}
</pre><br>

<p>
編譯
</p>
<pre>
$ cd
$ wget https://github.com/steward-fu/archives/releases/download/miyoo-mini-plus/onion_toolchain.tar.gz
$ tar xvf onion_toolchain.tar.gz
$ mv miyoomini-toolchain /opt/onion
$ export PATH=/opt/onion/bin:$PATH

$ arm-linux-gnueabihf-g++ main.c -Wl,-rpath-link=/opt/onion/arm-linux-gnueabihf/libc/usr/lib/ -lSDL -lmi_ipu -lmi_sys -lmi_disp -lmi_gfx -lcam_os_wrapper -lmi_common -o test
</pre><br>

<p>
<br><a href="../../handheld.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
