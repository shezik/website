<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Miyoo Mini Plus &gt;&gt; Linux</h3>
<p><b>set cpu clock</b></p>
<hr size="1">
<p>
main.c
</p>
<pre class="brush:cpp">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdint.h&gt;
#include &lt;string.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/mman.h&gt;

#define BASE_REG_RIU_PA   0x1f000000
#define BASE_REG_MPLL_PA  (BASE_REG_RIU_PA + 0x103000 * 2)
#define PLL_SIZE          0x1000

static void write_file(const char* fname, char* str)
{
    int fd = open(fname, O_WRONLY);

    if (fd &gt;= 0) {
        write(fd, str, strlen(str));
        close(fd);
    }
}

static int set_cpuclock(uint32_t newclock)
{
    int fd_mem = -1;
    void *pll_map = NULL;
    uint32_t post_div = 0;
    char clockstr[16] = {0};
    const char fn_governor[] = "/sys/devices/system/cpu/cpufreq/policy0/scaling_governor";
    const char fn_setspeed[] = "/sys/devices/system/cpu/cpufreq/policy0/scaling_setspeed";
 
    fd_mem = open("/dev/mem", O_RDWR);
    if (fd_mem &lt; 0) {
        return -1;
    }
 
    pll_map = mmap(0, PLL_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd_mem, BASE_REG_MPLL_PA);
    if (pll_map) {
        printf("Set cpuclock %dMHz\n", newclock);
 
        newclock*= 1000;
        sprintf(clockstr, "%d", newclock);
        write_file(fn_governor, "userspace");
        write_file(fn_setspeed, clockstr);
 
        if (newclock &gt;= 800000) {
            post_div = 2;
        }
        else if (newclock &gt;= 400000) {
            post_div = 4;
        }
        else if (newclock &gt;= 200000) {
            post_div = 8;
        }
        else {
            post_div = 16;
        }
 
        if (1) {
            static const uint64_t divsrc = 432000000llu * 524288;
            uint32_t rate = (newclock * 1000) / 16 * post_div / 2;
            uint32_t lpf = (uint32_t)(divsrc / rate);
            volatile uint16_t* p16 = (uint16_t*)pll_map;
            uint32_t cur_post_div = (p16[0x232] &amp; 0x0f) + 1;
            uint32_t tmp_post_div = cur_post_div;
 
            if (post_div &gt; cur_post_div) {
                while (tmp_post_div != post_div) {
                    tmp_post_div &lt;&lt;= 1;
                    p16[0x232] = (p16[0x232] &amp; 0xf0) | ((tmp_post_div - 1) &amp; 0x0f);
                }
            }
 
            p16[0x2A8] = 0x0000;        // reg_lpf_enable = 0
            p16[0x2AE] = 0x000f;        // reg_lpf_update_cnt = 32
            p16[0x2A4] = lpf &amp; 0xffff;  // set target freq to LPF high
            p16[0x2A6] = lpf &gt;&gt; 16;     // set target freq to LPF high
            p16[0x2B0] = 0x0001;        // switch to LPF control
            p16[0x2B2]|= 0x1000;        // from low to high
            p16[0x2A8] = 0x0001;        // reg_lpf_enable = 1
            while(!(p16[0x2ba] &amp; 1));   // polling done
            p16[0x2A0] = lpf &amp; 0xffff;  // store freq to LPF low
            p16[0x2A2] = lpf &gt;&gt; 16;     // store freq to LPF low
 
            if (post_div &lt; cur_post_div) {
                while (tmp_post_div != post_div) {
                    tmp_post_div &gt;&gt;= 1;
                    p16[0x232] = (p16[0x232] &amp; 0xf0) | ((tmp_post_div - 1) &amp; 0x0f);
                }
            }
        }
        munmap(pll_map, PLL_SIZE);
    }
    close(fd_mem);
    return 0;
}

int main(int argc, char **argv)
{
    set_cpuclock(1500);
    return 0;
}
</pre>
<p>
P.S. newclock = 1500 = 1.5GHz
</p>

<p>
<br><a href="../../handheld.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
