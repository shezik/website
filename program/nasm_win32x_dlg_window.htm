<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../program.htm">程式語言</a> - Netwide Assembler (NASM) - Win32 API (NASMX) - Dialog - <b>Create Window</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://masm32.com/board/index.php<br>
https://www.nasm.us/xdoc/2.13rc9/html/nasmdoc0.html<br><br>

Windows的視窗可以分成：<b>Dialog</b>、Single Document Interface(<b>SDI</b>)、Multiple Document Interface(<b>MDI</b>)三種類別，相較於SDI、MDI這兩類別的程式，Dialog類別是比較容易上手學習的一個類別，相當適合初學者入門學習，而Windows程式設計的精髓就是，學會其中一個類別，其餘類別都可以很容易上手，Windows控制項(如：Button、Edit)也是此類道理，比較需要注意的是，Windows視窗程式設計的核心是圍繞着事件處理(處理Message)，任何的視窗設定或者溝通都是以事件導向為原則，因此，寫出一個簡單的視窗框架，將有助於了解Windows視窗程式的運作<br><br>

main.asm
</p>
<pre class="brush:asm">
    %include "c:\\nasmx\\inc\\nasmx.inc"
    %include "c:\\nasmx\\inc\\win32\\windows.inc"
    %include "c:\\nasmx\\inc\\win32\\user32.inc"
    %include "c:\\nasmx\\inc\\win32\\kernel32.inc"

    entry start

    section .data
szCaption    declare(NASMX_TCHAR) NASMX_TEXT("main"),0
CommandLine  dd 0
hInstance    dd 0

NASMX_ISTRUC msg, MSG 
    NASMX_AT hwnd,    NULL
    NASMX_AT message, NULL
    NASMX_AT wParam,  NULL
    NASMX_AT lParam,  NULL
    NASMX_AT time,    NULL
    NASMX_ISTRUC pt, POINT
        NASMX_AT x, 0
        NASMX_AT y, 0
    NASMX_IENDSTRUC
NASMX_IENDSTRUC

    section .text
proc WinMain, dword hInst, dword hPrevInst, dword CmdLine, dword CmdShow
    locals none

    invoke CreateWindowEx, WS_EX_LEFT, WC_DIALOG, szCaption, \
        WS_OVERLAPPEDWINDOW | WS_VISIBLE, 0, 0, 300, 300, NULL, NULL, NULL, NULL

    do  
        invoke DispatchMessage, msg
        invoke GetMessage, msg, NULL, NULL, NULL
    while eax, !=, 0

    mov eax, dword [msg + MSG.wParam]
endproc

proc start, dword argc, dword argv
    locals none

    invoke GetModuleHandle, NULL
    mov [hInstance], eax

    invoke GetCommandLine, NULL
    mov [CommandLine], eax

    invoke WinMain, [hInstance], NULL, [CommandLine], SW_SHOWNORMAL
    invoke ExitProcess, NULL
endproc
</pre>
<p>
<b>Line 13~23</b>：NASMX_STRUC用來定義Struct，而NASMX_ISTRUC則是宣告資料(Instance)的意思，NASMX_AT用來指定初始化的資料內容，如果沒有想要做資料初始化，可以省略NASMX_AT<br>
<b>Line 29~30</b>：在建立Windows視窗時，需要指定對應的Class，如：Edit、Button，除了可以使用系統預設的Class之外，也可以註冊自定義的Class，上面例子使用的WC_DIALOG，就是系統預設定義的Dialog Class，WS_OVERLAPPEDWINDOW代表視窗有標題、最大化、最小化的按鈕，WS_VISIBLE是建立一個可視化的視窗<br>
<b>Line 33</b>：分發Message到處理視窗事件的副程式，由於目前的Dialog視窗並沒有對應的處理副程式，因此，無法處理任何Message，包含關閉視窗的Message，所以執行後，必須使用kill命令強制關閉該視窗<br>
<b>Line 34</b>：從Queue提取Message(包含視窗、系統事件)<br>
<b>Line 43~47</b>：一般習慣是在程式進入時，保存Instance、CommandLine的內容<br>
<b>Line 49</b>：呼叫自定義的WinMain()，模擬C語言的WinMain()，當然也可以把內容都寫在start()裡面<br><br>

完成<br>
<img style="border:0px" src="nasm_win32_dlg_window/1.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
