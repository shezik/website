<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../program.htm">程式語言</a> - High Level Assembly (HLA) - Win32 API (HLA v1.x) - Single Document Interface (SDI) - <b>Create Window</b></h3>
<hr size="1"><br>
<p>
參考網站：<br>
http://winapi.freetechsecrets.com/win32/<br>
http://masm32.com/board/index.php?topic=3584.0<br>
https://www.plantation-productions.com/Webster/<br>
https://www.plantation-productions.com/Webster/Win32Asm/win32API.html<br><br>

Windows的視窗可以分成：<b>Dialog</b>、Single Document Interface(<b>SDI</b>)、Multiple Document Interface(<b>MDI</b>)三種類別，相對於SDI、MDI，Dialog類別是比較容易上手學習的一個類別，相當適合初次學習Windows視窗設計的使用者，而Windows視窗程式設計的核心就是圍繞着事件處理(處理Message)，任何的視窗設定或者溝通都是以事件導向為原則，因此，寫出一個簡單的視窗框架，將有助於了解Windows視窗程式的運作<br><br>

main.hla
</p>
<pre class="brush:asm">
program main;
 
#include("w.hhf")
#include("args.hhf")
#include("memory.hhf")
#include("strings.hhf")
 
static
    hInstance:   dword;
    CommandLine: string;
    wndClass:    w.WNDCLASS;
 
readonly
    szName: string:= "main";
 
procedure WinMain(hInst:dword; hPrevInst:dword; CmdLine:string; CmdShow:dword);
var
    msg: w.MSG;
 
begin WinMain;
    mov(w.DefWindowProc, wndClass.lpfnWndProc);
    mov(szName, wndClass.lpszClassName);
    w.RegisterClass(wndClass);

    w.CreateWindowEx(w.WS_EX_LEFT, szName, szName,
        w.WS_OVERLAPPEDWINDOW | w.WS_VISIBLE, 0, 0, 300, 300, 0, 0, NULL, NULL);
     
    forever
        w.GetMessage(msg, NULL, 0, 0);
        breakif(!eax);
 
        w.DispatchMessage(msg);
    endfor;
    mov(msg.wParam, eax);
end WinMain;
 
begin main;
    w.GetModuleHandle(NULL);
    mov(eax, hInstance);
    mov(arg.cmdLn(), CommandLine);
 
    WinMain(hInstance, NULL, CommandLine, w.SW_SHOWNORMAL);
 
    w.ExitProcess(eax);
end main;
</pre>
<p>
<b>Line 8</b>：初始化的資料區段<br>
<b>Line 9~11</b>：初始化的Global變數<br>
<b>Line 13</b>：唯讀的資料區段<br>
<b>Line 14</b>：唯讀的Global變數<br>
<b>Line 16~35</b>：類似Pascal語言的Procedure宣告方式<br>
<b>Line 17~18</b>：類似Pascal語言的Local變數宣告方式<br>
<b>Line 20~35</b>：類似Pascal語言的Procedure主體<br>
<b>Line 21~23</b>：一般SDI視窗會註冊屬於自己的Class並且設定事件處理副程式，目前司徒著重在說明如何建立Windows視窗，因此，我們使用系統預設的事件處理副程式(DefWindowProc)，視窗訊息統一交給系統幫忙處理，由於是自定義的Class，因此，需要幫這個Class設定一個名字，之後就可以用這個Class名字來建立Windows視窗<br>
<b>Line 25~26</b>：使用剛剛註冊的Class來建立Windows視窗，WS_OVERLAPPEDWINDOW代表視窗有標題、最大化、最小化的按鈕，WS_VISIBLE是建立一個可視化的視窗<br>
<b>Line 28~33</b>：無窮迴圈寫法<br>
<b>Line 29</b>：從Queue提取Message(包含視窗、系統事件)<br>
<b>Line 32</b>：分發Message到處理視窗事件的副程式，由於目前註冊的處理副程式是使用系統預設(DefWindowProc)，因此，無法處理這個SDI視窗的Message，包含關閉視窗的Message，所以必須使用kill命令強制關閉該視窗<br>
<b>Line 34</b>：回傳值都是放在eax<br>
<b>Line 38~40</b>：一般習慣是在程式進入時，保存Instance、CommandLine的內容<br>
<b>Line 42</b>：呼叫自定義的WinMain()，模擬C語言的WinMain()，當然也可以把內容都寫在start()裡面<br><br>

完成<br>
<img style="border:0px" src="nasm_win32_sdi_window/1.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
