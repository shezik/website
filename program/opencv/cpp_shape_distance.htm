<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>OpenCV &gt;&gt; C/C++</h3>
<p><b>shape distance</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="https://docs.opencv.org/master/examples.html">examples</a><br>
2. <a href="https://docs.opencv.org/3.4/dc/dbf/classcv_1_1ShapeDistanceExtractor.html#aba29b7775eca6bd6c4b4f5e300094097">computeDistance</a><br><br>

prototype
</p>
<pre class="brush:cpp">
virtual float cv::ShapeDistanceExtractor::computeDistance(
  InputArray contour1,
  InputArray contour2);
</pre><br>
<p>
main.cpp
</p>
<pre class="brush:cpp">
#include &lt;opencv2/shape.hpp&gt;
#include &lt;opencv2/imgcodecs.hpp&gt;
#include &lt;opencv2/highgui.hpp&gt;
#include &lt;opencv2/imgproc.hpp&gt;
#include &lt;opencv2/core/utility.hpp&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;

using namespace std;
using namespace cv;

static vector&lt;Point&gt; simpleContour(const Mat&amp; currentQuery, int n=300)
{
  vector&lt;vector&lt;Point&gt;&gt; _contoursQuery;
  vector &lt;Point&gt; contoursQuery;
  findContours(currentQuery, _contoursQuery, RETR_LIST, CHAIN_APPROX_NONE);
  for(size_t border=0; border&lt;_contoursQuery.size(); border++){
    for(size_t p=0; p&lt;_contoursQuery[border].size(); p++){
      contoursQuery.push_back(_contoursQuery[border][p]);
    }
  }
  int dummy=0;
  for(int add=(int)contoursQuery.size()-1; add&lt;n; add++){
    contoursQuery.push_back(contoursQuery[dummy++]);
  }
  cv::randShuffle(contoursQuery);
  vector&lt;Point&gt; cont;
  for(int i=0; i&lt;n; i++){
    cont.push_back(contoursQuery[i]);
  }
  return cont;
}

int main(int argc, char** argv)
{
  Size size(300, 300);
  
  Mat src=imread("1.jpg", IMREAD_GRAYSCALE);
  Mat srcToShow;
  resize(src, srcToShow, size, 0, 0, INTER_LINEAR_EXACT);
  imshow("src", srcToShow);
  moveWindow("src", 0, 300);
  vector&lt;Point&gt; csrc = simpleContour(src);
  if(src.empty()){
    printf("failed to load 1.jpg\n");
    return -1;
  }

  Mat dst=imread("2.jpg", IMREAD_GRAYSCALE);
  Mat dstToShow;
  resize(dst, dstToShow, size, 0, 0, INTER_LINEAR_EXACT);
  imshow("dst", dstToShow);
  moveWindow("dst", 305, 300);
  vector&lt;Point&gt; cdst = simpleContour(dst);
  if(dst.empty()){
    printf("failed to load 2.jpg\n");
    return -1;
  }

  cv::Ptr &lt;cv::ShapeContextDistanceExtractor&gt; mysc = cv::createShapeContextDistanceExtractor();
  float dis = mysc-&gt;computeDistance(csrc, cdst);
  printf("distance: %f\n", dis);
  waitKey();
  destroyWindow("src");
  destroyWindow("dst");
  return 0;
}
</pre><br>

<p>
CMakeLists.txt
</p>
<pre>
cmake_minimum_required(VERSION 2.8)
project(main)
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
add_executable(main main.cpp)
target_link_libraries(main ${OpenCV_LIBS})
</pre><br>

<p>
編譯並且執行
</p>
<pre>
$ cmake .
$ make
$ ./main
</pre><br>

<p>
完成<br>
<img src="cpp_shape_distance/1.jpg" class="maxSize"><br>
distance: 0.139355
</p>

<p>
<br><a href="../../program.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
