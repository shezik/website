<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushAsm.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>High Level Assembly (HLA) &gt;&gt; Win32 API (Original Style) &gt;&gt; Dialog</h3>
<p><b>Handle Event</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="http://winapi.freetechsecrets.com/win32/">win32</a><br>
2. <a href="http://masm32.com/board/index.php?topic=3584.0">masm32</a><br><br>

一般在建立Windows視窗時，會註冊自定義的Class並且設定事件處理的副程式(callback)，不過，目前範例使用的Class是系統預設的WC_DIALOG，因此，可以透過SetWindowLong()設定callback，這種替換callback的行為就稱為Subclass，意指為原本Class的Subclass，所以Subclass後，需要將原先callback的位址(SetWindowLong()的回傳值)保存下來，然後透過呼叫CallWindowProc()(傳入原先callback的位址)，用來將處理控制權移交回原先視窗元件，所以當有多層Subclass的情形發生時，每次在處理事件時，記得判斷對應的Handle，如：在處理關閉事件時(WM_CLOSE)，會先判斷目前的hWnd是否為當前的視窗hWnd，如果是當前視窗hWnd，才進行關閉的動作，避免關閉到其它視窗元件<br><br>

main.hla
</p>
<pre class="brush:asm">
program main;
 
#include("w.hhf")
#include("args.hhf")
#include("memory.hhf")
#include("strings.hhf")
 
static
    hWin:        dword;
    hInstance:   dword;
    CommandLine: string;
    defWndProc:  dword;
 
readonly
    szCaption: string:= "main";

procedure WndProc(hWnd:dword; uMsg:uns32; wParam:dword; lParam:dword); @stdcall;
begin WndProc;
    if (uMsg = w.WM_CLOSE) then
        w.DestroyWindow(hWnd);
        xor(eax, eax);
        exit WndProc;
    elseif (uMsg = w.WM_DESTROY) then
        w.PostQuitMessage(0);
        xor(eax, eax);
        exit WndProc;
    endif;

    w.CallWindowProc(defWndProc, hWnd, uMsg, wParam, lParam);
end WndProc;

procedure WinMain(hInst:dword; hPrevInst:dword; CmdLine:string; CmdShow:dword);
var
    msg: w.MSG;
 
begin WinMain;
    w.CreateWindowEx(w.WS_EX_LEFT, w.WC_DIALOG, szCaption,
        w.WS_OVERLAPPEDWINDOW | w.WS_VISIBLE, 0, 0, 300, 300, 0, 0, NULL, NULL);
    mov(eax, hWin);

    w.SetWindowLong(hWin, w.GWL_WNDPROC, &amp;WndProc);
    mov(eax, defWndProc);
     
    forever
        w.GetMessage(msg, NULL, 0, 0);
        breakif(!eax);
 
        w.DispatchMessage(msg);
    endfor;
    mov(msg.wParam, eax);
end WinMain;
 
begin main;
    w.GetModuleHandle(NULL);
    mov(eax, hInstance);
    mov(arg.cmdLn(), CommandLine);

    WinMain(hInstance, NULL, CommandLine, w.SW_SHOWNORMAL);

    w.ExitProcess(eax);
end main;
</pre>
<p>
<b>Line 17</b>：Pascal預設的Calling Convention並不是stdcall，因此，如果不使用@stdcall關鍵字，參數記得反相擺放<br>
<b>Line 19~27</b>：關閉視窗的順序為：主視窗收到WM_CLOSE事件時，呼叫DestroyWindow()，DestroyWindow()會自動將子視窗的相關資源也一併釋放掉(包含Resource描述的資源)，系統接著會發送WM_DESTROY事件給主視窗，待主視窗收到WM_DESTROY事件時，呼叫PostQuitMessage()結束視窗，值得注意的地方是，SendMessage()是屬於Block方式呼叫(必須等待動作執行完畢才返回)，而PostQuitMessage()則是Non-block方式呼叫<br>
<b>Line 22</b>：在離開副程式時，Pacal語法是使用exit而非Assembly的ret()，如果使用ret()離開，記得要手動釋放Stack資源<br>
<b>Line 29</b>：將處理控制權移交給下一個視窗元件</br><br>

Makefile
</p>
<pre>
export WINEPREFIX=/home/user/.wine_amd64

TARGET=main
MYWINE=box86 wine

all:
    ${MYWINE} hlaparse.exe -WIN32 -level=high -v -test ${TARGET}.hla
    ${MYWINE} polink.exe @${TARGET}.link hlalib.lib ${TARGET}.obj /OUT:${TARGET}.exe

run:
    ${MYWINE} ${TARGET}.exe

clean:
    rm -rf ${TARGET}.exe ${TARGET}.obj ${TARGET}.link
</pre><br>

<p>
編譯、執行
</p>
<pre>
$ make
$ make run
</pre>
<p>
<img style="border:0px" src="win32_dlg_window/1.jpg" class="maxSize">
</p>

<p>
<br><a href="../../program.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
