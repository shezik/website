<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../program.htm">程式語言</a> - Netwide Assembler (NASM) - Win32 API (NASMX) - Single Document Interface (SDI) - <b>Create Window</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://masm32.com/board/index.php<br>
https://www.nasm.us/xdoc/2.13rc9/html/nasmdoc0.html<br><br>

Windows的視窗可以分成：<b>Dialog</b>、Single Document Interface(<b>SDI</b>)、Multiple Document Interface(<b>MDI</b>)三種類別，相對於SDI、MDI，Dialog類別是比較容易上手學習的一個類別，相當適合初次學習Windows視窗設計的使用者，而Windows視窗程式設計的核心就是圍繞着事件處理(處理Message)，任何的視窗設定或者溝通都是以事件導向為原則，因此，寫出一個簡單的視窗框架，將有助於了解Windows視窗程式的運作<br><br>

main.asm
</p>
<pre class="brush:asm">
    %include "c:\\nasmx\\inc\\nasmx.inc"
    %include "c:\\nasmx\\inc\\win32\\windows.inc"
    %include "c:\\nasmx\\inc\\win32\\user32.inc"
    %include "c:\\nasmx\\inc\\win32\\kernel32.inc"
 
    entry start
    extern _DefWindowProcA@16
    %define DefWindowProc _DefWindowProcA@16
 
    section .data
szName       declare(NASMX_TCHAR) NASMX_TEXT("main"),0
CommandLine  dd 0
hInstance    dd 0
 
NASMX_ISTRUC msg, MSG
NASMX_IENDSTRUC

NASMX_ISTRUC wndClass, WNDCLASS
NASMX_IENDSTRUC
 
    section .text
proc WinMain, dword hInst, dword hPrevInst, dword CmdLine, dword CmdShow
    locals none

    mov eax, dword [DefWindowProc]
    mov dword [wndClass + WNDCLASS.lpfnWndProc], eax
    mov dword [wndClass + WNDCLASS.lpszClassName], szName
    invoke RegisterClass, wndClass

    invoke CreateWindowEx, WS_EX_LEFT, szName, szName, \
        WS_OVERLAPPEDWINDOW | WS_VISIBLE, 0, 0, 300, 300, NULL, NULL, NULL, NULL
 
    do 
        invoke DispatchMessage, msg
        invoke GetMessage, msg, NULL, NULL, NULL
    while eax, !=, 0
 
    mov eax, dword [msg + MSG.wParam]
endproc
 
proc start, dword argc, dword argv
    locals none
 
    invoke GetModuleHandle, NULL
    mov [hInstance], eax
 
    invoke GetCommandLine, NULL
    mov [CommandLine], eax
 
    invoke WinMain, [hInstance], NULL, [CommandLine], SW_SHOWNORMAL
    invoke ExitProcess, NULL
endproc
</pre>
<p>
<b>Line 15~19</b>：NASMX_STRUC用來定義Struct，而NASMX_ISTRUC則是宣告資料(Instance)的意思，NASMX_AT用來指定初始化的資料內容，如果沒有想要做資料初始化，可以省略NASMX_AT<br>
<b>Line 25~28</b>：一般SDI視窗會註冊屬於自己的Class並且設定事件處理副程式，目前司徒著重在說明如何建立Windows視窗，因此，我們使用系統預設的事件處理副程式(DefWindowProc)，視窗訊息統一交給系統幫忙處理，由於是自定義的Class，因此，需要幫這個Class設定一個名字，之後就可以用這個Class名字來建立Windows視窗<br>
<b>Line 30~31</b>：使用剛剛註冊的Class來建立Windows視窗，WS_OVERLAPPEDWINDOW代表視窗有標題、最大化、最小化的按鈕，WS_VISIBLE是建立一個可視化的視窗<br>
<b>Line 34</b>：分發Message到處理視窗事件的副程式，由於目前註冊的處理副程式是使用系統預設(DefWindowProc)，因此，無法處理這個SDI視窗的Message，包含關閉視窗的Message，所以必須使用kill命令強制關閉該視窗<br>
<b>Line 35</b>：從Queue提取Message(包含視窗、系統事件)<br>
<b>Line 44~48</b>：一般習慣是在程式進入時，保存Instance、CommandLine的內容<br>
<b>Line 50</b>：呼叫自定義的WinMain()，模擬C語言的WinMain()，當然也可以把內容都寫在start()裡面<br><br>

完成<br>
<img style="border:0px" src="nasm_win32_sdi_window/1.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
