<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../program.htm">程式語言</a> - Rust - <b>PI - Monte Carlo</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://www.rust-lang.org/learn/get-started<br>
http://bzz.wallizard.com:8081/share/books/RUST/Programming%20Rust%202nd%20Edition.pdf<br>
https://www.soroushjp.com/2015/02/07/go-concurrency-is-not-parallelism-real-world-lessons-with-monte-carlo-simulations/<br><br>

產生樣板
</p>
<pre>
$ cargo new hello
$ cd hello
</pre><br>

<p>
Cargo.toml
</p>
<pre>
[package]
name = "hello"
version = "0.1.0"
edition = "2021"

[dependencies]
rand = "0.8"
</pre><br>

<p>
src/main.rs
</p>
<pre class="brush:rust">
use rand::Rng;

fn _pi(samples : u32) -&gt; f64 {
    let mut inside : u32 = 0;
    let mut rng = rand::thread_rng();

    for _ in 0..samples {
        let x : f64 = (rng.gen::&lt;u32&gt;() as f64) / f64::from(u32::MAX);
        let y : f64 = (rng.gen::&lt;u32&gt;() as f64) / f64::from(u32::MAX);

        if ((x * x) + (y * y)) &lt; 1.0 {
            inside = inside + 1;
        }
    }

    if inside &gt; 0 {
        return (f64::from(inside) / f64::from(samples)) * 4.0;
    }
    return 0.0;
}

fn main() {
    for i in 2..=8 {
        let s = u32::pow(10, i);
        println!("Our value of Pi after {} runs: {}", s, _pi(s));
    }
}
</pre><br>

<p>
執行
</p>
<pre>
$ cargo run
    Our value of Pi after 100 runs: 3.12
    Our value of Pi after 1000 runs: 3.116
    Our value of Pi after 10000 runs: 3.1584
    Our value of Pi after 100000 runs: 3.1444
    Our value of Pi after 1000000 runs: 3.14116
    Our value of Pi after 10000000 runs: 3.1411176
    Our value of Pi after 100000000 runs: 3.14145844
</pre>

<br><script type="text/javascript" src="../tail.js"></script>
