<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>LeetCode &gt;&gt; C</h3>
<p><b>注意事項</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="https://leetcode.com/">leetcode</a><br><br>

注意事項：<br>
1. 盡量不要使用Global變數<br>
2. 需要配置的記憶體：回傳的指標(二維)、每個陣列的大小(一維)<br>
3. 結構存取最好透過變數<br><br>

Global變數問題如下：<br>
<img src="c_note/1.jpg" class="maxSize"><br><br>

寫完後：
</p>
<pre class="brush:cpp">
int idx = 0;
char *p = NULL;

void push(char ch)
{
    p[idx++] = ch;
}

void pop(void)
{
    if (idx &gt; 0) {
        idx-= 1;
        p[idx] = 0;
    }
}

char* removeStars(char *s)
{
    int c0 = 0;
    int len = strlen(s);

    p = malloc(len + 1);
    memset(p, 0, len + 1);
    for (c0 = 0; c0 &lt; len; c0++) {
        if (s[c0] != '*') {
            push(s[c0]);
        }
        else {
            pop();
        }
    }
    return p;
}
</pre><br>

<p>
Test cases
</p>
<pre>
"aa"
"bb"
</pre><br>

<p>
竟然得到非預期的Exception
</p>
<pre>
=================================================================
==31==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000096 at pc 0x55ca895660b8 bp 0x7ffdca7c0b40 sp 0x7ffdca7c0b30
WRITE of size 1 at 0x602000000096 thread T0
    #2 0x7f1f898d60b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)
0x602000000096 is located 3 bytes to the right of 3-byte region [0x602000000090,0x602000000093)
allocated by thread T0 here:
    #0 0x7f1f8a51bdc6 in calloc (/lib/x86_64-linux-gnu/libasan.so.5+0x10ddc6)
    #3 0x7f1f898d60b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)
Shadow bytes around the buggy address:
  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x0c047fff8000: fa fa 07 fa fa fa 07 fa fa fa 00 07 fa fa 03 fa
=&gt;0x0c047fff8010: fa fa[03]fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c047fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==31==ABORTING
</pre><br>

<p>
建議不要使用Global變數，改成如下即可：
</p>
<pre class="brush:cpp">
void push(char *p, int *idx, char ch)
{
    p[(*idx)++] = ch;
}

void pop(char *p, int *idx)
{
    if (*idx &gt; 0) {
        (*idx)-= 1;
        p[*idx] = 0;
    }
}

char* removeStars(char *s)
{
    int c0 = 0, idx = 0;
    int len = strlen(s);
    char *p = malloc(len + 1);

    memset(p, 0, len + 1);
    for (c0 = 0; c0 &lt; len; c0++) {
        if (s[c0] != '*') {
            push(p, &amp;idx, s[c0]);
        }
        else {
            pop(p, &amp;idx);
        }
    }
    return p;
}
</pre><br>

<p>
二維記憶體配置如下：
</p>
<pre class="brush:cpp">
int** flipAndInvertImage(int **image, int imageSize, int *imageColSize, int *returnSize, int **returnColumnSizes)
{
    int **p = malloc(sizeof(int*) * imageSize);

    // 回傳array大小
    *returnSize = imageSize;

    // 回傳每個array[]內的大小
    *returnColumnSizes = malloc(sizeof(int) * imageSize);
    for (c0 = 0; c0 &lt; imageSize; c0++) {
        (*returnColumnSizes)[c0] = imageColSize[c0];
    }

    // 配置要回傳的記憶體
    for (c0 = 0; c0 &lt; imageSize; c0++) {
        p[c0] = malloc(sizeof(int) * imageColSize[c0]);
    }
    return p;
}
</pre>
<p>
Line 3：直接填寫(不用配置)<br>
Line 9~12：需要配置一維記憶體<br>
Line 15~17：需要配置二維記憶體<br><br>

一個詭異的結構存取問題，下面例子只有將最左邊的數值累加，2 + 5 = 7，但是結果卻是5<br>
<img src="c_note/2.jpg" class="maxSize"><br><br>

解法是透過變數做累加，2 + 5 = 7<br>
<img src="c_note/3.jpg" class="maxSize">
</p>

<p>
<br><a href="../../program.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
