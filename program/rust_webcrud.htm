<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../program.htm">程式語言</a> - Rust - <b>Web Server(CRUD)</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://www.rust-lang.org/learn/get-started<br>
https://www.readfog.com/a/1674123278515539968<br>
http://bzz.wallizard.com:8081/share/books/RUST/Programming%20Rust%202nd%20Edition.pdf<br><br>

產生樣板
</p>
<pre>
$ cargo new hello
$ cd hello
</pre><br>

<p>
Cargo.toml
</p>
<pre>
[package]
name = "hello"
version = "0.1.0"
edition = "2021"

[dependencies]
axum = "0"
anyhow = "1.0"
futures = "0.3"
actix-web = "1.0.8"
serde = { version = "1.0", features = [ "derive" ] }
tokio = { version = "1.12.0", features = [ "full" ] }
sqlx = { version = "0.5.7", features = [ "runtime-tokio-rustls", "sqlite" ] }
</pre><br>

<p>
src/main.rs
</p>
<pre class="brush:rust">
use std::net::SocketAddr;
use sqlx::sqlite::SqlitePool;
use axum::extract::Extension;
use axum::{response::Html, routing::get, Router};

#[tokio::main]
async fn main() {
    let _pool = SqlitePool::connect("sqlite:test.db").await.expect("failed to connect sqlite");
    let app = Router::new()
        .route("/", get(get_index))
        .route("/create", axum::routing::post(post_create))
        .route("/read", axum::routing::post(post_read))
        .route("/update", axum::routing::post(post_update))
        .route("/delete", axum::routing::post(post_delete))
        .layer(Extension(_pool));

    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));
    axum::Server::bind(&amp;addr)
        .serve(app.into_make_service())
        .await
        .unwrap();
}

async fn get_index(Extension(_pool): Extension&lt;SqlitePool&gt;) -&gt; Html&lt;String&gt; {
    Html(format!("
        &lt;title&gt;CRUD Test&lt;/title&gt;
        &lt;form action = \"/create\" method = \"post\"&gt;&lt;button type = \"submit\"&gt;create&lt;/button&gt;&lt;/form&gt;
        &lt;form action = \"/read\"   method = \"post\"&gt;&lt;button type = \"submit\"&gt;read&lt;/button&gt;&lt;/form&gt;
        &lt;form action = \"/update\" method = \"post\"&gt;&lt;button type = \"submit\"&gt;update&lt;/button&gt;&lt;/form&gt;
        &lt;form action = \"/delete\" method = \"post\"&gt;&lt;button type = \"submit\"&gt;delete&lt;/button&gt;&lt;/form&gt;"))
}

async fn post_create(Extension(_pool): Extension&lt;SqlitePool&gt;) -&gt; Html&lt;String&gt; {
    let user : &amp;str = "test";
    let pass : &amp;str = "1234";
    let _r = sqlx::query!("create table if not exists account(name text primary key, password text not null)").fetch_all(&amp;_pool).await;
    let _r = sqlx::query!(r#"insert into account(name, password) values($1, $2)"#, user, pass).fetch_all(&amp;_pool).await;
    Html(format!("complete !").to_string())
}

async fn post_read(Extension(_pool): Extension&lt;SqlitePool&gt;) -&gt; Html&lt;String&gt; {
    let _r = sqlx::query!("select * from account").fetch_all(&amp;_pool).await;
    Html(format!("{:?}", _r).to_string())
}

async fn post_update(Extension(_pool): Extension&lt;SqlitePool&gt;) -&gt; Html&lt;String&gt; {
    let user : &amp;str = "test";
    let pass : &amp;str = "5678";
    let _r = sqlx::query!(r#"update account set password=$2 where name=$1"#, user, pass).fetch_all(&amp;_pool).await;
    Html(format!("complete !").to_string())
}

async fn post_delete(Extension(_pool): Extension&lt;SqlitePool&gt;) -&gt; Html&lt;String&gt; {
    let _r = sqlx::query!("drop table account").fetch_all(&amp;_pool).await;
    Html(format!("complete !").to_string())
}
</pre><br>

<p>
產生資料庫
</p>
<pre>
$ export DATABASE_URL="sqlite:test.db"
$ sqlx migrate add test
$ vim migrations/xxx_test.sql
    -- Add migration script here
    CREATE TABLE account (
         name TEXT PRIMARY KEY,
         password TEXT NOT NULL
    );

$ sqlx db create
$ sqlx migrate run
</pre><br>

<p>
執行
</p>
<pre>
$ cargo run
</pre><br>
<p>
開啟網頁並且輸入<b>http://127.0.0.1:3000</b><br>
<img src="rust_webcrud/1.jpg" class="maxSize"><br>
<img src="rust_webcrud/2.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
