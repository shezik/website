<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../driver.htm">驅動程式</a> - Windows Driver Model (WDM) - 使用範例 - Assembly (MASM32) - <b>Handle IOCTL IRP</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://wasm.in/<br>
http://four-f.narod.ru/<br>
https://github.com/steward-fu/ddk<br><br>

main.asm
</p>
<pre class="brush:asm">
.386p
.model flat, stdcall
option casemap:none
    
include c:\masm32\include\w2k\ntstatus.inc
include c:\masm32\include\w2k\ntddk.inc
include c:\masm32\include\w2k\ntoskrnl.inc
include c:\masm32\include\w2k\ntddkbd.inc
include c:\masm32\include\wxp\wdm.inc
include c:\masm32\Macros\Strings.mac

includelib c:\masm32\lib\wxp\i386\ntoskrnl.lib
     
public DriverEntry
    
MyDeviceExtension struct
    pNextDev PDEVICE_OBJECT ?
MyDeviceExtension ends
 
IOCTL_TEST equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_BUFFERED, FILE_ANY_ACCESS)

.const
MSG_INFO byte "IOCTL_TEST",0

.code
IrpOpenClose proc pMyDevice : PDEVICE_OBJECT, pIrp : PIRP
    IoGetCurrentIrpStackLocation pIrp
    movzx eax, (IO_STACK_LOCATION ptr [eax]).MajorFunction

    .if eax == IRP_MJ_CREATE
        invoke DbgPrint, $CTA0("IRP_MJ_CREATE")
    .elseif eax == IRP_MJ_CLOSE
        invoke DbgPrint, $CTA0("IRP_MJ_CLOSE")
    .endif
 
    mov eax, pIrp
    and (_IRP ptr [eax]).IoStatus.Information, 0
    mov (_IRP ptr [eax]).IoStatus.Status, STATUS_SUCCESS
    fastcall IofCompleteRequest, pIrp, IO_NO_INCREMENT
    mov eax, STATUS_SUCCESS
    ret
IrpOpenClose endp
 
IrpIOCTL proc pMyDevice : PDEVICE_OBJECT, pIrp : PIRP
    local dwLen : DWORD
    local pDevExt : ptr
 
    and dwLen, 0
    mov eax, pMyDevice
    push (DEVICE_OBJECT ptr [eax]).DeviceExtension
    pop pDevExt
 
    IoGetCurrentIrpStackLocation pIrp
    mov eax, (IO_STACK_LOCATION ptr [eax]).Parameters.DeviceIoControl.IoControlCode
    .if eax == IOCTL_TEST
        invoke DbgPrint, offset MSG_INFO
    .endif
 
    mov eax, pIrp
    mov (_IRP ptr [eax]).IoStatus.Status, STATUS_SUCCESS
    push dwLen
    pop (_IRP ptr [eax]).IoStatus.Information 
    fastcall IofCompleteRequest, pIrp, IO_NO_INCREMENT
    mov eax, STATUS_SUCCESS
    ret
IrpIOCTL endp
 
IrpPnP proc pMyDevice : PDEVICE_OBJECT, pIrp : PIRP
    local pDevExt : ptr
    local szSymName : UNICODE_STRING
 
    mov eax, pMyDevice
    push (DEVICE_OBJECT ptr [eax]).DeviceExtension
    pop pDevExt
        
    IoGetCurrentIrpStackLocation pIrp
    movzx eax, (IO_STACK_LOCATION ptr [eax]).MinorFunction
    .if eax == IRP_MN_START_DEVICE
        mov eax, pIrp
        mov (_IRP ptr [eax]).IoStatus.Status, STATUS_SUCCESS
    .elseif eax == IRP_MN_REMOVE_DEVICE
        invoke RtlInitUnicodeString, addr szSymName, $CTW0("\\DosDevices\\MyDriver")
        invoke IoDeleteSymbolicLink, addr szSymName         
        mov eax, pIrp
        mov (_IRP ptr [eax]).IoStatus.Status, STATUS_SUCCESS
 
        mov eax, pDevExt
        invoke IoDetachDevice, (MyDeviceExtension ptr [eax]).pNextDev
        invoke IoDeleteDevice, pMyDevice
        fastcall IofCompleteRequest, pIrp, IO_NO_INCREMENT
        ret
    .endif
    IoSkipCurrentIrpStackLocation pIrp
 
    mov eax, pDevExt
    invoke IoCallDriver, (MyDeviceExtension ptr [eax]).pNextDev, pIrp
    ret
IrpPnP endp
 
AddDevice proc pMyDriver : PDRIVER_OBJECT, pPhyDevice : PDEVICE_OBJECT
    local pMyDevice : PDEVICE_OBJECT
    local szDevName : UNICODE_STRING
    local szSymName : UNICODE_STRING
 
    invoke RtlInitUnicodeString, addr szDevName, $CTW0("\\Device\\MyDriver")
    invoke RtlInitUnicodeString, addr szSymName, $CTW0("\\DosDevices\\MyDriver")
    invoke IoCreateDevice, pMyDriver, sizeof MyDeviceExtension, addr szDevName, FILE_DEVICE_UNKNOWN, 0, FALSE, addr pMyDevice
    .if eax == STATUS_SUCCESS
        invoke IoAttachDeviceToDeviceStack, pMyDevice, pPhyDevice
        .if eax != NULL
            push eax
            mov eax, pMyDevice
            mov eax, (DEVICE_OBJECT ptr [eax]).DeviceExtension
            pop (MyDeviceExtension ptr [eax]).pNextDev
 
            mov eax, pMyDevice
            or (DEVICE_OBJECT ptr [eax]).Flags, DO_BUFFERED_IO
            and (DEVICE_OBJECT ptr [eax]).Flags, not DO_DEVICE_INITIALIZING
            invoke IoCreateSymbolicLink, addr szSymName, addr szDevName
        .endif
    .endif
    ret
AddDevice endp
 
Unload proc pMyDriver : PDRIVER_OBJECT
    ret
Unload endp
 
DriverEntry proc pMyDriver : PDRIVER_OBJECT, pMyRegistry : PUNICODE_STRING
    mov eax, pMyDriver
    mov (DRIVER_OBJECT ptr [eax]).MajorFunction[IRP_MJ_PNP            * (sizeof PVOID)], offset IrpPnP
    mov (DRIVER_OBJECT ptr [eax]).MajorFunction[IRP_MJ_CREATE         * (sizeof PVOID)], offset IrpOpenClose
    mov (DRIVER_OBJECT ptr [eax]).MajorFunction[IRP_MJ_CLOSE          * (sizeof PVOID)], offset IrpOpenClose
    mov (DRIVER_OBJECT ptr [eax]).MajorFunction[IRP_MJ_DEVICE_CONTROL * (sizeof PVOID)], offset IrpIOCTL
    mov (DRIVER_OBJECT ptr [eax]).DriverUnload, offset Unload
    mov eax, (DRIVER_OBJECT ptr [eax]).DriverExtension
    mov (DRIVER_EXTENSION ptr [eax]).AddDevice, AddDevice
    mov eax, STATUS_SUCCESS
    ret
DriverEntry endp
end
</pre><br>

<p>
app.asm</b>
</p>
<pre class="brush:asm">
.386p
.model flat, stdcall
option casemap:none
 
include c:\masm32\include\windows.inc
include c:\masm32\include\masm32.inc
include c:\masm32\include\user32.inc
include c:\masm32\include\msvcrt.inc
include c:\masm32\include\shell32.inc
include c:\masm32\include\kernel32.inc
include c:\masm32\include\w2k\ntddkbd.inc
include c:\masm32\Macros\Strings.mac

includelib c:\masm32\lib\user32.lib
includelib c:\masm32\lib\masm32.lib
includelib c:\masm32\lib\msvcrt.lib
includelib c:\masm32\lib\shell32.lib
includelib c:\masm32\lib\kernel32.lib

IOCTL_TEST      equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_BUFFERED,   FILE_ANY_ACCESS)
IOCTL_GET_BUF   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_BUFFERED,   FILE_ANY_ACCESS)
IOCTL_SET_BUF   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 801h, METHOD_BUFFERED,   FILE_ANY_ACCESS)
IOCTL_GET_DIR   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_OUT_DIRECT, FILE_ANY_ACCESS)
IOCTL_SET_DIR   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 801h, METHOD_IN_DIRECT,  FILE_ANY_ACCESS)
IOCTL_GET_NEI   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_NEITHER,    FILE_ANY_ACCESS)
IOCTL_SET_NEI   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 801h, METHOD_NEITHER,    FILE_ANY_ACCESS)

.const 
DEV_NAME    db "\\.\MyDriver",0
MSG_SEND    db "I am error",0
MSG_WR      db "SET: %s, %d",10,13,0
MSG_RD      db "GET: %s, %d",10,13,0
 
.data
dwCode0     dd IOCTL_TEST
dwCode1     dd IOCTL_TEST

.data?
hFile       dd ?
dwRet       dd ?
szBuffer    db 255 dup(?)
 
.code
start:
    invoke GetCommandLineW
    invoke CommandLineToArgvW, eax, offset dwRet
    
    .if dwRet &gt; 1
        invoke WideCharToMultiByte, CP_ACP, 0, dword ptr [eax + 4], -1, offset szBuffer, 255, 0, 0

        invoke lstrcmp, $CTA0("BUF"), offset szBuffer
        .if eax == 0
            mov dwCode0, IOCTL_SET_BUF
            mov dwCode1, IOCTL_GET_BUF
        .endif
        
        invoke lstrcmp, $CTA0("DIR"), offset szBuffer
        .if eax == 0
            mov dwCode0, IOCTL_SET_DIR
            mov dwCode1, IOCTL_GET_DIR
        .endif
        
        invoke lstrcmp, $CTA0("NEI"), offset szBuffer
        .if eax == 0
            mov dwCode0, IOCTL_SET_NEI
            mov dwCode1, IOCTL_GET_NEI
        .endif
    .endif

    invoke CreateFile, offset DEV_NAME, GENERIC_READ or GENERIC_WRITE, FILE_SHARE_READ, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0
    mov hFile, eax

    .if dwCode0 == IOCTL_TEST
        invoke DeviceIoControl, hFile, IOCTL_TEST, NULL, 0, NULL, 0, offset dwRet, NULL
    .else
        invoke StrLen, offset MSG_SEND
        mov dwRet, eax

        invoke crt_printf, offset MSG_WR, offset MSG_SEND, dwRet
        invoke DeviceIoControl, hFile, dwCode0, offset MSG_SEND, dwRet, NULL, 0, offset dwRet, NULL
    
        and dwRet, 0
        invoke crt_memset, offset szBuffer, 0, 255
        invoke DeviceIoControl, hFile, dwCode1, NULL, 0, offset szBuffer, 255, offset dwRet, NULL
        invoke crt_printf, offset MSG_RD, offset szBuffer, dwRet
    .endif

    invoke CloseHandle, hFile
    invoke ExitProcess, 0
end start
end
</pre><br>

<p>
完成<br>
<img src="wdm_asm_ioctl/1.jpg" class="maxSize"><br>
<img src="wdm_asm_ioctl/2.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
