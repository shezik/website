<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../driver.htm">驅動程式</a> - Windows Driver Model (WDM) - 使用範例 - C/C++ (DDK) - <b>Choose DO_NEITHER_IO for File IRP</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://wasm.in/<br>
http://four-f.narod.ru/<br>
https://github.com/steward-fu/ddk<br><br>

main.c
</p>
<pre class="brush:cpp">
#include &lt;wdm.h&gt;
    
#define DEV_NAME L"\\Device\\MyDriver"
#define SYM_NAME L"\\DosDevices\\MyDriver"
 
char szBuffer[255] = {0};
PDEVICE_OBJECT pNextDevice = NULL;
        
NTSTATUS AddDevice(PDRIVER_OBJECT pMyDriver, PDEVICE_OBJECT pPhyDevice)
{
    PDEVICE_OBJECT pMyDevice = NULL;
    UNICODE_STRING usDeviceName = { 0 };
    UNICODE_STRING usSymboName = { 0 };
 
    RtlInitUnicodeString(&amp;usDeviceName, DEV_NAME);
    IoCreateDevice(pMyDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pMyDevice);
    RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
    IoCreateSymbolicLink(&amp;usSymboName, &amp;usDeviceName);
    pNextDevice = IoAttachDeviceToDeviceStack(pMyDevice, pPhyDevice);
    pMyDevice-&gt;Flags &amp;= ~DO_DEVICE_INITIALIZING;
    return STATUS_SUCCESS;
}
    
void Unload(PDRIVER_OBJECT pMyDriver)
{
}
    
NTSTATUS IrpPnp(PDEVICE_OBJECT pMyDevice, PIRP pIrp)
{
    UNICODE_STRING usSymboName = { 0 };
    PIO_STACK_LOCATION pStack = IoGetCurrentIrpStackLocation(pIrp);
    
    if (pStack-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE) {
        RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
        IoDeleteSymbolicLink(&amp;usSymboName);
        IoDetachDevice(pNextDevice);
        IoDeleteDevice(pMyDevice);
        IoCompleteRequest(pIrp, IO_NO_INCREMENT);
        return STATUS_SUCCESS;
    }
    IoSkipCurrentIrpStackLocation(pIrp);
    return IoCallDriver(pNextDevice, pIrp);
}
    
NTSTATUS IrpFile(PDEVICE_OBJECT pMyDevice, PIRP pIrp)
{
    PUCHAR pBuf = NULL;
    PIO_STACK_LOCATION pStack = IoGetCurrentIrpStackLocation(pIrp);
    
    switch (pStack-&gt;MajorFunction) {
    case IRP_MJ_CREATE:
        memset(szBuffer, 0, sizeof(szBuffer));
        DbgPrint("IRP_MJ_CREATE");
        break;
    case IRP_MJ_READ:
        pBuf = pIrp-&gt;UserBuffer;
        strcpy(pBuf, szBuffer);
        DbgPrint("IRP_MJ_READ");

        pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
        pIrp-&gt;IoStatus.Information = strlen(szBuffer);
        break;
    case IRP_MJ_WRITE:
        pBuf = pIrp-&gt;UserBuffer;
        strcpy(szBuffer, pBuf);
        DbgPrint("IRP_MJ_WRITE");
        DbgPrint("Address: 0x%x, Length: %d", pBuf, pStack-&gt;Parameters.Write.Length);

        pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
        pIrp-&gt;IoStatus.Information = strlen(szBuffer);
        break;
    case IRP_MJ_CLOSE:
        DbgPrint("IRP_MJ_CLOSE");
        break;
    }
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
    return STATUS_SUCCESS;
}
    
NTSTATUS DriverEntry(PDRIVER_OBJECT pMyDriver, PUNICODE_STRING pOurRegistry)
{
    pMyDriver-&gt;MajorFunction[IRP_MJ_PNP]    = IrpPnp;
    pMyDriver-&gt;MajorFunction[IRP_MJ_CREATE] = IrpFile;
    pMyDriver-&gt;MajorFunction[IRP_MJ_READ]   = IrpFile;
    pMyDriver-&gt;MajorFunction[IRP_MJ_WRITE]  = IrpFile;
    pMyDriver-&gt;MajorFunction[IRP_MJ_CLOSE]  = IrpFile;
    pMyDriver-&gt;DriverExtension-&gt;AddDevice   = AddDevice;
    pMyDriver-&gt;DriverUnload = Unload;
    return STATUS_SUCCESS;
}
</pre><br>

<p>
完成<br>
<img src="wdm_asm_file_buffer/1.jpg" class="maxSize"><br>
<img src="wdm_asm_file_neither/1.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
