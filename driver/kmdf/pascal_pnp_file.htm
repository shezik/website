<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushPas.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Kernel Mode Driver Framework &gt;&gt; Pascal (PNP) &gt;&gt; File</h3>
<p><b>IRP</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="https://github.com/steward-fu/kmdf">Source Code</a><br><br>

基本上，驅動程式(韌體)的基本功能就是當作User Application(軟體)和硬體的溝通橋樑，軟體可以透過很多種方式和驅動程式溝通，而最常用的溝通方式就是把驅動程式當做是一個檔案在操作，軟體可以透過檔案讀寫的方式和驅動程式做資料傳遞的動作，驅動程式最後再把資料輸出到硬體裝置上，而在Windows系統上，可以使用CreateFile(檔案開啟)、ReadFile(讀取檔案)、WriteFile(寫入檔案)、CloseHandle(關閉檔案)等檔案操作的Win32 API，而驅動程式如何跟軟體串接起來呢？驅動程式必須設定這些對應的Event Callback，這樣I/O Manager才會知道如何串起這條溝通管道。<br><br>

當然，使用者可能也很好奇，為何軟體不直接跟硬體溝通就好，還要透過一個這麼複雜的驅動程式當作溝通橋樑？當軟體可以直接溝通硬體時，會造成太多衝突，以及優先順序問題，而因為可以直接控制硬體，因此，寫出一個非惡意但具有破壞性的軟體時，是間接可以把一個系統搞壞掉，這也是為何要在Win98之後，架構出一個驅動程式的原因，至少有一個溝通和協調的機制，當然隨著系統的發展，規定就會變成越來嚴格，這也是Microsoft致力於保護系統的最好方式！<br><br>

對應的溝通管道
</p>
<table>
<tr>
  <th>Win32 API</th>
  <th>Kernel Event</th>
</tr>
<tr>
  <td>CreateFile()</td>
  <td>EvtDeviceFileCreate</td>
</tr>
<tr>
  <td>ReadFile()</td>
  <td>EvtIoRead</td>
</tr>
<tr>
  <td>WriteFile()</td>
  <td>EvtIoWrite</td>
</tr>
<tr>
  <td>CloseHandle()</td>
  <td>EvtFileClose</td>
</tr>
</table><br>
<p>
驅動程式對應的CreateFile()和CloseHandle() Callback必須使用WDF_FILEOBJECT_CONFIG_INIT()設定，宣告如下：
</p>
<pre class="brush:pas">
void WDF_FILEOBJECT_CONFIG_INIT(
  PWDF_FILEOBJECT_CONFIG     FileEventCallbacks,
  PFN_WDF_DEVICE_FILE_CREATE EvtDeviceFileCreate,
  PFN_WDF_FILE_CLOSE         EvtFileClose,
  PFN_WDF_FILE_CLEANUP       EvtFileCleanup
);
</pre>
<p>
至於ReadFile()和WriteFile() Callback則位於WDF_IO_QUEUE_CONFIG(EvtIoRead和EvtIoWrite)<br><br>

<b>基本的步驟如下：</b><br>
1. 安裝驅動程式時，驅動程式註冊自己的名字、註冊檔案的Event Callback副程式<br>
2. 軟體開啟檔案(使用驅動程式的名字(GUID或者Symbolic))，I/O Manager呼叫驅動程式的EvtDeviceFileCreate<br>
3. 軟體讀寫檔案，I/O Manager呼叫驅動程式的EvtIoRead、EvtIoWrite<br>
4. 軟體關閉檔案，I/O Manager呼叫驅動程式的EvtFileClose<br><br>

main.pas
</p>
<pre class="brush:pas">
unit main;

interface
  uses
    DDDK;
    
  const
    DEV_NAME = '\Device\MyDriver';
    SYM_NAME = '\DosDevices\MyDriver';

  function __DriverEntry(pOurDriver:PDRIVER_OBJECT; pOurRegistry:PUNICODE_STRING):NTSTATUS; stdcall;

implementation

procedure IrpFileCreate(Device:WDFDEVICE; Request:WDFREQUEST; FileObject:WDFFILEOBJECT); stdcall;
begin
  DbgPrint('IrpFileCreate', []);
  WdfRequestComplete(Request, STATUS_SUCCESS);
end;

procedure IrpFileClose(FileObject:WDFFILEOBJECT); stdcall;
begin
  DbgPrint('IrpFileClose', []);
end;

procedure IrpRead(Queue:WDFQUEUE; Request:WDFREQUEST; Length:ULONG); stdcall;
begin
  DbgPrint('IrpRead', []);
  WdfRequestCompleteWithInformation(Request, STATUS_SUCCESS, Length);
end;

procedure IrpWrite(Queue:WDFQUEUE; Request:WDFREQUEST; Length:ULONG); stdcall;
begin
  DbgPrint('IrpWrite', []);
  WdfRequestCompleteWithInformation(Request, STATUS_SUCCESS, Length);
end;

function AddDevice(pOurDriver:WDFDRIVER; pDeviceInit:PWDFDEVICE_INIT):NTSTATUS; stdcall;
var
  device: WDFDEVICE;
  suDevName: UNICODE_STRING;
  szSymName: UNICODE_STRING;
  file_cfg: WDF_FILEOBJECT_CONFIG;
  ioqueue_cfg: WDF_IO_QUEUE_CONFIG;

begin
  WdfDeviceInitSetIoType(pDeviceInit, WdfDeviceIoBuffered);
  WDF_FILEOBJECT_CONFIG_INIT(@file_cfg, @IrpFileCreate, @IrpFileClose, Nil);
  WdfDeviceInitSetFileObjectConfig(pDeviceInit, @file_cfg, WDF_NO_OBJECT_ATTRIBUTES);
  
  RtlInitUnicodeString(@suDevName, DEV_NAME);
  RtlInitUnicodeString(@szSymName, SYM_NAME);
  WdfDeviceInitAssignName(pDeviceInit, @suDevName);
  WdfDeviceCreate(@pDeviceInit, WDF_NO_OBJECT_ATTRIBUTES, @device);
  WdfDeviceCreateSymbolicLink(device, @szSymName);
  
  WDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE(@ioqueue_cfg, WdfIoQueueDispatchSequential);
  ioqueue_cfg.EvtIoRead:= @IrpRead;
  ioqueue_cfg.EvtIoWrite:= @IrpWrite;
  Result:= WdfIoQueueCreate(device, @ioqueue_cfg, WDF_NO_OBJECT_ATTRIBUTES, WDF_NO_HANDLE);
end;

function __DriverEntry(pOurDriver:PDRIVER_OBJECT; pOurRegistry:PUNICODE_STRING):NTSTATUS; stdcall;
var
  config: WDF_DRIVER_CONFIG;
  
begin
  WDF_DRIVER_CONFIG_INIT(@config, AddDevice);
  WdfDriverCreate(pOurDriver, pOurRegistry, WDF_NO_OBJECT_ATTRIBUTES, @config, WDF_NO_HANDLE);
  Result:= STATUS_SUCCESS;
end;
end.
</pre>
<p>
<b>AddDevice()</b>設定檔案的Event Callback以及建立Symbolic Link<br>
<b>IrpFileCreate()</b>僅列印資訊，其餘不處理，值得注意的是Complete Irp呼叫的是WdfRequestComplete()<br>
<b>IrpFileClose()</b>僅列印資訊，其餘不處理，WDF簡化了FileClose的處理步驟<br>
<b>IrpRead()</b>僅列印資訊，其餘不處理，透過呼叫WdfRequestCompleteWithInformation()完成Irp操作並且回傳Information<br>
<b>IrpWrite()</b>僅列印資訊，其餘不處理，透過呼叫WdfRequestCompleteWithInformation()完成Irp操作並且回傳Information<br><br>

為了測試驅動程式的檔案讀寫IRP，我們需要一個User Application做測試(app.pas)</b>
</p>
<pre class="brush:pas">
program main;

{$APPTYPE CONSOLE}

uses
  Windows,
  Messages,
  SysUtils,
  Variants,
  Classes,
  Graphics,
  Controls,
  Forms,
  DIALOGS;

var
  fd: DWORD;
  ret: DWORD;
  len: DWORD;
  szBuf: array[0..255] of char;

begin
  fd:= CreateFile('\\.\MyDriver', GENERIC_READ or GENERIC_WRITE, FILE_SHARE_READ, Nil, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
  if (fd &lt;&gt; INVALID_HANDLE_VALUE) then
  begin
    StrCopy(szBuf, 'I am error');
    len:= strlen(szBuf)+1;
    WriteFile(fd, szBuf, len, ret, Nil);
    ReadFile(fd, szBuf, len, ret, Nil);
    CloseHandle(fd);
  end else
  begin
    WriteLn(Output, 'failed to open mydriver');
  end;
end.
</pre><br>

<p>
編譯App：<br>
</p>
<pre>
del /s /q app.exe
c:\dddk\bin\dcc32.exe -Uc:\dddk\inc /b /dReleaseCompilation app.pas
</pre><br>

<p>
接著執行該User Application就可以看到結果<br>
<img src="asm_pnp_file/2.jpg" class="maxSize"><br>
<img src="asm_pnp_file/1.jpg" class="maxSize">
</p>

<p>
<a href="../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
