<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Windows NT Driver &gt;&gt; C/C++</h3>
<p><b>StartIO</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="https://github.com/steward-fu/ntdriver">Source Code</a><br><br>

StartIO提供一個序列化的機制，讓使用者可以依照順序處理IRP，這個機制對於某些只能序列執行的硬體相當有幫助，省去用軟體實現序列化的程式碼，使用的步驟：<br>
1. IoMarkIrpPending()<br>
2. IoStartNextPacket()<br><br>

main.c
</p>
<pre class="brush:cpp">
#include &lt;wdm.h&gt;

#define DEV_NAME L"\\Device\\MyDriver"
#define SYM_NAME L"\\DosDevices\\MyDriver"

char szBuffer[255]={0};

VOID StartIo(struct _DEVICE_OBJECT *pOurDevice, struct _IRP *pIrp)
{
  ULONG dwLen=0;
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);
  switch(psk-&gt;MajorFunction){
  case IRP_MJ_READ:
    dwLen = strlen(szBuffer)+1;
    strcpy(pIrp-&gt;AssociatedIrp.SystemBuffer, szBuffer);
    DbgPrint("StartIo, IRP_MJ_READ");
    break;
  case IRP_MJ_WRITE:
    dwLen = psk-&gt;Parameters.Write.Length;
    strcpy(szBuffer, pIrp-&gt;AssociatedIrp.SystemBuffer);
    DbgPrint("StartIo, IRP_MJ_WRITE");
    DbgPrint("Buffer: %s, Length: %d", szBuffer, dwLen);
    break;
  }
  pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
  pIrp-&gt;IoStatus.Information = dwLen;
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  IoStartNextPacket(pOurDevice, FALSE);
}

void Unload(PDRIVER_OBJECT pOurDriver)
{
  UNICODE_STRING usSymboName;
              
  RtlInitUnicodeString(&amp;usSymboName, L"\\DosDevices\\MyDriver");
  IoDeleteSymbolicLink(&amp;usSymboName);
  IoDeleteDevice(pOurDriver-&gt;DeviceObject);
}

NTSTATUS IrpFile(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);

  switch(psk-&gt;MajorFunction){
  case IRP_MJ_CREATE:
    DbgPrint("IRP_MJ_CREATE");
    break;
  case IRP_MJ_WRITE:
    DbgPrint("IrpFile, IRP_MJ_WRITE");
    IoMarkIrpPending(pIrp);
    IoStartPacket(pOurDevice, pIrp, 0, NULL);
    return STATUS_PENDING;
  case IRP_MJ_READ:
    DbgPrint("IrpFile, IRP_MJ_READ");
    IoMarkIrpPending(pIrp);
    IoStartPacket(pOurDevice, pIrp, 0, NULL);
    return STATUS_PENDING;
  case IRP_MJ_CLOSE:
    DbgPrint("IRP_MJ_CLOSE");
    break;
  }
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  return STATUS_SUCCESS;
}

NTSTATUS DriverEntry(PDRIVER_OBJECT pOurDriver, PUNICODE_STRING pOurRegistry)
{
  PDEVICE_OBJECT pOurDevice=NULL;
  UNICODE_STRING usDeviceName;
  UNICODE_STRING usSymboName;
         
  pOurDriver-&gt;MajorFunction[IRP_MJ_CREATE] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_WRITE] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_READ] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpFile;
  pOurDriver-&gt;DriverStartIo = StartIo;
  pOurDriver-&gt;DriverUnload = Unload;
           
  RtlInitUnicodeString(&amp;usDeviceName, L"\\Device\\MyDriver");
  IoCreateDevice(pOurDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pOurDevice);
  RtlInitUnicodeString(&amp;usSymboName, L"\\DosDevices\\MyDriver");
  IoCreateSymbolicLink(&amp;usSymboName, &amp;usDeviceName);
  pOurDevice-&gt;Flags&amp;= ~DO_DEVICE_INITIALIZING;
  pOurDevice-&gt;Flags|= DO_BUFFERED_IO;
  return STATUS_SUCCESS;
}
</pre>
<p>
<b>IrpFile()</b>IRP_MJ_READ和IRP_MJ_WRITE使用StartIO方式處理<br><br>

app.c
</p>
<pre class="brush:cpp">
#define INITGUID
#include &lt;windows.h&gt;
#include &lt;winioctl.h&gt;
#include &lt;strsafe.h&gt;
#include &lt;setupapi.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int __cdecl main(int argc, char* argv[])
{
  DWORD len=0;
  DWORD dwRet=0;
  HANDLE hFile=NULL;
  char szBuffer[255]={0};
 
  hFile = CreateFile("\\\\.\\MyDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
  if (hFile == INVALID_HANDLE_VALUE) {
    printf("failed to open mydriver\n");
    return -1;
  }

  sprintf_s(szBuffer, sizeof(szBuffer), "I am error");
  len = strlen(szBuffer)+1;
  printf("WR: %s\n", szBuffer);
  printf("Length: %d\n", len);
  WriteFile(hFile, szBuffer, len, &amp;dwRet, NULL);

  memset(szBuffer, 0, sizeof(szBuffer));
  ReadFile(hFile, szBuffer, sizeof(szBuffer), &amp;dwRet, NULL);
  printf("RD: %s\n", szBuffer);
  printf("Length: %d\n", dwRet);
  CloseHandle(hFile);
  return 0;
}
</pre><br>

<p>
結果<br>
<img src="../wdm/asm_startio/1.jpg" class="maxSize"><br>
<img src="../wdm/asm_startio/2.jpg" class="maxSize">
</p>

<p>
<br><a href="../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
