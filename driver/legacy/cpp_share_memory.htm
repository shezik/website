<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Windows NT Driver &gt;&gt; C/C++</h3>
<p><b>Share Memory</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="https://github.com/steward-fu/ntdriver">Source Code</a><br>
2. <a href="https://www.osronline.com/article.cfm%5Earticle=39.htm">Sharing Memory Between Drivers and Applications</a><br><br>

Viking大師有天突然詢問司徒，為何在教學網站上面，沒有任何關於Share Memory的教學呢？這...，大師擺明就是來踢館的，不過，既然Viking大師都開口了，司徒小弟只能趕緊寫一篇關於Device Driver和User Application共享記憶體的使用教學，於是，誕生了這一篇教學。<br><br>

<b>需求如下：</b><br>
驅動程式在DriverEntry()時，配置一塊記憶體，接著，User Application可以讀寫這塊記憶體(Device Driver也可以讀寫)，User Application的數量不限定，所以，代表多個User Application都可以共享到這一塊記憶體，大家看到的內容都是一樣的。<br><br>

<b>步驟如下：</b><br>
1. MmAllocatePagesForMdl()<br>
2. MmMapLockedPagesSpecifyCache()<br>
3. MmUnmapLockedPages()<br>
4. MmFreePagesFromMdl()<br>
5. IoFreeMdl()<br><br>

這邊有一個東西，值得注意一下，Map Memory的地方，需要在該Process執行的空間上，所以，在DriverEntry()做Map Memory時，User Application是無法存取的，因為DriverEntry()是由系統調度，所以司徒使用兩個IOCTL做Map、Unmap，每個User Application啟動後，就會執行Map Memory的動作，而被Map的Memory則是在DriverEntry()做配置，這樣大家就可以Map到同一塊Memory，達到共享的目的。<br><br>

main.c
</p>
<pre class="brush:cpp">
#include &lt;wdm.h&gt;

#define IOCTL_MAP_PTR   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_UNMAP_PTR CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define DEV_NAME L"\\Device\\MyDriver"
#define SYM_NAME L"\\DosDevices\\MyDriver"

PMDL Mdl = NULL;

void Unload(PDRIVER_OBJECT pOurDriver)
{
    UNICODE_STRING usSymboName;

    RtlInitUnicodeString(&amp;usSymboName, L"\\DosDevices\\MyDriver");
    IoDeleteSymbolicLink(&amp;usSymboName);
    IoDeleteDevice(pOurDriver-&gt;DeviceObject);
    if(Mdl) {
        MmFreePagesFromMdl(Mdl);
        IoFreeMdl(Mdl);
    }
}

NTSTATUS IrpIOCTL(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
    ULONG Len = 0;
    ULONG dwTmp = 0;
    PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);

    switch(psk-&gt;Parameters.DeviceIoControl.IoControlCode) {
    case IOCTL_UNMAP_PTR:
        DbgPrint("IOCTL_UNMAP_PTR");
        Len = psk-&gt;Parameters.DeviceIoControl.InputBufferLength;
        memcpy(&amp;dwTmp, pIrp-&gt;AssociatedIrp.SystemBuffer, Len);
        if(dwTmp &amp;&amp; Mdl) {
            MmUnmapLockedPages(dwTmp, Mdl);
            DbgPrint("UnmapPtr=0x%x", dwTmp);
        }
        break;
    case IOCTL_MAP_PTR:
        DbgPrint("IOCTL_MAP_PTR");
        if(Mdl) {
            unsigned char *Ptr = NULL;

            dwTmp = Ptr = MmMapLockedPagesSpecifyCache(Mdl, UserMode, MmCached, NULL, FALSE, NormalPagePriority);
            DbgPrint("Mdl=0x%x, MapPtr=0x%x", Mdl, Ptr);
            Ptr[0] += 1;
        }
        Len = sizeof(PVOID);
        memcpy(pIrp-&gt;AssociatedIrp.SystemBuffer, &amp;dwTmp, Len);
        break;
    }
    pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
    pIrp-&gt;IoStatus.Information = Len;
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
    return STATUS_SUCCESS;
}

NTSTATUS IrpFile(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
    PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);

    switch(psk-&gt;MajorFunction) {
    case IRP_MJ_CREATE:
        DbgPrint("IRP_MJ_CREATE");
        break;
    case IRP_MJ_CLOSE:
        DbgPrint("IRP_MJ_CLOSE");
        break;
    }
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
    return STATUS_SUCCESS;
}

NTSTATUS DriverEntry(PDRIVER_OBJECT pOurDriver, PUNICODE_STRING pOurRegistry)
{
    SIZE_T TotalBytes;
    PHYSICAL_ADDRESS LowAddress;
    PHYSICAL_ADDRESS HighAddress;

    PDEVICE_OBJECT pOurDevice = NULL;
    UNICODE_STRING usDeviceName;
    UNICODE_STRING usSymboName;

    pOurDriver-&gt;MajorFunction[IRP_MJ_CREATE] = IrpFile;
    pOurDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpFile;
    pOurDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpIOCTL;
    pOurDriver-&gt;DriverUnload = Unload;

    RtlInitUnicodeString(&amp;usDeviceName, L"\\Device\\MyDriver");
    IoCreateDevice(pOurDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pOurDevice);
    RtlInitUnicodeString(&amp;usSymboName, L"\\DosDevices\\MyDriver");
    IoCreateSymbolicLink(&amp;usSymboName, &amp;usDeviceName);
    pOurDevice-&gt;Flags &amp;= ~DO_DEVICE_INITIALIZING;
    pOurDevice-&gt;Flags |= DO_BUFFERED_IO;

    LowAddress.QuadPart = 0;
    HighAddress.QuadPart = -1;
    TotalBytes = 4096;
    Mdl = MmAllocatePagesForMdl(LowAddress, HighAddress, LowAddress, TotalBytes);
    DbgPrint("Mdl=0x%x", Mdl);
    return STATUS_SUCCESS;
}
</pre><br>

<p>
app.cpp
</p>
<pre class="brush:cpp">
#define INITGUID
#include &lt;windows.h&gt;
#include &lt;winioctl.h&gt;
#include &lt;strsafe.h&gt;
#include &lt;setupapi.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define IOCTL_MAP_PTR   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_UNMAP_PTR CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)

int __cdecl main(int argc, char *argv[])
{
    DWORD dwRet = 0;
    HANDLE hFile = NULL;
    unsigned long dwTmp = 0;
    unsigned char *u8Ptr = NULL;

    hFile = CreateFile("\\\\.\\MyDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
    if(hFile == INVALID_HANDLE_VALUE) {
        printf("failed to open mydriver");
        return 1;
    }
    DeviceIoControl(hFile, IOCTL_MAP_PTR, NULL, 0, &amp;dwTmp, sizeof(dwTmp), &amp;dwRet, NULL);
    u8Ptr = (unsigned char *)dwTmp;
    printf("u8Ptr:0x%x, value:%d\n", u8Ptr, u8Ptr[0]);
    Sleep(10000);
    DeviceIoControl(hFile, IOCTL_UNMAP_PTR, &amp;dwTmp, sizeof(dwTmp), NULL, 0, &amp;dwRet, NULL);
    CloseHandle(hFile);
    return 0;
}
</pre><br>

<p>
開啟多個User Application後，可以發現Map後的Memory Address都是一樣的，但是，卻不會有問題(即使在不同時間點做Unmap)，這是因為在各自Process空間上的緣故<br>
<img src="cpp_share_memory/1.jpg" class="maxSize"><br>
<img src="cpp_share_memory/2.jpg" class="maxSize">
</p>

<p>
<br><a href="../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
