<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../driver.htm">驅動程式</a> - Windows Driver Model (WDM) - 使用範例 - C/C++ (DDK) - <b>Use Asynchronous Procedure Call(APC)</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://wasm.in/<br>
http://four-f.narod.ru/<br>
https://github.com/steward-fu/ddk<br><br>

main.c
</p>
<pre class="brush:cpp">
#include &lt;wdm.h&gt;
 
#define DEV_NAME L"\\Device\\MyDriver"
#define SYM_NAME L"\\DosDevices\\MyDriver"
 
KAPC stAPC = {0};
PDEVICE_OBJECT pNextDevice = NULL;
 
typedef enum _KAPC_ENVIRONMENT {
    OriginalApcEnvironment,
    AttachedApcEnvironment,
    CurrentApcEnvironment,
    InsertApcEnvironment
} KAPC_ENVIRONMENT;
 
NTSYSAPI BOOLEAN _stdcall KeInsertQueueApc(PRKAPC, PVOID, PVOID, KPRIORITY);
void KeInitializeApc(PKAPC, PETHREAD, KAPC_ENVIRONMENT, PKKERNEL_ROUTINE, PKRUNDOWN_ROUTINE, PKNORMAL_ROUTINE, KPROCESSOR_MODE, PVOID);
 
void APC_Handler(PRKAPC Apc, PKNORMAL_ROUTINE *NormalRoutine, PVOID *NormalContext, PVOID *SystemArgument1, PVOID *SystemArgument2)
{
    DbgPrint("APC_Handler\n");
}
 
NTSTATUS AddDevice(PDRIVER_OBJECT pMyDriver, PDEVICE_OBJECT pPhyDevice)
{
    PDEVICE_OBJECT pMyDevice = NULL;
    UNICODE_STRING usDeviceName = { 0 };
    UNICODE_STRING usSymbolName = { 0 };
 
    RtlInitUnicodeString(&amp;usDeviceName, DEV_NAME);
    IoCreateDevice(pMyDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pMyDevice);
    RtlInitUnicodeString(&amp;usSymbolName, SYM_NAME);
    IoCreateSymbolicLink(&amp;usSymbolName, &amp;usDeviceName);
    pNextDevice = IoAttachDeviceToDeviceStack(pMyDevice, pPhyDevice);
    pMyDevice-&gt;Flags &amp;= ~DO_DEVICE_INITIALIZING;
    pMyDevice-&gt;Flags |= DO_BUFFERED_IO;
     
    KeInitializeApc(&amp;stAPC, PsGetCurrentThread(), 0, APC_Handler, 0, NULL, KernelMode, NULL);
    return STATUS_SUCCESS;
}
 
void Unload(PDRIVER_OBJECT pMyDriver)
{
    pMyDriver = pMyDriver;
}
 
NTSTATUS IrpPnp(PDEVICE_OBJECT pMyDevice, PIRP pIrp)
{
    UNICODE_STRING usSymbolName = { 0 };
    PIO_STACK_LOCATION pStack = IoGetCurrentIrpStackLocation(pIrp);
 
    if (pStack-&gt;MinorFunction == IRP_MN_START_DEVICE) {
        KeInsertQueueApc (&amp;stAPC, NULL, NULL, 0);
    }
    else if (pStack-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE) {
        RtlInitUnicodeString(&amp;usSymbolName, SYM_NAME);
        IoDeleteSymbolicLink(&amp;usSymbolName);
        IoDetachDevice(pNextDevice);
        IoDeleteDevice(pMyDevice);
        IoCompleteRequest(pIrp, IO_NO_INCREMENT);
        return STATUS_SUCCESS;
    }
    IoSkipCurrentIrpStackLocation(pIrp);
    return IoCallDriver(pNextDevice, pIrp);
}
 
NTSTATUS DriverEntry(PDRIVER_OBJECT pMyDriver, PUNICODE_STRING pMyRegistry)
{
    pMyDriver-&gt;MajorFunction[IRP_MJ_PNP] = IrpPnp;
    pMyDriver-&gt;DriverExtension-&gt;AddDevice = AddDevice;
    pMyDriver-&gt;DriverUnload = Unload;
    return STATUS_SUCCESS;
}
</pre>
<p>
在收到IRP_MN_START_DEVICE時，插入一個新的APC Task，用來處理資源的移除<br><br>

完成<br>
<img src="wdm_asm_apc/1.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
