<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../driver.htm">驅動程式</a> - Windows Driver Model (WDM) - 使用範例 - C/C++ (DDK) - <b>Use Cancel-Safe IRP Queue(CSQ)</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://wasm.in/<br>
http://four-f.narod.ru/<br>
https://github.com/steward-fu/ddk<br><br>

main.c
</p>
<pre class="brush:cpp">
#include &lt;wdm.h&gt;
 
#define IOCTL_QUEUE     CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PROCESS   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)
 
#define DEV_NAME    L"\\Device\\MyDriver"
#define SYM_NAME    L"\\DosDevices\\MyDriver"
 
KDPC stDPC = {0};
IO_CSQ stCsq = {0};
KTIMER stTime = {0};
KSPIN_LOCK stLock = {0};
LIST_ENTRY stQueue = {0};
PDEVICE_OBJECT pNextDevice = NULL;
 
VOID CsqInsertIrp(struct _IO_CSQ *pCsq, PIRP pIrp)
{
    DbgPrint("CsqInsertIrp");
    InsertTailList(&amp;stQueue, &amp;pIrp-&gt;Tail.Overlay.ListEntry);
}
 
VOID CsqRemoveIrp(PIO_CSQ pCsq, PIRP pIrp)
{
    UNREFERENCED_PARAMETER(pCsq);
    DbgPrint("CsqRemoveIrp");
    RemoveEntryList(&amp;pIrp-&gt;Tail.Overlay.ListEntry);
}
 
VOID CsqCompleteCanceledIrp(PIO_CSQ pCsq, PIRP pIrp)
{
    UNREFERENCED_PARAMETER(pCsq);
    DbgPrint("CsqCompleteCanceledIrp");
    pIrp-&gt;IoStatus.Status = STATUS_CANCELLED;
    pIrp-&gt;IoStatus.Information = 0;
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
}
 
PIRP CsqPeekNextIrp(PIO_CSQ pCsq, PIRP pIrp, PVOID PeekContext)
{
    PIRP pNextIrp = NULL;
    PLIST_ENTRY pList = NULL;
    PLIST_ENTRY pNext = NULL;
    PIO_STACK_LOCATION pStack = NULL;
     
    pList = &amp;stQueue;
    if (pIrp == NULL) {
        pNext = pList-&gt;Flink;
    }
    else {
        pNext = pIrp-&gt;Tail.Overlay.ListEntry.Flink;
    }
 
    while (pNext != pList) {
        pNextIrp = CONTAINING_RECORD(pNext, IRP, Tail.Overlay.ListEntry);
        pStack = IoGetCurrentIrpStackLocation(pNextIrp);
        if (PeekContext) {
            if (pStack-&gt;FileObject == (PFILE_OBJECT)PeekContext) {
                break;
            }
        }
        else {
            break;
        }
        pNextIrp = NULL;
        pNext = pNext-&gt;Flink;
    }
    return pNextIrp;
}
 
VOID CsqAcquireLock(PIO_CSQ pCsq, KIRQL *pIrql)
{
    DbgPrint("CsqAcquireLock");
    KeAcquireSpinLock(&amp;stLock, pIrql);
}
 
VOID CsqReleaseLock(PIO_CSQ pCsq, KIRQL pIrql)
{
    if (pIrql == DISPATCH_LEVEL) {
        KeReleaseSpinLockFromDpcLevel(&amp;stLock);
        DbgPrint("CsqReleaseLock at DPC level");
    }
    else {
        KeReleaseSpinLock(&amp;stLock, pIrql);
        DbgPrint("CsqReleaseLock at Passive level");
    }
}
 
VOID OnTimer(struct _KDPC *Dpc, PVOID pContext, PVOID pArg1, PVOID pArg2)
{
    PIRP pIrp = NULL;
    PLIST_ENTRY plist = NULL;
    
    if (IsListEmpty(&amp;stQueue) == TRUE) {
        KeCancelTimer(&amp;stTime);
        DbgPrint("Finish");
    }
    else {
        plist = RemoveHeadList(&amp;stQueue);
        pIrp = CONTAINING_RECORD(plist, IRP, Tail.Overlay.ListEntry);
        if (pIrp-&gt;Cancel != TRUE) {
            pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
            pIrp-&gt;IoStatus.Information = 0;
            IoCompleteRequest(pIrp, IO_NO_INCREMENT);
            DbgPrint("Complete Irp");
        }
        else {
            pIrp-&gt;CancelRoutine = NULL;
            pIrp-&gt;IoStatus.Status = STATUS_CANCELLED;
            pIrp-&gt;IoStatus.Information = 0;
            IoCompleteRequest(pIrp, IO_NO_INCREMENT);
            DbgPrint("Cancel Irp");
        }
    }
}
 
NTSTATUS AddDevice(PDRIVER_OBJECT pMyDriver, PDEVICE_OBJECT pPhyDevice)
{
    PDEVICE_OBJECT pMyDevice = NULL;
    UNICODE_STRING usDeviceName = { 0 };
    UNICODE_STRING usSymbolName = { 0 };
 
    RtlInitUnicodeString(&amp;usDeviceName, DEV_NAME);
    IoCreateDevice(pMyDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pMyDevice);
    RtlInitUnicodeString(&amp;usSymbolName, SYM_NAME);
    IoCreateSymbolicLink(&amp;usSymbolName, &amp;usDeviceName);
    pNextDevice = IoAttachDeviceToDeviceStack(pMyDevice, pPhyDevice);
    pMyDevice-&gt;Flags &amp;= ~DO_DEVICE_INITIALIZING;
    pMyDevice-&gt;Flags |= DO_BUFFERED_IO;
     
    InitializeListHead(&amp;stQueue);
    KeInitializeSpinLock(&amp;stLock);
    KeInitializeTimer(&amp;stTime);
    KeInitializeDpc(&amp;stDPC, OnTimer, pMyDevice);
    IoCsqInitialize(&amp;stCsq, CsqInsertIrp, CsqRemoveIrp, CsqPeekNextIrp, CsqAcquireLock, CsqReleaseLock, CsqCompleteCanceledIrp);
    return STATUS_SUCCESS;
}
 
void Unload(PDRIVER_OBJECT pMyDriver)
{
    pMyDriver = pMyDriver;
}
 
NTSTATUS IrpPnp(PDEVICE_OBJECT pMyDevice, PIRP pIrp)
{
    UNICODE_STRING usSymbolName = { 0 };
    PIO_STACK_LOCATION pStack = IoGetCurrentIrpStackLocation(pIrp);
 
    if (pStack-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE) {
        RtlInitUnicodeString(&amp;usSymbolName, SYM_NAME);
        IoDeleteSymbolicLink(&amp;usSymbolName);
        IoDetachDevice(pNextDevice);
        IoDeleteDevice(pMyDevice);
        IoCompleteRequest(pIrp, IO_NO_INCREMENT);
        return STATUS_SUCCESS;
    }
    IoSkipCurrentIrpStackLocation(pIrp);
    return IoCallDriver(pNextDevice, pIrp);
}
 
NTSTATUS IrpIOCTL(PDEVICE_OBJECT pMyDevice, PIRP pIrp)
{
    LARGE_INTEGER stTimePeriod = { 0 };
    PIO_STACK_LOCATION pStack = IoGetCurrentIrpStackLocation(pIrp);
 
    switch (pStack-&gt;Parameters.DeviceIoControl.IoControlCode) {
    case IOCTL_QUEUE:
        DbgPrint("IOCTL_QUEUE");
        IoCsqInsertIrp(&amp;stCsq, pIrp, NULL);
        return STATUS_PENDING;
    case IOCTL_PROCESS:
        DbgPrint("IOCTL_PROCESS");
        stTimePeriod.HighPart |= -1;
        stTimePeriod.LowPart = -1000000;
        KeSetTimerEx(&amp;stTime, stTimePeriod, 1000, &amp;stDPC);
        break;
    }
    pIrp-&gt;IoStatus.Information = 0;
    pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
    return STATUS_SUCCESS;
}
 
NTSTATUS IrpFile(PDEVICE_OBJECT pMyDevice, PIRP pIrp)
{
    PIO_STACK_LOCATION pStack = IoGetCurrentIrpStackLocation(pIrp);
 
    switch (pStack-&gt;MajorFunction) {
    case IRP_MJ_CREATE:
        DbgPrint("IRP_MJ_CREATE");
        break;
    case IRP_MJ_CLOSE:
        DbgPrint("IRP_MJ_CLOSE");
        break;
    }
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
    return STATUS_SUCCESS;
}
 
NTSTATUS DriverEntry(PDRIVER_OBJECT pMyDriver, PUNICODE_STRING pMyRegistry)
{
    pMyDriver-&gt;MajorFunction[IRP_MJ_PNP]            = IrpPnp;
    pMyDriver-&gt;MajorFunction[IRP_MJ_CREATE]         = IrpFile;
    pMyDriver-&gt;MajorFunction[IRP_MJ_CLOSE]          = IrpFile;
    pMyDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpIOCTL;
    pMyDriver-&gt;DriverExtension-&gt;AddDevice = AddDevice;
    pMyDriver-&gt;DriverUnload = Unload;
    return STATUS_SUCCESS;
}
</pre><br>
<p>
app.c</b>
</p>
<pre class="brush:cpp">
#include &lt;windows.h&gt;
#include &lt;winioctl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
    
#define IOCTL_QUEUE     CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_PROCESS   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
int main(int argc, char **argv)
{
    int i = 0;
    DWORD dwRet = 0;
    HANDLE hFile = NULL;
    OVERLAPPED ov[3] = { 0 };
    
    hFile = CreateFile("\\\\.\\MyDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL, NULL);

    for (i = 0; i &lt; 3; i++) {
        memset(&amp;ov[i], 0, sizeof(ov[i]));
        ov[i].hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
        DeviceIoControl(hFile, IOCTL_QUEUE, NULL, 0, NULL, 0, &amp;dwRet, &amp;ov[i]);
        printf("Queued Event\n");
    }

    printf("Processing All Events\n");
    DeviceIoControl(hFile, IOCTL_PROCESS, NULL, 0, NULL, 0, &amp;dwRet, NULL);
    Sleep(1000);
    CancelIo(hFile);

    for (i = 0; i &lt; 3; i++) {
        WaitForSingleObject(ov[i].hEvent, INFINITE);
        CloseHandle(ov[i].hEvent);
        printf("Complete\n");
    }
    CloseHandle(hFile);
    return 0;
}
</pre><br>

<p>
完成<br>
<img src="wdm_asm_csq/1.jpg" class="maxSize"><br>
<img src="wdm_asm_csq/2.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
