<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../driver.htm">驅動程式</a> - Windows Driver Model (WDM) - 使用範例 - C/C++ (DDK) - <b>Handle IOCTL IRP</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://wasm.in/<br>
http://four-f.narod.ru/<br>
https://github.com/steward-fu/ddk<br><br>

main.c
</p>
<pre class="brush:cpp">
#include &lt;wdm.h&gt;
 
#define DEV_NAME L"\\Device\\MyDriver"
#define SYM_NAME L"\\DosDevices\\MyDriver"

#define IOCTL_TEST CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS) 
 
PDEVICE_OBJECT pNextDevice = NULL;
 
NTSTATUS AddDevice(PDRIVER_OBJECT pMyDriver, PDEVICE_OBJECT pPhyDevice)
{
    PDEVICE_OBJECT pMyDevice = NULL;
    UNICODE_STRING usSymbolName = { 0 };
    UNICODE_STRING usDeviceName = { 0 };
 
    RtlInitUnicodeString(&amp;usDeviceName, DEV_NAME);
    IoCreateDevice(pMyDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pMyDevice);
    RtlInitUnicodeString(&amp;usSymbolName, SYM_NAME);
    IoCreateSymbolicLink(&amp;usSymbolName, &amp;usDeviceName);
    pNextDevice = IoAttachDeviceToDeviceStack(pMyDevice, pPhyDevice);
    pMyDevice-&gt;Flags &amp;= ~DO_DEVICE_INITIALIZING;
    pMyDevice-&gt;Flags |= DO_BUFFERED_IO;
    return STATUS_SUCCESS;
}
     
void Unload(PDRIVER_OBJECT pMyDriver)
{
}
 
NTSTATUS IrpPnp(PDEVICE_OBJECT pMyDevice, PIRP pIrp)
{
    UNICODE_STRING usSymbolName = { 0 };
    PIO_STACK_LOCATION pStack = IoGetCurrentIrpStackLocation(pIrp);
 
    if (pStack-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE) {
        RtlInitUnicodeString(&amp;usSymbolName, SYM_NAME);
        IoDeleteSymbolicLink(&amp;usSymbolName);
        IoDetachDevice(pNextDevice);
        IoDeleteDevice(pMyDevice);
        IoCompleteRequest(pIrp, IO_NO_INCREMENT);
        return STATUS_SUCCESS;
    }
    IoSkipCurrentIrpStackLocation(pIrp);
    return IoCallDriver(pNextDevice, pIrp);
}
 
NTSTATUS IrpIOCTL(PDEVICE_OBJECT pMyDevice, PIRP pIrp)
{
    PIO_STACK_LOCATION pStack = IoGetCurrentIrpStackLocation(pIrp);
 
    switch (pStack-&gt;Parameters.DeviceIoControl.IoControlCode) {
    case IOCTL_TEST:
        DbgPrint("IOCTL_TEST");
        break;
    }
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
    return STATUS_SUCCESS;
}
 
NTSTATUS IrpFile(PDEVICE_OBJECT pMyDevice, PIRP pIrp)
{
    PIO_STACK_LOCATION pStack = IoGetCurrentIrpStackLocation(pIrp);
 
    switch (pStack-&gt;MajorFunction) {
    case IRP_MJ_CREATE:
        DbgPrint("IRP_MJ_CREATE");
        break;
    case IRP_MJ_CLOSE:
        DbgPrint("IRP_MJ_CLOSE");
        break;
    }
    IoCompleteRequest(pIrp, IO_NO_INCREMENT);
    return STATUS_SUCCESS;
}
     
NTSTATUS DriverEntry(PDRIVER_OBJECT pMyDriver, PUNICODE_STRING pMyRegistry)
{
    pMyDriver-&gt;MajorFunction[IRP_MJ_PNP]            = IrpPnp;
    pMyDriver-&gt;MajorFunction[IRP_MJ_CREATE]         = IrpFile;
    pMyDriver-&gt;MajorFunction[IRP_MJ_CLOSE]          = IrpFile;
    pMyDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpIOCTL;
    pMyDriver-&gt;DriverExtension-&gt;AddDevice = AddDevice;
    pMyDriver-&gt;DriverUnload = Unload;
    return STATUS_SUCCESS;
}
</pre><br>
<p>
app.c</b>
</p>
<pre class="brush:cpp">
#include &lt;windows.h&gt;
#include &lt;winioctl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
#define IOCTL_TEST      CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED,   FILE_ANY_ACCESS)
#define IOCTL_GET_BUF   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED,   FILE_ANY_ACCESS)
#define IOCTL_SET_BUF   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED,   FILE_ANY_ACCESS)
#define IOCTL_GET_DIR   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_OUT_DIRECT, FILE_ANY_ACCESS)
#define IOCTL_SET_DIR   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_IN_DIRECT,  FILE_ANY_ACCESS)
#define IOCTL_GET_NEI   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER,    FILE_ANY_ACCESS)
#define IOCTL_SET_NEI   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_NEITHER,    FILE_ANY_ACCESS)

int main(int argc, char **argv)
{
    DWORD dwRet = 0;
    HANDLE hFile = NULL;
    char szBuffer[255] = {"I am error"};
 
    hFile = CreateFile("\\\\.\\MyDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);

    if (argc &gt; 1) {
        dwRet = strlen(szBuffer);
        printf("SET: %s, %d\n", szBuffer, dwRet);
        if (!strcmp(argv[1], "BUF")) {
            DeviceIoControl(hFile, IOCTL_SET_BUF, szBuffer, dwRet, NULL, 0, &amp;dwRet, NULL);
            
            dwRet = 0;
            memset(szBuffer, 0, sizeof(szBuffer));
            DeviceIoControl(hFile, IOCTL_GET_BUF, NULL, 0, szBuffer, sizeof(szBuffer), &amp;dwRet, NULL);
        }
        else if (!strcmp(argv[1], "DIR")) {
            DeviceIoControl(hFile, IOCTL_SET_DIR, szBuffer, dwRet, NULL, 0, &amp;dwRet, NULL);
            
            dwRet = 0;
            memset(szBuffer, 0, sizeof(szBuffer));
            DeviceIoControl(hFile, IOCTL_GET_DIR, NULL, 0, szBuffer, sizeof(szBuffer), &amp;dwRet, NULL);
        }
        else if (!strcmp(argv[1], "NEI")) {
            DeviceIoControl(hFile, IOCTL_SET_NEI, szBuffer, dwRet, NULL, 0, &amp;dwRet, NULL);
            
            dwRet = 0;
            memset(szBuffer, 0, sizeof(szBuffer));
            DeviceIoControl(hFile, IOCTL_GET_NEI, NULL, 0, szBuffer, sizeof(szBuffer), &amp;dwRet, NULL);
        }
        printf("GET: %s, %d\n", szBuffer, dwRet);
    }
    else {
        DeviceIoControl(hFile, IOCTL_TEST, NULL, 0, NULL, 0, &amp;dwRet, NULL);    
    }
    CloseHandle(hFile);
    return 0;
}
</pre><br>

<p>
完成<br>
<img src="wdm_asm_ioctl/1.jpg" class="maxSize"><br>
<img src="wdm_asm_ioctl/2.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
