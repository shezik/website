<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushAsm.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Windows Driver Model &gt;&gt; Assembly</h3>
<p><b>Cancel IRP</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="http://four-f.narod.ru/">Four-F</a><br>
2. <a href="https://github.com/steward-fu/wdm">Source Code</a><br>
3. <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/canceling-irps">canceling-irps</a><br><br>

有處理Irp就會有Cancel Irp的時候，Cancel Irp本身就是一個很複雜的課題，司徒在這一篇教學不會做深入探討，有興趣的使用者可以參考上面的參考資訊，取而代之的，司徒只是點出，在處理Irp時，使用者要意識到該Irp可能已經被Cancel掉了，作法上，也是可以切割成很多時期，如：Irp處理前，Irp處裡中，Irp處裡後，因此，在設計驅動程式時，對於Cancel機制有必要嚴謹看待，因為，BSOD常常就是這樣發生了，不過司徒在此僅針對Irp處裡前，作簡單判斷，是否User Application已經Cancel這個Irp，如果沒有被Cancel，則Complete Irp，相反地，如果被Cancel，則Cancel Irp，Cancel作法如下：<br>
1. CancelRoutine(NULL)<br>
2. IoCompleteRequest(STATUS_CANCELLED)<br><br>

main.asm
</p>
<pre class="brush:asm">
.386p
.model flat, stdcall
option casemap:none
 
include c:\masm32\include\w2k\ntstatus.inc
include c:\masm32\include\w2k\ntddk.inc
include c:\masm32\include\w2k\ntoskrnl.inc
include c:\masm32\include\w2k\ntddkbd.inc
include c:\masm32\Macros\Strings.mac
includelib c:\masm32\lib\wxp\i386\ntoskrnl.lib

public DriverEntry

OurDeviceExtension struct
  pNextDev  PDEVICE_OBJECT ?
  stQueue   LIST_ENTRY &lt;&gt;
  stDPC     KDPC &lt;&gt;
  stTime    KTIMER &lt;&gt;
OurDeviceExtension ends

IOCTL_QUEUE   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_BUFFERED, FILE_ANY_ACCESS)
IOCTL_PROCESS equ CTL_CODE(FILE_DEVICE_UNKNOWN, 801h, METHOD_BUFFERED, FILE_ANY_ACCESS)

.const
DEV_NAME    word "\","D","e","v","i","c","e","\","M","y","D","r","i","v","e","r",0
SYM_NAME    word "\","D","o","s","D","e","v","i","c","e","s","\","M","y","D","r","i","v","e","r",0
MSG_QUEUE   byte "IOCTL_QUEUE",0
MSG_PROCESS byte "IOCTL_PROCESS",0

.code
OnTimer proc uses ebx pDpc:PKDPC, pContext:PVOID, pArg1:PVOID, PArg2:PVOID
  mov eax, pContext
  mov eax, (DEVICE_OBJECT PTR [eax]).DeviceExtension
  lea eax, (OurDeviceExtension PTR [eax]).stQueue
  IsListEmpty eax
  .if eax == TRUE
    mov eax, pContext
    mov eax, (DEVICE_OBJECT PTR [eax]).DeviceExtension
    invoke KeCancelTimer, addr (OurDeviceExtension PTR [eax]).stTime
    invoke DbgPrint, $CTA0("Finish")
  .else
    mov eax, pContext
    mov eax, (DEVICE_OBJECT PTR [eax]).DeviceExtension
    lea eax, (OurDeviceExtension PTR [eax]).stQueue
    RemoveHeadList eax
    
    ; CONTAINING_RECORD 
    sub eax, _IRP.Tail.Overlay.ListEntry
    mov bl, (_IRP PTR [eax]).Cancel
    .if bl != TRUE
      mov (_IRP PTR [eax]).IoStatus.Status, STATUS_SUCCESS
      push 0
      pop (_IRP PTR [eax]).IoStatus.Information
      fastcall IofCompleteRequest, eax, IO_NO_INCREMENT
      mov eax, STATUS_SUCCESS
      invoke DbgPrint, $CTA0("Complete Irp")
    .else
      mov (_IRP PTR [eax]).CancelRoutine, NULL
      mov (_IRP PTR [eax]).IoStatus.Status, STATUS_CANCELLED
      push 0
      pop (_IRP PTR [eax]).IoStatus.Information
      fastcall IofCompleteRequest, eax, IO_NO_INCREMENT
      invoke DbgPrint, $CTA0("Cancel Irp")
    .endif
  .endif
  ret
OnTimer endp

IrpOpenClose proc pDevObj:PDEVICE_OBJECT, pIrp:PIRP
  IoGetCurrentIrpStackLocation pIrp
  movzx eax, (IO_STACK_LOCATION PTR [eax]).MajorFunction
  .if eax == IRP_MJ_CREATE
    invoke DbgPrint, $CTA0("IRP_MJ_CREATE")
  .elseif eax == IRP_MJ_CLOSE
    invoke DbgPrint, $CTA0("IRP_MJ_CLOSE")
  .endif

  mov eax, pIrp
  and (_IRP PTR [eax]).IoStatus.Information, 0
  mov (_IRP PTR [eax]).IoStatus.Status, STATUS_SUCCESS
  fastcall IofCompleteRequest, pIrp, IO_NO_INCREMENT
  mov eax, STATUS_SUCCESS
  ret
IrpOpenClose endp

IrpIOCTL proc uses ebx ecx pOurDevice:PDEVICE_OBJECT, pIrp:PIRP
  local dwLen: DWORD
  local pdx:PTR Dev_Ext
  local stTimePeriod:LARGE_INTEGER

  and dwLen, 0
  mov eax, pOurDevice
  push (DEVICE_OBJECT PTR [eax]).DeviceExtension
  pop pdx

  IoGetCurrentIrpStackLocation pIrp
  mov eax, (IO_STACK_LOCATION PTR [eax]).Parameters.DeviceIoControl.IoControlCode
  .if eax == IOCTL_QUEUE
    invoke DbgPrint, offset MSG_QUEUE
    
    mov ebx, pdx
    lea ebx, (OurDeviceExtension PTR [ebx]).stQueue
    mov ecx, pIrp
    lea ecx, (_IRP PTR [ecx]).Tail.Overlay.ListEntry
    InsertHeadList ebx, ecx
    IoMarkIrpPending pIrp
    mov eax, STATUS_PENDING
    ret
  .elseif eax == IOCTL_PROCESS
    invoke DbgPrint, offset MSG_PROCESS
    or stTimePeriod.HighPart, -1
    mov stTimePeriod.LowPart, -10000000
    mov ebx, pdx
    invoke KeSetTimerEx, addr (OurDeviceExtension PTR [ebx]).stTime, stTimePeriod.LowPart, stTimePeriod.HighPart, 1000, addr (OurDeviceExtension PTR [ebx]).stDPC
  .endif

  mov eax, pIrp
  mov (_IRP PTR [eax]).IoStatus.Status, STATUS_SUCCESS
  push dwLen
  pop (_IRP PTR [eax]).IoStatus.Information 
  fastcall IofCompleteRequest, pIrp, IO_NO_INCREMENT
  mov eax, STATUS_SUCCESS
  ret
IrpIOCTL endp

IrpPnp proc pDevObj:PDEVICE_OBJECT, pIrp:PIRP
  local pdx:PTR OurDeviceExtension
  local szSymName:UNICODE_STRING

  mov eax, pDevObj
  push (DEVICE_OBJECT PTR [eax]).DeviceExtension
  pop pdx
   
  IoGetCurrentIrpStackLocation pIrp
  movzx eax, (IO_STACK_LOCATION PTR [eax]).MinorFunction
  .if eax == IRP_MN_START_DEVICE
    mov eax, pIrp
    mov (_IRP PTR [eax]).IoStatus.Status, STATUS_SUCCESS
  .elseif eax == IRP_MN_REMOVE_DEVICE
    invoke RtlInitUnicodeString, addr szSymName, offset SYM_NAME
    invoke IoDeleteSymbolicLink, addr szSymName     
    mov eax, pIrp
    mov (_IRP PTR [eax]).IoStatus.Status, STATUS_SUCCESS

    mov eax, pdx
    invoke IoDetachDevice, (OurDeviceExtension PTR [eax]).pNextDev
    invoke IoDeleteDevice, pDevObj
  .endif
  IoSkipCurrentIrpStackLocation pIrp

  mov eax, pdx
  invoke IoCallDriver, (OurDeviceExtension PTR [eax]).pNextDev, pIrp
  ret
IrpPnp endp

AddDevice proc pOurDriver:PDRIVER_OBJECT, pPhyDevice:PDEVICE_OBJECT
  local pOurDevice:PDEVICE_OBJECT
  local suDevName:UNICODE_STRING
  local szSymName:UNICODE_STRING

  invoke RtlInitUnicodeString, addr suDevName, offset DEV_NAME
  invoke RtlInitUnicodeString, addr szSymName, offset SYM_NAME
  invoke IoCreateDevice, pOurDriver, sizeof OurDeviceExtension, addr suDevName, FILE_DEVICE_UNKNOWN, 0, FALSE, addr pOurDevice
  .if eax == STATUS_SUCCESS
    invoke IoAttachDeviceToDeviceStack, pOurDevice, pPhyDevice
    .if eax != NULL
      push eax
      mov eax, pOurDevice
      mov eax, (DEVICE_OBJECT PTR [eax]).DeviceExtension
      pop (OurDeviceExtension PTR [eax]).pNextDev

      mov eax, pOurDevice
      or (DEVICE_OBJECT PTR [eax]).Flags, DO_BUFFERED_IO
      and (DEVICE_OBJECT PTR [eax]).Flags, not DO_DEVICE_INITIALIZING
      
      mov eax, pOurDevice
      mov eax, (DEVICE_OBJECT PTR [eax]).DeviceExtension
      lea eax, (OurDeviceExtension PTR [eax]).stQueue
      InitializeListHead eax

      mov eax, pOurDevice
      mov eax, (DEVICE_OBJECT PTR [eax]).DeviceExtension
      invoke KeInitializeTimer, addr (OurDeviceExtension ptr [eax]).stTime

      mov eax, pOurDevice
      mov eax, (DEVICE_OBJECT PTR [eax]).DeviceExtension
      invoke KeInitializeDpc, addr (OurDeviceExtension ptr [eax]).stDPC, offset OnTimer, pOurDevice
      invoke IoCreateSymbolicLink, addr szSymName, addr suDevName
    .endif      
  .endif
  ret
AddDevice endp

Unload proc pOurDriver:PDRIVER_OBJECT
  ret
Unload endp

DriverEntry proc pOurDriver:PDRIVER_OBJECT, pOurRegistry:PUNICODE_STRING
  mov eax, pOurDriver
  mov (DRIVER_OBJECT PTR [eax]).MajorFunction[IRP_MJ_PNP    * (sizeof PVOID)], offset IrpPnp
  mov (DRIVER_OBJECT PTR [eax]).MajorFunction[IRP_MJ_CREATE * (sizeof PVOID)], offset IrpOpenClose
  mov (DRIVER_OBJECT PTR [eax]).MajorFunction[IRP_MJ_CLOSE  * (sizeof PVOID)], offset IrpOpenClose
  mov (DRIVER_OBJECT PTR [eax]).MajorFunction[IRP_MJ_DEVICE_CONTROL * (sizeof PVOID)], offset IrpIOCTL
  mov (DRIVER_OBJECT PTR [eax]).DriverUnload, offset Unload
  mov eax, (DRIVER_OBJECT PTR [eax]).DriverExtension
  mov (DRIVER_EXTENSION PTR [eax]).AddDevice, AddDevice
  mov eax, STATUS_SUCCESS
  ret
DriverEntry endp
end DriverEntry
.end
</pre>
<p>
<b>AddDevice()</b>初始List以及DPC Timer，DPC Timer用來定期確認List是否還有資料需要處理，當然，使用Thread檢查或許更恰當些<br>
<b>IrpIOCTL()</b>IOCTL_QUEUE代表該IOCTL會被Queue起來，稍後處理，而當收到IOCTL_PROCESS時，則啟動DPC Timer開始處理那些被Queue起來的Irp<br>
<b>OnTimer()</b>處理Queue裡面的Irp，在處理前，先判斷該Irp是否已經被Cancel了<br><br>

app.asm
</p>
<pre class="brush:asm">
.386p
.model flat, stdcall
option casemap:none
 
include c:\masm32\include\windows.inc
include c:\masm32\include\masm32.inc
include c:\masm32\include\user32.inc
include c:\masm32\include\msvcrt.inc
include c:\masm32\include\kernel32.inc
include c:\masm32\include\w2k\ntddkbd.inc
include c:\masm32\Macros\Strings.mac
  
includelib c:\masm32\lib\user32.lib
includelib c:\masm32\lib\masm32.lib
includelib c:\masm32\lib\msvcrt.lib
includelib c:\masm32\lib\kernel32.lib
 
IOCTL_QUEUE   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_BUFFERED, FILE_ANY_ACCESS)
IOCTL_PROCESS equ CTL_CODE(FILE_DEVICE_UNKNOWN, 801h, METHOD_BUFFERED, FILE_ANY_ACCESS)
 
.const
DEV_NAME db "\\.\MyDriver",0
 
.data?
cnt   dd ?
hFile dd ?
dwRet dd ?
event dd 3 dup(?)
ov OVERLAPPED &lt;?&gt;

.code
start:
  invoke CreateFile, offset DEV_NAME, GENERIC_READ or GENERIC_WRITE, FILE_SHARE_READ, 0, OPEN_EXISTING, FILE_FLAG_OVERLAPPED or FILE_ATTRIBUTE_NORMAL, 0
  .if eax == INVALID_HANDLE_VALUE
    invoke crt_printf, $CTA0("failed to open mydriver\n")
    invoke ExitProcess, -1
  .endif
  mov hFile, eax
  invoke crt_memset, offset ov, 0, sizeof OVERLAPPED
  
  mov cnt, 3
  .while cnt &gt; 0
    invoke CreateEvent, NULL, TRUE, FALSE, NULL
    push eax
    pop ov.hEvent
    
    mov ecx, cnt
    mov edi, offset event
    mov [edi + ecx * 4], eax
    
    invoke crt_printf, $CTA0("queue event\n")
    invoke DeviceIoControl, hFile, IOCTL_QUEUE, NULL, 0, NULL, 0, offset dwRet, offset ov
    invoke CloseHandle, ov.hEvent
    sub cnt, 1
  .endw
  
  invoke crt_printf, $CTA0("process all of events\n")
  invoke DeviceIoControl, hFile, IOCTL_PROCESS, NULL, 0, NULL, 0, offset dwRet, NULL
  invoke Sleep, 1000
  invoke CancelIo, hFile
  
  mov cnt, 3
  .while cnt &gt; 0
    mov ecx, cnt
    mov edi, offset event
    mov eax, [edi + ecx * 4]
     
    push eax
    pop ov.hEvent
     
    invoke WaitForSingleObject, ov.hEvent, INFINITE
    invoke CloseHandle, ov.hEvent
    invoke crt_printf, $CTA0("wait complete\n")
    sub cnt, 1
  .endw
  
  invoke CloseHandle, hFile
  invoke ExitProcess, 0
end start
</pre><br>

<p>
結果<br>
<img src="asm_cancel_irp/1.jpg" class="maxSize"><br>
<img src="asm_cancel_irp/2.jpg" class="maxSize">
</p>

<p>
<br><a href="../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
