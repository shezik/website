<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Windows Driver Model &gt;&gt; C/C++</h3>
<p><b>Asynchronous Procedure Call(APC)</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="https://github.com/steward-fu/wdm">Source Code</a><br>
2. <a href="https://www.drdobbs.com/inside-nts-asynchronous-procedure-call/184416590">inside-nts-asynchronous-procedure-call</a><br><br>

此部份屬於Undocument範疇，可能因系統或者環境而異，Asynchronous Procedure Call(APC)介紹的相關資料甚少，一般都只知道是用於Windows系統上，用來做Context Switch的排程，優先級別屬於APC_LEVEL，介於PASSIVE_LEVEL和DISPATCH_LEVEL之間，因此，司徒將它當作是一般排程使用。<br><br>

main.c
</p>
<pre class="brush:cpp">
#include &lt;wdm.h&gt;

#define DEV_NAME L"\\Device\\MyDriver"
#define SYM_NAME L"\\DosDevices\\MyDriver"

KAPC stAPC={0};
PDEVICE_OBJECT pNextDevice=NULL;

typedef enum _KAPC_ENVIRONMENT {
  OriginalApcEnvironment,
  AttachedApcEnvironment,
  CurrentApcEnvironment,
  InsertApcEnvironment
} KAPC_ENVIRONMENT;

NTSYSAPI BOOLEAN _stdcall KeInsertQueueApc(PRKAPC, PVOID, PVOID, KPRIORITY);
void KeInitializeApc(PKAPC, PETHREAD, KAPC_ENVIRONMENT, PKKERNEL_ROUTINE, PKRUNDOWN_ROUTINE, PKNORMAL_ROUTINE, KPROCESSOR_MODE, PVOID);

void APC_Handler(PRKAPC Apc, PKNORMAL_ROUTINE *NormalRoutine, PVOID *NormalContext, PVOID *SystemArgument1, PVOID *SystemArgument2)
{
  DbgPrint("APC_Handler\n");
}

NTSTATUS AddDevice(PDRIVER_OBJECT pOurDriver, PDEVICE_OBJECT pPhyDevice)
{
  PDEVICE_OBJECT pOurDevice=NULL;
  UNICODE_STRING usDeviceName;
  UNICODE_STRING usSymboName;

  RtlInitUnicodeString(&amp;usDeviceName, DEV_NAME);
  IoCreateDevice(pOurDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pOurDevice);
  RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
  IoCreateSymbolicLink(&amp;usSymboName, &amp;usDeviceName);
  pNextDevice = IoAttachDeviceToDeviceStack(pOurDevice, pPhyDevice);
  pOurDevice-&gt;Flags&amp;= ~DO_DEVICE_INITIALIZING;
  pOurDevice-&gt;Flags|= DO_BUFFERED_IO;
  
  KeInitializeApc(&amp;stAPC, PsGetCurrentThread(), 0, APC_Handler, 0, NULL, KernelMode, NULL);
  return STATUS_SUCCESS;
}

void Unload(PDRIVER_OBJECT pOurDriver)
{
  pOurDriver = pOurDriver;
}

NTSTATUS IrpPnp(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);
  UNICODE_STRING usSymboName;

  if(psk-&gt;MinorFunction == IRP_MN_START_DEVICE){
    KeInsertQueueApc (&amp;stAPC, NULL, NULL, 0);
  }
  else if(psk-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE){
    RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
    IoDeleteSymbolicLink(&amp;usSymboName);
    IoDetachDevice(pNextDevice);
    IoDeleteDevice(pOurDevice);
  }
  IoSkipCurrentIrpStackLocation(pIrp);
  return IoCallDriver(pNextDevice, pIrp);
}

NTSTATUS DriverEntry(PDRIVER_OBJECT pOurDriver, PUNICODE_STRING pOurRegistry)
{
  pOurDriver-&gt;MajorFunction[IRP_MJ_PNP] = IrpPnp;
  pOurDriver-&gt;DriverExtension-&gt;AddDevice = AddDevice;
  pOurDriver-&gt;DriverUnload = Unload;
  return STATUS_SUCCESS;
}
</pre>
<p>
<b>IRP_MN_START_DEVICE</b>插入一個新的APC Task<br><br>

結果<br>
<img src="cpp_apc/1.jpg" class="maxSize">
</p>

<p>
<br><a href="../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
