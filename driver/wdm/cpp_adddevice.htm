<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Windows Driver Model &gt;&gt; C/C++</h3>
<p><b>AddDevice()</b></p>
<hr size="1">
<p>
當系統找到對應的裝置(透過INF檔案安裝)且驅動程式被系統載入後，AddDevice()就會被系統呼叫，而AddDevice()是在DriverEntry()裡面註冊的，所以系統才會知道AddDevice()位於何處，名稱不一定要用AddDevice，但是參數跟回傳值必須遵照Microsoft的定義，否則會有問題。<br><br>

AddDevice()副程式定義如下：</p>
<pre class="brush:cpp">
NTSTATUS AddDevice(PDRIVER_OBJECT, PDEVICE_OBJECT);
</pre><br>

<p>
傳入的PDRIVER_OBJECT是該驅動程式的Driver Object，而PDEVICE_OBJECT則是位於下層的驅動程式Device Object，WDM驅動程式的架構是使用堆疊方式做驅動程式的添加、刪除，例如：如果使用者寫的是USB驅動程式，則下層可能就是USB Bus驅動程式，如果使用者寫的驅動程式只是一個虛擬的純軟體驅動程式，那麼下層驅動程式就是I/O Manager，由於使用堆疊的架構，所以WDM驅動程式又可以加入Upper Filter、Lower Filter Driver，Filter Driver的目的是提供I/O Request Packet(IRP)修改的功能，達到不需更改原始的驅動程式就可以做錯誤修正或者新增功能。<br><br>

那在AddDevice()需要做什麼事情呢？一般會產生一個新的Device Object並為該Device Object建造一條Symbolic Link，該Symbolic Link就是提供給User Application開啟(僅能使用CreateFile() API開啟)，還記得呼叫CreateFile()時會提供一個名字嗎？若記得的話，此名字就是驅動程式的Symbolic Link名稱。<br><br>

那問題又來了，有沒有可能其它驅動程式也使用同一個Symbolic Link名字呢？答案是，肯定會發生的，所以Microsoft建議大家使用GUID的方式註冊，使用者可以使用工具產生新的GUID名稱，並使用該GUID註冊裝置，避免名稱衝突，那User Application又該如何開啟該驅動程式呢？這時候就必須使用Setup API做GUID列舉並取得Symbolic Link名稱，哪一種方式比較好呢？如果是使用Symbolic Link註冊名稱，User Application比較好寫，因為名稱已經知道了，反之，使用GUID註冊的話，User Application需要列舉判斷後才能開啟，所以會比較不好寫，但是優點則是名稱不會衝突。<br><br>

最後還要附加到下層驅動程式並且初始化相關旗標，這樣I/O Manager才可以開始處理相關IRP，為何要附加到下層驅動程式呢？這是因為Windows驅動程式本身就是堆疊架構(從DOS驅動程式開始)，因此，需要串接到這個架構中，傳遞資料的方式也是串接方式，因此，要取得下層驅動程式的IRP指標時，是透過指標加減運算而得，如：IoGetNextIrpStackLocation()就是透過減掉IO_STACK_LOCATION而拿到的指標位置，使用者大概知>道這個觀念就可以，細節在之後可以慢慢體會。<br><br>

範例：
</p>

<pre class="brush:cpp">
PDEVICE_OBJECT gNextDevice=NULL;

NTSTATUS AddDevice(PDRIVER_OBJECT pOurDriver, PDEVICE_OBJECT pPhyDevice)
{
  PDEVICE_OBJECT pOurDevice;
  UNICODE_STRING usDeviceName;
  UNICODE_STRING usSymboName;

  // Step 1
  RtlInitUnicodeString(&amp;usDeviceName, L"\\Device\\MyDriver");
  RtlInitUnicodeString(&amp;usSymboName, L"\\DosDevices\\MyDriver");
  IoCreateDevice(pDrvObj, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pOurDevice);
  IoCreateSymbolicLink(&amp;usSymboName, &amp;usDeviceName);

  // Step 2
  gNextDevice = IoAttachDeviceToDeviceStack(pOurDevice, pPhyDevice);

  // Step 3
  pOurDevice-&gt;Flags&amp;= ~DO_DEVICE_INITIALIZING;
  pOurDevice-&gt;Flags|= DO_BUFFERED_IO;
  return STATUS_SUCCESS;
}
</pre>
<p>
<b>Step 1：</b>產生一個Device Object(可自己決定名稱)，然後建立一條Symbolic Link(可自己決定名稱)，Device Object名稱一般是放在Windows特殊資料夾中的Device資料夾，使用者可以使用WinObj程式去查看有哪些Device Object，而Symbolic Link的名稱則是放在DosDevices資料夾(GLOBAL??)，那應用程式該如何把完整路徑名稱給CreateFile()呢？答案是加上<b>\.\\</b>關鍵字，有印象開啟COM Port時，需要使用這樣<b>CreateFile("\\.\\\\COM1", ...);</b>的方式嗎？這就是代表完整路徑的意思，在寫COM Port程式時，不一定說是要大於COM9才能加<b>\.\\</b>路徑，其實從COM1就可以開始使用，因為那是Global的名稱表示方式。<br>
<b>Step 2：</b>把剛剛產生的Device Object附加到下層Device Object的堆疊，這樣才可以開始處理I/O Request Packet(IRP)。<br>
<b>Step 3：</b>初始化相關旗標，比較需要注意的是DO_BUFFERED_IO旗標，因為在做裝置讀寫時，User Application跟驅動程式是否共用同一塊Buffer是取決於該旗標，如果使用者設定成DO_BUFFERED_IO，則代表驅動程式有自己獨立一塊Buffer，驅動程式讀取完硬體資料後，會複製到它自己的Buffer，然後再複製到User Application的Buffer，所以速度會比較慢一些，如果要共用同一塊Buffer的話，則把旗標設定成DO_DIRECT_IO即可。
</p>

<p>
<br><a href="../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
