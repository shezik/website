<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Windows Driver Model &gt;&gt; C/C++ &gt;&gt; File</h3>
<p><b>DO_DIRECT_IO(DMA)</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="https://github.com/steward-fu/wdm">Source Code</a><br><br>

由於我們練習的驅動程式位於上層，本身並沒有觸及過多DMA的細節操作，因此，DO_DIRECT_IO的DMA作法會跟PIO一樣，唯一的區別就是取得DMA位址的方式，必須使用特殊的API取得，這篇練習在於說明有這樣的記憶體差別，當使用者實際觸及DMA驅動程式時，必須詳細閱讀DMA的操作方式，而關於DO_DIRECT_IO(DMA)的流程，可以參考如下圖表說明(IRP_MJ_READ)：<br>
<img src="asm_file-direct-dma/1.jpg" class="maxSize"><br><br>

記憶體指標：
</p>
<table>
<tr>
  <th>IRP</th>
  <th>Buffer</th>
  <th>Length</th>
</tr>
<tr>
  <td>IRP_MJ_READ</td>
  <td>(MDL)<br>MmGetMdlVirtualAddress</td>
  <td>(MDL)<br>MmGetMdlByteCount</td>
</tr>
<tr>
  <td>IRP_MJ_WRITE</td>
  <td>(MDL)<br>MmGetMdlVirtualAddress</td>
  <td>(MDL)<br>MmGetMdlByteCount</td>
</tr>
</table><br>

<p>
main.c
</p>
<pre class="brush:cpp">
#include &lt;wdm.h&gt;

#define DEV_NAME L"\\Device\\MyDriver"
#define SYM_NAME L"\\DosDevices\\MyDriver"

char szBuffer[255]={0};
PDEVICE_OBJECT pNextDevice=NULL;

NTSTATUS AddDevice(PDRIVER_OBJECT pOurDriver, PDEVICE_OBJECT pPhyDevice)
{
  PDEVICE_OBJECT pOurDevice=NULL;
  UNICODE_STRING usDeviceName;
  UNICODE_STRING usSymboName;

  RtlInitUnicodeString(&amp;usDeviceName, DEV_NAME);
  IoCreateDevice(pOurDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pOurDevice);
  RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
  IoCreateSymbolicLink(&amp;usSymboName, &amp;usDeviceName);
  pNextDevice = IoAttachDeviceToDeviceStack(pOurDevice, pPhyDevice);
  pOurDevice-&gt;Flags&amp;= ~DO_DEVICE_INITIALIZING;
  pOurDevice-&gt;Flags|= DO_DIRECT_IO;
  return STATUS_SUCCESS;
}

void Unload(PDRIVER_OBJECT pOurDriver)
{
}

NTSTATUS IrpPnp(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);
  UNICODE_STRING usSymboName;

  if(psk-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE){
    RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
    IoDeleteSymbolicLink(&amp;usSymboName);
    IoDetachDevice(pNextDevice);
    IoDeleteDevice(pOurDevice);
  }
  IoSkipCurrentIrpStackLocation(pIrp);
  return IoCallDriver(pNextDevice, pIrp);
}

NTSTATUS IrpFile(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  PUCHAR pBuf;
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);

  switch(psk-&gt;MajorFunction){
  case IRP_MJ_CREATE:
    memset(szBuffer, 0, sizeof(szBuffer));
    DbgPrint("IRP_MJ_CREATE");
    break;
  case IRP_MJ_READ:
    pBuf = MmGetMdlVirtualAddress(pIrp-&gt;MdlAddress);
    strcpy(pBuf, szBuffer);
    DbgPrint("IRP_MJ_READ");
    pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
    pIrp-&gt;IoStatus.Information = strlen(szBuffer)+1;
    break;
  case IRP_MJ_WRITE:
    pBuf = MmGetMdlVirtualAddress(pIrp-&gt;MdlAddress);
    strcpy(szBuffer, pBuf);
    DbgPrint("IRP_MJ_WRITE");
    DbgPrint("Buffer: %s, Length: %d", szBuffer, MmGetMdlByteCount(pIrp-&gt;MdlAddress));
    pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
    pIrp-&gt;IoStatus.Information = strlen(szBuffer)+1;
    break;
  case IRP_MJ_CLOSE:
    DbgPrint("IRP_MJ_CLOSE");
    break;
  }
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  return STATUS_SUCCESS;
}

NTSTATUS DriverEntry(PDRIVER_OBJECT pOurDriver, PUNICODE_STRING pOurRegistry)
{
  pOurDriver-&gt;MajorFunction[IRP_MJ_PNP] = IrpPnp;
  pOurDriver-&gt;MajorFunction[IRP_MJ_CREATE] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_READ] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_WRITE] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpFile;
  pOurDriver-&gt;DriverExtension-&gt;AddDevice = AddDevice;
  pOurDriver-&gt;DriverUnload = Unload;
  return STATUS_SUCCESS;
}
</pre>
<p>
<b>IrpFile()</b>收到IRP_MJ_WRITE時，Driver複製User Buffer的內容到szBuffer，而收到IRP_MJ_READ時，將szBuffer內容又複製回User Buffer，完成暫存的功能，IoStatus.Information的數值就是ReadFile()或WriteFile()完成的長度。<br><br>

app.cpp
</p>
<pre class="brush:cpp">
#define INITGUID
#include &lt;windows.h&gt;
#include &lt;strsafe.h&gt;
#include &lt;setupapi.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int __cdecl main(int argc, char* argv[])
{
  HANDLE hFile = NULL;
  DWORD dwRet = 0;
  char szBuffer[255]={0};

  hFile = CreateFile("\\\\.\\MyDriver", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
  if(hFile == INVALID_HANDLE_VALUE){
    printf("failed to open mydriver");
    return 1;
  }

  strncpy(szBuffer, "I am error", sizeof(szBuffer));
  WriteFile(hFile, szBuffer, strlen(szBuffer) + 1, &amp;dwRet, NULL);
  printf("WR: %s, %d\n", szBuffer, dwRet);

  memset(szBuffer, 0, sizeof(szBuffer));
  ReadFile(hFile, szBuffer, sizeof(szBuffer), &amp;dwRet, NULL);
  printf("RD: %s, %d\n", szBuffer, dwRet);
  CloseHandle(hFile);
  return 0;
}
</pre><br>

<p>
結果<br>
<img src="asm_file-buffer/2.jpg" class="maxSize"><br>
<img src="asm_file-buffer/3.jpg" class="maxSize">
</p>

<p>
<br><a href="../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
