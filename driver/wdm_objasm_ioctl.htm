<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../driver.htm">驅動程式</a> - Windows Driver Model (WDM) - 使用範例 - Assembly (ObjAsm) - <b>Handle IOCTL IRP</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://wasm.in/<br>
http://four-f.narod.ru/<br>
https://github.com/steward-fu/ddk<br><br>

main.asm
</p>
<pre class="brush:asm">
%include @Environ(OBJASM_PATH)/Code/Macros/Model.inc

SysSetup OOP, DDK32, ANSI_STRING

MakeObjects Primer, KDriver, KPnpDevice, KPnpLowerDevice

IOCTL_TEST equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_BUFFERED, FILE_ANY_ACCESS)

Object MyDriver, , KDriver
    RedefineMethod Unload
    RedefineMethod AddDevice, PDEVICE_OBJECT
    RedefineMethod DriverEntry, PUNICODE_STRING
    RedefineMethod DriverIrpDispatch, PIRP
ObjectEnd

Object MyDevice, , KPnpDevice
    RedefineMethod Close, PKIrp
    RedefineMethod Create, PKIrp
    RedefineMethod DeviceControl, PKIrp

    RedefineMethod Init, PDEVICE_OBJECT
    RedefineMethod DefaultPnp, PKIrp
    RedefineMethod DeviceIrpDispatch, PIRP

    Embed m_pMyLowerDevice, KPnpLowerDevice
ObjectEnd

DECLARE_DRIVER_CLASS MyDriver, $OfsCStr("MyDriver")

Method MyDriver.DriverEntry, uses esi, pMyRegistry : PUNICODE_STRING
    mov eax, STATUS_SUCCESS
MethodEnd

Method MyDriver.AddDevice, uses esi, pPhyDevice : PDEVICE_OBJECT
    New MyDevice
    push eax
    OCall eax::MyDevice.Init, pPhyDevice
    pop eax
MethodEnd

Method MyDriver.DriverIrpDispatch, uses esi, pMyIrp : PIRP
    SetObject esi
    OCall DriverObject
    mov eax, (DRIVER_OBJECT ptr [eax]).DeviceObject
    mov eax, (DEVICE_OBJECT ptr [eax]).DeviceExtension
    OCall eax::MyDevice.DeviceIrpDispatch, pMyIrp
MethodEnd

Method MyDriver.Unload, uses esi
    ACall Unload
MethodEnd

Method MyDevice.Init, uses esi, pPhyDevice : PDEVICE_OBJECT
    ACall Init, $OfsCStrW("\Device\MyDriver"), FILE_DEVICE_UNKNOWN, $OfsCStrW("\DosDevices\MyDriver"), 0, DO_BUFFERED_IO

    SetObject esi
    OCall [esi].m_pMyLowerDevice::KPnpLowerDevice.Initialize, [esi].m_pMyDevice, pPhyDevice
    OCall SetLowerDevice, addr [esi].m_pMyLowerDevice
MethodEnd

Method MyDevice.DeviceIrpDispatch, uses esi, pMyIrp : PIRP
    ACall DeviceIrpDispatch, pMyIrp
MethodEnd

Method MyDevice.DefaultPnp, uses esi, I : PKIrp
    SetObject esi
    OCall I::KIrp.ForceReuseOfCurrentStackLocationInCalldown
    OCall [esi].m_pMyLowerDevice::KLowerDevice.PnpCall, I
MethodEnd

Method MyDevice.Create, uses esi, I : PKIrp
    T $OfsCStr("IRP_MJ_CREATE")

    OCall I::KIrp.PnpComplete, STATUS_SUCCESS, IO_NO_INCREMENT
MethodEnd

Method MyDevice.DeviceControl, uses esi, I : PKIrp
    local code : DWORD

    OCall I::KIrp.IoctlCode
    mov code, eax
    .if code == IOCTL_TEST
        T $OfsCStr("IOCTL_TEST")
    .endif

    OCall I::KIrp.Information
    mov dword ptr [eax], 0

    OCall I::KIrp.PnpComplete, STATUS_SUCCESS, IO_NO_INCREMENT
MethodEnd

Method MyDevice.Close, uses esi, I : PKIrp
    T $OfsCStr("IRP_MJ_CLOSE")

    OCall I::KIrp.PnpComplete, STATUS_SUCCESS, IO_NO_INCREMENT
MethodEnd
end
</pre><br>

<p>
app.asm</b>
</p>
<pre class="brush:asm">
.386p
.model flat, stdcall
option casemap:none
 
include c:\masm32\include\windows.inc
include c:\masm32\include\masm32.inc
include c:\masm32\include\user32.inc
include c:\masm32\include\msvcrt.inc
include c:\masm32\include\shell32.inc
include c:\masm32\include\kernel32.inc
include c:\masm32\include\w2k\ntddkbd.inc
include c:\masm32\Macros\Strings.mac

includelib c:\masm32\lib\user32.lib
includelib c:\masm32\lib\masm32.lib
includelib c:\masm32\lib\msvcrt.lib
includelib c:\masm32\lib\shell32.lib
includelib c:\masm32\lib\kernel32.lib

IOCTL_TEST      equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_BUFFERED,   FILE_ANY_ACCESS)
IOCTL_GET_BUF   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_BUFFERED,   FILE_ANY_ACCESS)
IOCTL_SET_BUF   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 801h, METHOD_BUFFERED,   FILE_ANY_ACCESS)
IOCTL_GET_DIR   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_OUT_DIRECT, FILE_ANY_ACCESS)
IOCTL_SET_DIR   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 801h, METHOD_IN_DIRECT,  FILE_ANY_ACCESS)
IOCTL_GET_NEI   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 800h, METHOD_NEITHER,    FILE_ANY_ACCESS)
IOCTL_SET_NEI   equ CTL_CODE(FILE_DEVICE_UNKNOWN, 801h, METHOD_NEITHER,    FILE_ANY_ACCESS)

.const 
DEV_NAME    db "\\.\MyDriver",0
MSG_SEND    db "I am error",0
MSG_WR      db "SET: %s, %d",10,13,0
MSG_RD      db "GET: %s, %d",10,13,0
 
.data
dwCode0     dd IOCTL_TEST
dwCode1     dd IOCTL_TEST

.data?
hFile       dd ?
dwRet       dd ?
szBuffer    db 255 dup(?)
 
.code
start:
    invoke GetCommandLineW
    invoke CommandLineToArgvW, eax, offset dwRet
    
    .if dwRet &gt; 1
        invoke WideCharToMultiByte, CP_ACP, 0, dword ptr [eax + 4], -1, offset szBuffer, 255, 0, 0

        invoke lstrcmp, $CTA0("BUF"), offset szBuffer
        .if eax == 0
            mov dwCode0, IOCTL_SET_BUF
            mov dwCode1, IOCTL_GET_BUF
        .endif
        
        invoke lstrcmp, $CTA0("DIR"), offset szBuffer
        .if eax == 0
            mov dwCode0, IOCTL_SET_DIR
            mov dwCode1, IOCTL_GET_DIR
        .endif
        
        invoke lstrcmp, $CTA0("NEI"), offset szBuffer
        .if eax == 0
            mov dwCode0, IOCTL_SET_NEI
            mov dwCode1, IOCTL_GET_NEI
        .endif
    .endif

    invoke CreateFile, offset DEV_NAME, GENERIC_READ or GENERIC_WRITE, FILE_SHARE_READ, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0
    mov hFile, eax

    .if dwCode0 == IOCTL_TEST
        invoke DeviceIoControl, hFile, IOCTL_TEST, NULL, 0, NULL, 0, offset dwRet, NULL
    .else
        invoke StrLen, offset MSG_SEND
        mov dwRet, eax

        invoke crt_printf, offset MSG_WR, offset MSG_SEND, dwRet
        invoke DeviceIoControl, hFile, dwCode0, offset MSG_SEND, dwRet, NULL, 0, offset dwRet, NULL
    
        and dwRet, 0
        invoke crt_memset, offset szBuffer, 0, 255
        invoke DeviceIoControl, hFile, dwCode1, NULL, 0, offset szBuffer, 255, offset dwRet, NULL
        invoke crt_printf, offset MSG_RD, offset szBuffer, dwRet
    .endif

    invoke CloseHandle, hFile
    invoke ExitProcess, 0
end start
end
</pre><br>

<p>
完成<br>
<img src="wdm_asm_ioctl/1.jpg" class="maxSize"><br>
<img src="wdm_asm_ioctl/2.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
