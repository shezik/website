<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><script type="text/javascript" src="../page_head.js"></script>

<h3><a href="../driver.htm">驅動程式</a> - Windows Driver Model (WDM) - 使用範例 - C/C++ (DDK) - <b>Use Semaphore</b></h3>
<hr size="1"><br>
<p>
參考資訊：<br>
https://wasm.in/<br>
http://four-f.narod.ru/<br>
https://github.com/steward-fu/ddk<br><br>

main.c
</p>
<pre class="brush:cpp">
#include &lt;wdm.h&gt;
 
#define DEV_NAME L"\\Device\\MyDriver"
#define SYM_NAME L"\\DosDevices\\MyDriver"
 
#define MAX_THREAD      3
#define MAX_SEMA_COUNT  2
#define MAX_SEMA_LIMIT  2
 
KSEMAPHORE mySemaphore = {0};
PVOID pThread[MAX_THREAD] = {0};
PDEVICE_OBJECT pNextDevice = NULL;
 
void MyThread(PVOID pParam)
{
    ULONG cc = 0;
    int t = (int)pParam;
    NTSTATUS status = 0;
    LARGE_INTEGER stTime = { 0 };
    
    stTime.HighPart |= -1;
    stTime.LowPart = -10000000;
    DbgPrint("Thread%d, Acquiring Semaphore", t);
    status = KeWaitForSingleObject(&amp;mySemaphore, Executive, KernelMode, FALSE, NULL);
    DbgPrint("Thread%d, Acquired Semaphore", t);
    DbgPrint("Thread%d, Sleeping", t);
    KeDelayExecutionThread(KernelMode, FALSE, &amp;stTime);
    DbgPrint("Thread%d, Releasing Semaphore", t);
    cc = KeReadStateSemaphore(&amp;mySemaphore);
    KeReleaseSemaphore(&amp;mySemaphore, IO_NO_INCREMENT, (cc &lt; MAX_SEMA_LIMIT) ? 1 : 0, FALSE);
    DbgPrint("Thread%d, Released Semaphore", t);
    PsTerminateSystemThread(STATUS_SUCCESS);
}
 
NTSTATUS AddDevice(PDRIVER_OBJECT pMyDriver, PDEVICE_OBJECT pPhyDevice)
{
    PDEVICE_OBJECT pMyDevice = NULL;
    UNICODE_STRING usDeviceName = { 0 };
    UNICODE_STRING usSymbolName = { 0 };
 
    RtlInitUnicodeString(&amp;usDeviceName, DEV_NAME);
    IoCreateDevice(pMyDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pMyDevice);
    RtlInitUnicodeString(&amp;usSymbolName, SYM_NAME);
    IoCreateSymbolicLink(&amp;usSymbolName, &amp;usDeviceName);
    pNextDevice = IoAttachDeviceToDeviceStack(pMyDevice, pPhyDevice);
    pMyDevice-&gt;Flags &amp;= ~DO_DEVICE_INITIALIZING;
    pMyDevice-&gt;Flags |= DO_BUFFERED_IO;
    return STATUS_SUCCESS;
}
 
void Unload(PDRIVER_OBJECT pMyDriver)
{
    pMyDriver = pMyDriver;
}
 
NTSTATUS IrpPnp(PDEVICE_OBJECT pMyDevice, PIRP pIrp)
{
    int cc = 0;
    UNICODE_STRING usSymbolName = {0};
    PIO_STACK_LOCATION pStack = IoGetCurrentIrpStackLocation(pIrp);
 
    if (pStack-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE) {
        for (cc = 0; cc &lt; MAX_THREAD; cc++) {
            if (pThread[cc] != NULL) {
                KeWaitForSingleObject(pThread[cc], Executive, KernelMode, FALSE, NULL);
                ObDereferenceObject(pThread[cc]);
            }
        }
        RtlInitUnicodeString(&amp;usSymbolName, SYM_NAME);
        IoDeleteSymbolicLink(&amp;usSymbolName);
        IoDetachDevice(pNextDevice);
        IoDeleteDevice(pMyDevice);
        IoCompleteRequest(pIrp, IO_NO_INCREMENT);
        return STATUS_SUCCESS;
    }
    IoSkipCurrentIrpStackLocation(pIrp);
    return IoCallDriver(pNextDevice, pIrp);
}
 
NTSTATUS DriverEntry(PDRIVER_OBJECT pMyDriver, PUNICODE_STRING pMyRegistry)
{
    int cc = 0;
    HANDLE hThread = 0;
    NTSTATUS status = 0;
 
    pMyDriver-&gt;MajorFunction[IRP_MJ_PNP] = IrpPnp;
    pMyDriver-&gt;DriverExtension-&gt;AddDevice = AddDevice;
    pMyDriver-&gt;DriverUnload = Unload;
 
    KeInitializeSemaphore(&amp;mySemaphore, MAX_SEMA_COUNT, MAX_SEMA_LIMIT);
    for (cc = 0; cc &lt; MAX_THREAD; cc++) {
        status = PsCreateSystemThread(&amp;hThread, THREAD_ALL_ACCESS, NULL, (PHANDLE)-1, NULL, MyThread, (PVOID)cc);
        if (status == STATUS_SUCCESS) {
            ObReferenceObjectByHandle(hThread, THREAD_ALL_ACCESS, NULL, KernelMode, &amp;pThread[cc], NULL);
            ZwClose(hThread);
        }
    }
    return STATUS_SUCCESS;
}
</pre><br>

<p>
完成<br>
<img src="wdm_asm_semaphore/1.jpg" class="maxSize">
</p>

<br><script type="text/javascript" src="../tail.js"></script>
