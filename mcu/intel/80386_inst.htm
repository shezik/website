<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Intel &gt;&gt; 80386</h3>
<p><b>指令集</b></p>
<hr size="1">
<p>
參考資訊：<br>
1. <a href="https://pdos.csail.mit.edu/6.828/2005/readings/i386/c17.htm">i386</a><br><br>

如下：
</p>
<table>
<tr><td>AAA</td><td>ASCII Adjust after Addition</td></tr>
<tr><td>AAD</td><td>ASCII Adjust AX before Division</td></tr>
<tr><td>AAM</td><td>ASCII Adjust AX after Multiply</td></tr>
<tr><td>AAS</td><td>ASCII Adjust AL after Subtraction</td></tr>
<tr><td>ADC</td><td>Add with Carry</td></tr>
<tr><td>ADD</td><td>Add</td></tr>
<tr><td>AND</td><td>Logical AND</td></tr>
<tr><td>ARPL</td><td>Adjust RPL Field of Selector</td></tr>
<tr><td>BOUND</td><td>Check Array Index Against Bounds</td></tr>
<tr><td>BSF</td><td>Bit Scan Forward</td></tr>
<tr><td>BSR</td><td>Bit Scan Reverse</td></tr>
<tr><td>BT</td><td>Bit Test</td></tr>
<tr><td>BTC</td><td>Bit Test and Complement</td></tr>
<tr><td>BTR</td><td>Bit Test and Reset</td></tr>
<tr><td>BTS</td><td>Bit Test and Set</td></tr>
<tr><td>CALL</td><td>Call Procedure</td></tr>
<tr><td>CBW/CWDE</td><td>Convert Byte to Word/Convert Word to Doubleword</td></tr>
<tr><td>CLC</td><td>Clear Carry Flag</td></tr>
<tr><td>CLD</td><td>Clear Direction Flag</td></tr>
<tr><td>CLI</td><td>Clear Interrupt Flag</td></tr>
<tr><td>CLTS</td><td>Clear Task-Switched Flag in CR0</td></tr>
<tr><td>CMC</td><td>Complement Carry Flag</td></tr>
<tr><td>CMP</td><td>Compare Two Operands</td></tr>
<tr><td>CMPS/CMPSB/CMPSW/CMPSD</td><td>Compare String Operands</td></tr>
<tr><td>CWD/CDQ</td><td>Convert Word to Doubleword/Convert Doubleword to Quadword</td></tr>
<tr><td>DAA</td><td>Decimal Adjust AL after Addition</td></tr>
<tr><td>DAS</td><td>Decimal Adjust AL after Subtraction</td></tr>
<tr><td>DEC</td><td>Decrement by 1</td></tr></td></tr>
<tr><td>DIV</td><td>Unsigned Divide</td></tr>
<tr><td>ENTER</td><td>Make Stack Frame for Procedure Parameters</td></tr>
<tr><td>HLT</td><td>Halt</td></tr>
<tr><td>IDIV</td><td>Signed Divide</td></tr>
<tr><td>IMUL</td><td>Signed Multiply</td></tr>
<tr><td>IN</td><td>Input from Port</td></tr>
<tr><td>INC</td><td>Increment by 1</td></tr>
<tr><td>INS/INSB/INSW/INSD</td><td>Input from Port to String</td></tr>
<tr><td>INT/INTO</td><td>Call to Interrupt Procedure</td></tr>
<tr><td>IRET/IRETD</td><td>Interrupt Return</td></tr>
<tr><td>Jcc</td><td>Jump if Condition is Met</td></tr>
<tr><td>JMP</td><td>Jump</td></tr>
<tr><td>LAHF</td><td>Load Flags into AH Register</td></tr>
<tr><td>LAR</td><td>Load Access Rights Byte</td></tr>
<tr><td>LEA</td><td>Load Effective Address</td></tr>
<tr><td>LEAVE</td><td>High Level Procedure Exit</td></tr>
<tr><td>LGDT/LIDT</td><td>Load Global/Interrupt Descriptor Table Register</td></tr>
<tr><td>LGS/LSS/LDS/LES/LFS</td><td>Load Full Pointer</td></tr>
<tr><td>LLDT</td><td>Load Local Descriptor Table Register</td></tr>
<tr><td>LMSW</td><td>Load Machine Status Word</td></tr>
<tr><td>LOCK</td><td>Assert LOCK# Signal Prefix</td></tr>
<tr><td>LODS/LODSB/LODSW/LODSD</td><td>Load String Operand</td></tr>
<tr><td>LOOP/LOOPcond</td><td>Loop Control with CX Counter</td></tr>
<tr><td>LSL</td><td>Load Segment Limit</td></tr>
<tr><td>LTR</td><td>Load Task Register</td></tr>
<tr><td>MOV</td><td>Move Data</td></tr>
<tr><td>MOV</td><td>Move to/from Special Registers</td></tr>
<tr><td>MOVS/MOVSB/MOVSW/MOVSD</td><td>Move Data from String to String</td></tr>
<tr><td>MOVSX</td><td>Move with Sign-Extend</td></tr>
<tr><td>MOVZX</td><td>Move with Zero-Extend</td></tr>
<tr><td>MUL</td><td>Unsigned Multiplication of AL or AX</td></tr>
<tr><td>NEG</td><td>Two's Complement Negation</td></tr>
<tr><td>NOP</td><td>No Operation</td></tr>
<tr><td>NOT</td><td>One's Complement Negation</td></tr>
<tr><td>OR</td><td>Logical Inclusive OR</td></tr>
<tr><td>OUT</td><td>Output to Port</td></tr>
<tr><td>OUTS/OUTSB/OUTSW/OUTSD</td><td>Output String to Port</td></tr>
<tr><td>POP</td><td>Pop a Word from the Stack</td></tr>
<tr><td>POPA/POPAD</td><td>Pop all General Registers</td></tr>
<tr><td>POPF/POPFD</td><td>Pop Stack into FLAGS or EFLAGS Register</td></tr>
<tr><td>PUSH</td><td>Push Operand onto the Stack</td></tr>
<tr><td>PUSHA/PUSHAD</td><td>Push all General Registers</td></tr>
<tr><td>PUSHF/PUSHFD</td><td>Push Flags Register onto the Stack</td></tr>
<tr><td>RCL/RCR/ROL/ROR</td><td>Rotate</td></tr>
<tr><td>REP/REPE/REPZ/REPNE/REPNZ</td><td>Repeat Following String Operation</td></tr>
<tr><td>RET</td><td>Return from Procedure</td></tr>
<tr><td>SAHF</td><td>Store AH into Flags</td></tr>
<tr><td>SAL/SAR/SHL/SHR</td><td>Shift Instructions</td></tr>
<tr><td>SBB Integer</td><td>Subtraction with Borrow</td></tr>
<tr><td>SCAS/SCASB/SCASW/SCASD</td><td>Compare String Data</td></tr>
<tr><td>SETcc</td><td>Byte Set on Condition</td></tr>
<tr><td>SGDT/SIDT</td><td>Store Global/Interrupt Descriptor Table Register</td></tr>
<tr><td>SHLD</td><td>Double Precision Shift Left</td></tr>
<tr><td>SHRD</td><td>Double Precision Shift Right</td></tr>
<tr><td>SLDT</td><td>Store Local Descriptor Table Register</td></tr>
<tr><td>SMSW</td><td>Store Machine Status Word</td></tr>
<tr><td>STC</td><td>Set Carry Flag</td></tr>
<tr><td>STD</td><td>Set Direction Flag</td></tr>
<tr><td>STI</td><td>Set Interrupt Flag</td></tr>
<tr><td>STOS/STOSB/STOSW/STOSD</td><td>Store String Data</td></tr>
<tr><td>STR</td><td>Store Task Register</td></tr>
<tr><td>SUB</td><td>Integer Subtraction</td></tr>
<tr><td>TEST</td><td>Logical Compare</td></tr>
<tr><td>VERR/VERW</td><td>Verify a Segment for Reading or Writing</td></tr>
<tr><td>WAIT</td><td>Wait until BUSY# Pin is Inactive (HIGH)</td></tr>
<tr><td>XCHG</td><td>Exchange Register/Memory with Register</td></tr>
<tr><td>XLAT/XLATB</td><td>Table Look-up Translation</td></tr>
<tr><td>XOR</td><td>Logical Exclusive OR</td></tr>
</table><br>

<p>
<br><a href="../../mcu.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
