<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>MT7688 &gt;&gt; C/C++</h3>
<p><b>Keyboard</b></p>
<hr size="1">
<p>
drivers/gpio/keyboard/main.c
</p>
<pre class="brush:cpp">
#include &lt;linux/init.h&gt;
#include &lt;linux/device.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/delay.h&gt;
#include &lt;linux/timer.h&gt;
#include &lt;linux/gpio.h&gt;
#include &lt;linux/input.h&gt;

#include &lt;asm/irq.h&gt;
#include &lt;asm/io.h&gt;
#include &lt;asm/io.h&gt;
 
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Steward_Fu");
MODULE_DESCRIPTION("MT7688 Keyboard Driver");

#define GPIO2_MODE  0x10000064
#define GPIO_CTRL_0 0x10000600
#define GPIO_CTRL_1 0x10000604
#define GPIO_CTRL_2 0x10000608
#define GPIO_DATA_0 0x10000620
#define GPIO_DATA_1 0x10000624
#define GPIO_DATA_2 0x10000628
#define GPIO_DSET_0 0x10000630
#define GPIO_DSET_1 0x10000634
#define GPIO_DSET_2 0x10000638
#define GPIO_DCLR_0 0x10000640
#define GPIO_DCLR_1 0x10000644
#define GPIO_DCLR_2 0x10000648

static int g_blink_period=100;
static struct input_dev *button_dev;
static struct timer_list g_blink_timer;

volatile unsigned long *gpio2_mode;
volatile unsigned long *gpio_ctrl_0;
volatile unsigned long *gpio_ctrl_1;
volatile unsigned long *gpio_ctrl_2;
volatile unsigned long *gpio_data_0;
volatile unsigned long *gpio_data_1;
volatile unsigned long *gpio_data_2;
volatile unsigned long *gpio_dset_0;
volatile unsigned long *gpio_dset_1;
volatile unsigned long *gpio_dset_2;
volatile unsigned long *gpio_dclr_0;
volatile unsigned long *gpio_dclr_1;
volatile unsigned long *gpio_dclr_2;

unsigned int mt7688_get(int pin)
{
  uint32_t tmp = 0;

  if(pin &lt;= 31){
    tmp = *gpio_data_0;
    tmp = (tmp &gt;&gt; pin) &amp; 1u;
  }
  else if(pin &lt;= 63){
    tmp = *gpio_data_1;
    tmp = (tmp &gt;&gt; (pin-32)) &amp; 1u;
  } 
  else if(pin &lt;= 95){
    tmp = *gpio_data_2;
    tmp = (tmp &gt;&gt; (pin-64)) &amp; 1u;
  }
  return tmp;
}

void mt7688_dir(int pin, int is_output)
{
  uint32_t tmp;

  if(pin &lt;= 31){
    tmp = *gpio_ctrl_0;
    if(is_output){
      tmp|= (1u &lt;&lt; pin);
    }
    else{
      tmp&amp;= ~(1u &lt;&lt; pin);
    }
    *gpio_ctrl_0 = tmp;
  } 
  else if(pin &lt;= 63){
    tmp = *gpio_ctrl_1;
    if(is_output){
      tmp|= (1u &lt;&lt; (pin-32));
    }
    else{
      tmp&amp;= ~(1u &lt;&lt; (pin-32));
    }
    *gpio_ctrl_1 = tmp;
  }
  else if(pin &lt;= 95){
    tmp = *gpio_ctrl_2;
    if(is_output){
      tmp|= (1u &lt;&lt; (pin-64));
    }
    else{
      tmp&amp;= ~(1u &lt;&lt; (pin-64));
    }
    *gpio_ctrl_2 = tmp;
  }
}

void mt7688_set(int pin, int value)
{
  uint32_t tmp;

  if(pin &lt;= 31){
    tmp = (1u &lt;&lt; pin);
    if(value){
      *gpio_dset_0 = tmp;
    }
    else{
      *gpio_dclr_0 = tmp;
    }
  } 
  else if(pin &lt;= 63){
    tmp = (1u &lt;&lt; (pin-32));
    if(value){
      *gpio_dset_1 = tmp;
    }
    else{
      *gpio_dclr_1 = tmp;
    }
  } 
  else if(pin &lt;= 95){
    tmp = (1u &lt;&lt; (pin-64));
    if(value){
      *gpio_dset_2 = tmp;
    }
    else{
      *gpio_dclr_2 = tmp;
    }
  }
}

static void report_key(unsigned long btn, unsigned long mask, unsigned char key)
{
  static unsigned long btn_pressed=0;
  static unsigned long btn_released=0xfff;

  if(btn &amp; mask){
    btn_released&amp;= ~mask;
    if((btn_pressed &amp; mask) == 0){
      btn_pressed|= mask;
      input_report_key(button_dev, key, 1);
    }
  }
  else{
    btn_pressed&amp;= ~mask;
    if((btn_released &amp; mask) == 0){
      btn_released|= mask;
      input_report_key(button_dev, key, 0);
    }
  }
}

static void blink_handler(unsigned long unused)
{
  unsigned int in;
  static unsigned int val=0;
  static unsigned int pre=0;
    
  mt7688_set(14, 0);
  mt7688_set(15, 1);
  mt7688_set(43, 1);
  in = (mt7688_get(0) &lt;&lt; 0);
  in|= (mt7688_get(1) &lt;&lt; 1);
  in|= (mt7688_get(2) &lt;&lt; 2);
  in|= (mt7688_get(3) &lt;&lt; 3);
  in&lt;&lt;= 0;
  val&amp;= 0xff0;
  val|= in;
  
  mt7688_set(14, 1);
  mt7688_set(15, 0);
  mt7688_set(43, 1);
  in = (mt7688_get(0) &lt;&lt; 0);
  in|= (mt7688_get(1) &lt;&lt; 1);
  in|= (mt7688_get(2) &lt;&lt; 2);
  in|= (mt7688_get(3) &lt;&lt; 3);
  in&lt;&lt;= 4;
  val&amp;= 0xf0f;
  val|= in;
  
  mt7688_set(14, 1);
  mt7688_set(15, 1);
  mt7688_set(43, 0);
  in = (mt7688_get(0) &lt;&lt; 0);
  in|= (mt7688_get(1) &lt;&lt; 1);
  in|= (mt7688_get(2) &lt;&lt; 2);
  in|= (mt7688_get(3) &lt;&lt; 3);
  in&lt;&lt;= 8;
  val&amp;= 0x0ff;
  val|= in;
  val = (~val) &amp; 0xfff;

  if(pre != val){
    pre = val;

    // 0x100 =&gt; up
    // 0x800 =&gt; down
    // 0x400 =&gt; left
    // 0x200 =&gt; right
    // 0x040 =&gt; start
    // 0x020 =&gt; select
    // 0x001 =&gt; a
    // 0x008 =&gt; b
    // 0x002 =&gt; x
    // 0x004 =&gt; y
    report_key(pre, 0x100, KEY_UP);
    report_key(pre, 0x800, KEY_DOWN);
    report_key(pre, 0x400, KEY_LEFT);
    report_key(pre, 0x200, KEY_RIGHT);
    report_key(pre, 0x040, KEY_ENTER);
    report_key(pre, 0x020, KEY_ESC);
    report_key(pre, 0x001, KEY_LEFTCTRL);
    report_key(pre, 0x008, KEY_LEFTALT);
    report_key(pre, 0x002, KEY_SPACE);
    report_key(pre, 0x004, KEY_LEFTSHIFT);
    input_sync(button_dev);
  }

  mod_timer(&amp;g_blink_timer, jiffies + msecs_to_jiffies(g_blink_period));
}

static int __init main_init(void)
{
  gpio2_mode = (volatile unsigned long*)ioremap(GPIO2_MODE, 4);
  gpio_ctrl_0 = (volatile unsigned long*)ioremap(GPIO_CTRL_0, 4);
  gpio_ctrl_1 = (volatile unsigned long*)ioremap(GPIO_CTRL_1, 4);
  gpio_ctrl_2 = (volatile unsigned long*)ioremap(GPIO_CTRL_2, 4);
  gpio_data_0 = (volatile unsigned long*)ioremap(GPIO_DATA_0, 4);
  gpio_data_1 = (volatile unsigned long*)ioremap(GPIO_DATA_1, 4);
  gpio_data_2 = (volatile unsigned long*)ioremap(GPIO_DATA_2, 4);
  gpio_dset_0 = (volatile unsigned long*)ioremap(GPIO_DSET_0, 4);
  gpio_dset_1 = (volatile unsigned long*)ioremap(GPIO_DSET_1, 4);
  gpio_dset_2 = (volatile unsigned long*)ioremap(GPIO_DSET_2, 4);
  gpio_dclr_0 = (volatile unsigned long*)ioremap(GPIO_DCLR_0, 4);
  gpio_dclr_1 = (volatile unsigned long*)ioremap(GPIO_DCLR_1, 4);
  gpio_dclr_2 = (volatile unsigned long*)ioremap(GPIO_DCLR_2, 4);
  printk("gpio2 mode: 0x%x\n", (unsigned int)gpio2_mode);
  printk("ctrl 0: 0x%x\n", (unsigned int)gpio_ctrl_0);
  printk("ctrl 1: 0x%x\n", (unsigned int)gpio_ctrl_1);
  printk("ctrl 2: 0x%x\n", (unsigned int)gpio_ctrl_2);
  printk("data 0: 0x%x\n", (unsigned int)gpio_data_0);
  printk("data 1: 0x%x\n", (unsigned int)gpio_data_1);
  printk("data 2: 0x%x\n", (unsigned int)gpio_data_2);
  printk("dset 0: 0x%x\n", (unsigned int)gpio_dset_0);
  printk("dset 1: 0x%x\n", (unsigned int)gpio_dset_1);
  printk("dset 2: 0x%x\n", (unsigned int)gpio_dset_2);
  printk("dclr 0: 0x%x\n", (unsigned int)gpio_dclr_0);
  printk("dclr 1: 0x%x\n", (unsigned int)gpio_dclr_1);
  printk("dclr 2: 0x%x\n", (unsigned int)gpio_dclr_2);

  *gpio2_mode = *gpio2_mode | 0x55555555;
  mt7688_dir(0, 0);
  mt7688_dir(1, 0);
  mt7688_dir(2, 0);
  mt7688_dir(3, 0);
  mt7688_dir(14, 1);
  mt7688_dir(15, 1);
  mt7688_dir(43, 1);

  button_dev = input_allocate_device();
  set_bit(EV_KEY,button_dev-&gt; evbit);
  set_bit(KEY_UP, button_dev-&gt;keybit);
  set_bit(KEY_DOWN, button_dev-&gt;keybit);
  set_bit(KEY_LEFT, button_dev-&gt;keybit);
  set_bit(KEY_RIGHT, button_dev-&gt;keybit);
  set_bit(KEY_ENTER, button_dev-&gt;keybit);
  set_bit(KEY_ESC, button_dev-&gt;keybit);
  set_bit(KEY_LEFTCTRL, button_dev-&gt;keybit);
  set_bit(KEY_LEFTALT, button_dev-&gt;keybit);
  set_bit(KEY_SPACE, button_dev-&gt;keybit);
  set_bit(KEY_LEFTSHIFT, button_dev-&gt;keybit);
  button_dev-&gt;name = "mt7688kbd";
  button_dev-&gt;id.bustype = BUS_HOST;
  input_register_device(button_dev);
  
  setup_timer(&amp;g_blink_timer, blink_handler, 0);
  mod_timer(&amp;g_blink_timer, jiffies + msecs_to_jiffies(g_blink_period));
  return 0;
}
 
static void __exit main_exit(void)
{
  input_unregister_device(button_dev);
  del_timer(&amp;g_blink_timer);
  iounmap(gpio2_mode);
  iounmap(gpio_ctrl_0);
  iounmap(gpio_ctrl_1);
  iounmap(gpio_ctrl_2);
  iounmap(gpio_data_0);
  iounmap(gpio_data_1);
  iounmap(gpio_data_2);
  iounmap(gpio_dset_0);
  iounmap(gpio_dset_1);
  iounmap(gpio_dset_2);
  iounmap(gpio_dclr_0);
  iounmap(gpio_dclr_1);
  iounmap(gpio_dclr_2);
}
 
module_init(main_init);
module_exit(main_exit);
</pre><br>

<p>
<br><a href="../../mcu.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
