<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>MT7688 &gt;&gt; C/C++</h3>
<p><b>移植Framebuffer顯示驅動程式</b></p>
<hr size="1">
<p>
dts/LINKIT7688.dts
</p>
<pre>
gpio-slcd {
  compatible = "mt7688-fb";
};
</pre>
<p>
P.S. <b>compatible = "mt7688-fb"</b>將會對應到驅動程式的<b>MODULE_ALIAS("platform:mt7688-fb")</b><br><br>

drivers/video/fbdev/Kconfig
</p>
<pre>
config FB_MT7688
  tristate "MT7688 Smart LCD framebuffer support"
  depends on FB
  select FB_SYS_FILLRECT
  select FB_SYS_COPYAREA
  select FB_SYS_IMAGEBLIT
  help
    This is the frame buffer device driver for MT7688 chip.
    If you say Y here, please say N to 'MT7688 framebuffer support'.
</pre><br>

<p>
drivers/video/fbdev/Makefile
</p>
<pre>
obj-$(CONFIG_FB_MT7688) += mt7688fb.o
</pre><br>

<p>
drivers/video/fbdev/mt7688fb.c
</p>
<pre class="brush:cpp">
/*
 *  Copyright (C) 2009-2010, Lars-Peter Clausen &lt;lars@metafoo.de&gt;
 *  Copyright (C) 2010, Maarten ter Huurne &lt;maarten@treewalker.org&gt;
 *  Copyright (C) 2017, Steward Fu &lt;steward.fu@gmail.com&gt;
 *
 *    MT7688 Smart LCD framebuffer driver
 *
 *  This program is free software; you can redistribute   it and/or modify it
 *  under  the terms of   the GNU General  Public License as published by the
 *  Free Software Foundation;  either version 2 of the  License, or (at your
 *  option) any later version.
 *
 *  You should have received a copy of the  GNU General Public License along
 *  with this program; if not, write  to the Free Software Foundation, Inc.,
 *  675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

#include &lt;linux/kernel.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/mutex.h&gt;
#include &lt;linux/platform_device.h&gt;
#include &lt;linux/clk.h&gt;
#include &lt;linux/delay.h&gt;
#include &lt;linux/console.h&gt;
#include &lt;linux/fb.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/moduleparam.h&gt;
#include &lt;linux/init.h&gt;
#include &lt;linux/slab.h&gt;
#include &lt;linux/fs.h&gt;
#include &lt;linux/errno.h&gt;
#include &lt;linux/types.h&gt;
#include &lt;linux/mm.h&gt;
#include &lt;linux/kdev_t.h&gt;
#include &lt;asm/page.h&gt;
#include &lt;linux/cdev.h&gt;
#include &lt;linux/dma-mapping.h&gt;
#include &lt;linux/gpio.h&gt;
#include &lt;linux/mutex.h&gt;
#include &lt;linux/workqueue.h&gt;

#include &lt;asm/mach-ralink/mt7688/gpio.h&gt;
#include &lt;asm/mach-ralink/mt7688/base.h&gt;

#define gpio_reg_set(buf, pin) buf[pin &gt;&gt; 5]|= (1u &lt;&lt; (pin % 32))
#define gpio_reg_clr(buf, pin) buf[(pin &gt;&gt; 5) + 3]|= (1u &lt;&lt; (pin % 32))
#define reg_assign(val, buf, pin) \
  if(val){ \
    gpio_reg_set(buf, pin); \
  } \
  else{ \
    gpio_reg_clr(buf, pin); \
  }

struct mtfb {
  struct fb_info *fb;
  struct platform_device *pdev;

  volatile unsigned long *gpio_reg[14];

  struct fb_videomode mode;

  size_t vidmem_size;
  void *vidmem;
  dma_addr_t vidmem_phys;

  size_t blackline_size;
  void *blackline;
  dma_addr_t blackline_phys;

  unsigned is_enabled:1;
  struct mutex lock;

  struct delayed_work refresh_work;

  uint32_t pseudo_palette[16];
};

static struct fb_fix_screeninfo mtfb_fix = {
  .id        = "MT7688 SLCD FB",
  .type      = FB_TYPE_PACKED_PIXELS,
  .visual    = FB_VISUAL_TRUECOLOR,
  .xpanstep  = 0,
  .ypanstep  = 1,
  .ywrapstep = 0,
  .accel     = FB_ACCEL_NONE,
};

static void mtfb_gpio_dir(struct mtfb *mtfb, int pin, int is_output)
{
  if(is_output){
    *mtfb-&gt;gpio_reg[GPIO_CTRL_0_INDEX + (pin &gt;&gt; 5)]|= (1u &lt;&lt; (pin % 32));
  }
  else{
    *mtfb-&gt;gpio_reg[GPIO_CTRL_0_INDEX + (pin &gt;&gt; 5)]&amp;= ~(1u &lt;&lt; (pin % 32));
  }
}

static void mtfb_gpio_set(struct mtfb *mtfb, int pin, int value)
{
  if(value){
    *mtfb-&gt;gpio_reg[GPIO_DSET_0_INDEX + (pin &gt;&gt; 5)] = (1u &lt;&lt; (pin % 32));
  }
  else{
    *mtfb-&gt;gpio_reg[GPIO_DCLR_0_INDEX + (pin &gt;&gt; 5)] = (1u &lt;&lt; (pin % 32));
  }
}

static unsigned int mtfb_gpio_get(struct mtfb *mtfb, int pin)
{
  return (*mtfb-&gt;gpio_reg[GPIO_DATA_0_INDEX + (pin &gt;&gt; 5)] &gt;&gt; (pin % 32)) &amp; 1u;
}

static void mtfb_alloc_gpio(struct mtfb *mtfb)
{
  unsigned int i;
  const unsigned long reg_base[]={
    GPIO1_MODE_ADDR,
    GPIO2_MODE_ADDR,
    GPIO_CTRL_0_ADDR,
    GPIO_CTRL_1_ADDR,
    GPIO_CTRL_2_ADDR,
    GPIO_DATA_0_ADDR,
    GPIO_DATA_1_ADDR,
    GPIO_DATA_2_ADDR,
    GPIO_DSET_0_ADDR,
    GPIO_DSET_1_ADDR,
    GPIO_DSET_2_ADDR,
    GPIO_DCLR_0_ADDR,
    GPIO_DCLR_1_ADDR,
    GPIO_DCLR_2_ADDR,
  };

  for(i=0; i&lt;14; i++){
    mtfb-&gt;gpio_reg[i] = (volatile unsigned long*)ioremap(reg_base[i], 4);
  }
  
  *mtfb-&gt;gpio_reg[GPIO1_MODE_INDEX]&amp;= 0xffff0fff;
  *mtfb-&gt;gpio_reg[GPIO1_MODE_INDEX]|= 0x51550555;
  *mtfb-&gt;gpio_reg[GPIO2_MODE_INDEX] = 0x55555555;
  
  mtfb_gpio_dir(mtfb, 37, 1);
  mtfb_gpio_dir(mtfb, 44, 1);
  mtfb_gpio_dir(mtfb, 46, 1);
  mtfb_gpio_dir(mtfb, 45, 1);
  mtfb_gpio_dir(mtfb, 13, 1);
  mtfb_gpio_dir(mtfb, 12, 1);
  mtfb_gpio_dir(mtfb, 5, 1);
  mtfb_gpio_dir(mtfb, 4, 1);
  mtfb_gpio_dir(mtfb, 6, 1);
  mtfb_gpio_dir(mtfb, 18, 1);
  mtfb_gpio_dir(mtfb, 19, 1);
  mtfb_gpio_dir(mtfb, 17, 1);
  mtfb_gpio_dir(mtfb, 16, 1);
}

static void mtfb_free_gpio(struct mtfb *mtfb)
{
  unsigned int i;

  for(i=0; i&lt;14; i++){
    iounmap(mtfb-&gt;gpio_reg[i]);
  }
}

static void ili9335_send_command(struct mtfb *mtfb, unsigned int val)
{
  unsigned char i, cmd=0;
  unsigned int reg[6]={0};

  mtfb_gpio_set(mtfb, ILI9335_SLCD_RS, 0);
  mtfb_gpio_set(mtfb, ILI9335_SLCD_RD, 1);
  mtfb_gpio_set(mtfb, ILI9335_SLCD_CS, 0);
  for(i=0; i&lt;2; i++){
    reg[0] = 0;
    reg[3] = 0;
    cmd = (i == 0) ? (val &gt;&gt; 8) : val;
    reg_assign(cmd &amp; 0x01, reg, ILI9335_SLCD_D10);
    reg_assign(cmd &amp; 0x02, reg, ILI9335_SLCD_D11);
    reg_assign(cmd &amp; 0x04, reg, ILI9335_SLCD_D12);
    reg_assign(cmd &amp; 0x08, reg, ILI9335_SLCD_D13);
    reg_assign(cmd &amp; 0x10, reg, ILI9335_SLCD_D14);
    reg_assign(cmd &amp; 0x20, reg, ILI9335_SLCD_D15);
    reg_assign(cmd &amp; 0x40, reg, ILI9335_SLCD_D16);
    reg_assign(cmd &amp; 0x80, reg, ILI9335_SLCD_D17);
    *mtfb-&gt;gpio_reg[GPIO_DSET_0_INDEX] = reg[0];
    *mtfb-&gt;gpio_reg[GPIO_DCLR_0_INDEX] = reg[3];

    mtfb_gpio_set(mtfb, ILI9335_SLCD_WR, 0);
    mtfb_gpio_set(mtfb, ILI9335_SLCD_WR, 1);
  }
  mtfb_gpio_set(mtfb, ILI9335_SLCD_CS, 1);
}

static void ili9335_send_data(struct mtfb *mtfb, unsigned int val)
{
  unsigned char i, dat=0;
  unsigned long reg[6]={0};

  mtfb_gpio_set(mtfb, ILI9335_SLCD_RS, 1);
  mtfb_gpio_set(mtfb, ILI9335_SLCD_RD, 1);
  mtfb_gpio_set(mtfb, ILI9335_SLCD_CS, 0);
  for(i=0; i&lt;2; i++){
    reg[0] = 0;
    reg[3] = 0;
    dat = (i == 0) ? (val &gt;&gt; 8) : val;
    reg_assign(dat &amp; 0x01, reg, ILI9335_SLCD_D10);
    reg_assign(dat &amp; 0x02, reg, ILI9335_SLCD_D11);
    reg_assign(dat &amp; 0x04, reg, ILI9335_SLCD_D12);
    reg_assign(dat &amp; 0x08, reg, ILI9335_SLCD_D13);
    reg_assign(dat &amp; 0x10, reg, ILI9335_SLCD_D14);
    reg_assign(dat &amp; 0x20, reg, ILI9335_SLCD_D15);
    reg_assign(dat &amp; 0x40, reg, ILI9335_SLCD_D16);
    reg_assign(dat &amp; 0x80, reg, ILI9335_SLCD_D17);
    *mtfb-&gt;gpio_reg[GPIO_DSET_0_INDEX] = reg[0];
    *mtfb-&gt;gpio_reg[GPIO_DCLR_0_INDEX] = reg[3];
    mtfb_gpio_set(mtfb, ILI9335_SLCD_WR, 0);
    mtfb_gpio_set(mtfb, ILI9335_SLCD_WR, 1);
  }
  mtfb_gpio_set(mtfb, ILI9335_SLCD_CS, 1);
}

static void ili9335_send_register(struct mtfb *mtfb, unsigned int cmd, unsigned int data)
{
  ili9335_send_command(mtfb, cmd);
  ili9335_send_data(mtfb, data);
}

static void ili9335_init(struct mtfb *mtfb)
{
  mtfb_gpio_set(mtfb, ILI9335_SLCD_CS, 1);
  mtfb_gpio_set(mtfb, ILI9335_SLCD_RESET, 1);
  mdelay(100);
  mtfb_gpio_set(mtfb, ILI9335_SLCD_RESET, 0);
  mdelay(100);  
  mtfb_gpio_set(mtfb, ILI9335_SLCD_RESET, 1);
  mdelay(100);

  ili9335_send_register(mtfb, 0x0001, 0x0100);
  ili9335_send_register(mtfb, 0x0002, 0x0200);
  ili9335_send_register(mtfb, 0x0003, 0x1018);
  ili9335_send_register(mtfb, 0x0008, 0x0202);
  ili9335_send_register(mtfb, 0x0009, 0x0000);
  ili9335_send_register(mtfb, 0x000A, 0x0000);
  ili9335_send_register(mtfb, 0x000C, 0x0000);
  ili9335_send_register(mtfb, 0x000D, 0x0000);
  ili9335_send_register(mtfb, 0x0060, 0x2700);  
  ili9335_send_register(mtfb, 0x0061, 0x0000);
  ili9335_send_register(mtfb, 0x006A, 0x0000);
  mdelay(10);
  ili9335_send_register(mtfb, 0x0010, 0x1490);
  ili9335_send_register(mtfb, 0x0011, 0x0227);
  mdelay(80);
  ili9335_send_register(mtfb, 0x0012, 0x000c);
  mdelay(10);
  ili9335_send_register(mtfb, 0x0013, 0x1000);
  ili9335_send_register(mtfb, 0x0029, 0x000b);
  ili9335_send_register(mtfb, 0x002b, 0x000b);
  mdelay(10);
  ili9335_send_register(mtfb, 0x0020, 0x0000);
  ili9335_send_register(mtfb, 0x0021, 0x0000);
  
  ili9335_send_register(mtfb, 0x0030, 0x0000);
  ili9335_send_register(mtfb, 0x0031, 0x0406);
  ili9335_send_register(mtfb, 0x0032, 0x0002);
  ili9335_send_register(mtfb, 0x0035, 0x0402);
  ili9335_send_register(mtfb, 0x0036, 0x0004);
  ili9335_send_register(mtfb, 0x0037, 0x0507);
  ili9335_send_register(mtfb, 0x0038, 0x0103);
  ili9335_send_register(mtfb, 0x0039, 0x0707);
  ili9335_send_register(mtfb, 0x003c, 0x0204);
  ili9335_send_register(mtfb, 0x003d, 0x0004);
  
  ili9335_send_register(mtfb, 0x0050, 0x0000);
  ili9335_send_register(mtfb, 0x0051, 0x00ef);
  ili9335_send_register(mtfb, 0x0052, 0x0000);
  ili9335_send_register(mtfb, 0x0053, 0x013f);

  mdelay(10);
  ili9335_send_register(mtfb, 0x0007, 0x0133);  
  ili9335_send_command(mtfb, 0x22);
}

static int mtfb_setcolreg(unsigned regno, unsigned red, unsigned green, unsigned blue, unsigned transp, struct fb_info *fb)
{
  if(regno &gt;= 16){
    return -EINVAL;
  }

  red = (red * ((1 &lt;&lt; fb-&gt;var.red.length) - 1)) / ((1 &lt;&lt; 16) - 1);
  green = (green * ((1 &lt;&lt; fb-&gt;var.green.length) - 1)) / ((1 &lt;&lt; 16) - 1);
  blue = (blue * ((1 &lt;&lt; fb-&gt;var.blue.length) - 1)) / ((1 &lt;&lt; 16) - 1);
  ((uint32_t*)fb-&gt;pseudo_palette)[regno] = (red &lt;&lt; fb-&gt;var.red.offset) | (green &lt;&lt; fb-&gt;var.green.offset) | (blue  &lt;&lt; fb-&gt;var.blue.offset);
  return 0;
}

static struct fb_videomode *mtfb_get_mode(struct mtfb *mtfb, struct fb_var_screeninfo *var)
{
  struct fb_videomode *mode = &amp;mtfb-&gt;mode;

  if((mode-&gt;xres == var-&gt;xres) &amp;&amp; (mode-&gt;yres == var-&gt;yres)){
    return mode;
  }
  return NULL;
}

static int mtfb_check_var(struct fb_var_screeninfo *var, struct fb_info *fb)
{
  struct mtfb *mtfb = fb-&gt;par;
  struct fb_videomode *mode;

  if(var-&gt;bits_per_pixel != 16){
    return -EINVAL;
  }

  mode = mtfb_get_mode(mtfb, var);
  if(mode == NULL){
    return -EINVAL;
  }

  fb_videomode_to_var(var, mode);

  var-&gt;yres_virtual = var-&gt;yres * 2;
  var-&gt;red.offset = 11;
  var-&gt;red.length = 5;
  var-&gt;green.offset = 5;
  var-&gt;green.length = 6;
  var-&gt;blue.offset = 0;
  var-&gt;blue.length = 5;
  return 0;
}

static void print_time(void)
{
  struct timeval t;
  struct tm broken;
  do_gettimeofday(&amp;t);
  time_to_tm(t.tv_sec, 0, &amp;broken);
  printk("%d:%d:%d:%ld\n", broken.tm_hour, broken.tm_min, broken.tm_sec, t.tv_usec);
}

static void mtfb_upload_frame_cpu(struct mtfb *mtfb)
{
  unsigned int i;
  const int num_pixels = mtfb-&gt;mode.xres * mtfb-&gt;mode.yres;
  uint16_t *p = mtfb-&gt;vidmem;
  
  *mtfb-&gt;gpio_reg[GPIO1_MODE_INDEX]&amp;= 0xffff0fff;
  *mtfb-&gt;gpio_reg[GPIO1_MODE_INDEX]|= 0x51550555;
  *mtfb-&gt;gpio_reg[GPIO2_MODE_INDEX] = 0x55555555;
  
  mtfb_gpio_dir(mtfb, 37, 1);
  mtfb_gpio_dir(mtfb, 44, 1);
  mtfb_gpio_dir(mtfb, 46, 1);
  mtfb_gpio_dir(mtfb, 45, 1);
  mtfb_gpio_dir(mtfb, 13, 1);
  mtfb_gpio_dir(mtfb, 12, 1);
  mtfb_gpio_dir(mtfb, 5, 1);
  mtfb_gpio_dir(mtfb, 4, 1);
  mtfb_gpio_dir(mtfb, 6, 1);
  mtfb_gpio_dir(mtfb, 18, 1);
  mtfb_gpio_dir(mtfb, 19, 1);
  mtfb_gpio_dir(mtfb, 17, 1);
  mtfb_gpio_dir(mtfb, 16, 1);

  for(i=0; i&lt;num_pixels; i++){
    ili9335_send_data(mtfb, *p++);
  }
}

static void mtfb_refresh_work(struct work_struct *work)
{
  struct mtfb *mtfb = container_of(work, struct mtfb, refresh_work.work);

  mutex_lock(&amp;mtfb-&gt;lock);
  if(mtfb-&gt;is_enabled){
    mtfb_upload_frame_cpu(mtfb);
    schedule_delayed_work(&amp;mtfb-&gt;refresh_work, HZ / 60);
  }
  mutex_unlock(&amp;mtfb-&gt;lock);
}

static int mtfb_set_par(struct fb_info *info)
{
  struct mtfb *mtfb = info-&gt;par;
  struct fb_var_screeninfo *var = &amp;info-&gt;var;
  struct fb_videomode *mode;

  mode = mtfb_get_mode(mtfb, var);
  if(mode == NULL){
    return -EINVAL;
  }
  info-&gt;mode = mode;
  return 0;
}

static void mtfb_enable(struct mtfb *mtfb)
{
  schedule_delayed_work(&amp;mtfb-&gt;refresh_work, 0);
}

static void mtfb_disable(struct mtfb *mtfb)
{
  cancel_delayed_work(&amp;mtfb-&gt;refresh_work);
}

static int mtfb_blank(int blank_mode, struct fb_info *info)
{
  struct mtfb *mtfb = info-&gt;par;
  int ret = 0;
  int new_enabled = (blank_mode == FB_BLANK_UNBLANK);

  mutex_lock(&amp;mtfb-&gt;lock);
  if(new_enabled){
    if(!mtfb-&gt;is_enabled){
      mtfb_enable(mtfb);
    }
  }
  else{
    if(mtfb-&gt;is_enabled){
      mtfb_disable(mtfb);
    }
  }

  if(!ret){
    mtfb-&gt;is_enabled = new_enabled;
  }
  mutex_unlock(&amp;mtfb-&gt;lock);

  return ret;
}

static int mtfb_mmap(struct fb_info *info, struct vm_area_struct *vma)
{
  const unsigned long offset = vma-&gt;vm_pgoff &lt;&lt; PAGE_SHIFT;
  const unsigned long size = vma-&gt;vm_end - vma-&gt;vm_start;

  if(offset + size &gt; info-&gt;fix.smem_len){
    return -EINVAL;
  }

  if(remap_pfn_range(vma, vma-&gt;vm_start, (info-&gt;fix.smem_start + offset) &gt;&gt; PAGE_SHIFT, size, vma-&gt;vm_page_prot)){
    return -EAGAIN;
  }
  return 0;
}

static int mtfb_alloc_devmem(struct mtfb *mtfb)
{
  int max_linesize = 0, max_framesize = 0;
  int bytes_per_pixel;
  void *page;
  int i;

  if(max_linesize &lt; mtfb-&gt;mode.xres){
    max_linesize = mtfb-&gt;mode.xres;
  }

  if(max_framesize &lt; mtfb-&gt;mode.xres * mtfb-&gt;mode.yres){
    max_framesize = mtfb-&gt;mode.xres * mtfb-&gt;mode.yres;
  }
  printk("%s, xres: %d, yres: %d\n", __func__, mtfb-&gt;mode.xres, mtfb-&gt;mode.yres);

  bytes_per_pixel = 16 &gt;&gt; 3;
  max_linesize *= bytes_per_pixel;
  max_framesize *= bytes_per_pixel;

  mtfb-&gt;blackline_size = max_linesize;
  mtfb-&gt;blackline = dma_alloc_coherent(&amp;mtfb-&gt;pdev-&gt;dev, mtfb-&gt;blackline_size, &amp;mtfb-&gt;blackline_phys, GFP_KERNEL);
  if(!mtfb-&gt;blackline){
    printk("%s, failed  to allocate memory for blackline\n", __func__);
    return -ENOMEM;
  }

  memset(mtfb-&gt;blackline, 0, mtfb-&gt;blackline_size);

  mtfb-&gt;vidmem_size = PAGE_ALIGN(max_framesize * 2);
  mtfb-&gt;vidmem = dma_alloc_coherent(&amp;mtfb-&gt;pdev-&gt;dev, mtfb-&gt;vidmem_size, &amp;mtfb-&gt;vidmem_phys, GFP_KERNEL);
  if(!mtfb-&gt;vidmem){
    printk("%s, failed  to allocate memory for vidmem\n", __func__);
    goto err_free_blackline;
  }

  for(page = mtfb-&gt;vidmem; page &lt; mtfb-&gt;vidmem + PAGE_ALIGN(mtfb-&gt;vidmem_size); page+= PAGE_SIZE){
    SetPageReserved(virt_to_page(page));
  }
  return 0;

err_free_blackline:
  dma_free_coherent(&amp;mtfb-&gt;pdev-&gt;dev, mtfb-&gt;blackline_size, mtfb-&gt;blackline, mtfb-&gt;blackline_phys);
  return -ENOMEM;
}

static void mtfb_free_devmem(struct mtfb *mtfb)
{
  dma_free_coherent(&amp;mtfb-&gt;pdev-&gt;dev, mtfb-&gt;vidmem_size, mtfb-&gt;vidmem, mtfb-&gt;vidmem_phys);
  dma_free_coherent(&amp;mtfb-&gt;pdev-&gt;dev, mtfb-&gt;blackline_size, mtfb-&gt;blackline, mtfb-&gt;blackline_phys);
}

static struct fb_ops mtfb_ops = {
  .owner        = THIS_MODULE,
  .fb_check_var = mtfb_check_var,
  .fb_set_par   = mtfb_set_par,
  .fb_setcolreg = mtfb_setcolreg,
  .fb_fillrect  = sys_fillrect,
  .fb_copyarea  = sys_copyarea,
  .fb_imageblit = sys_imageblit,
};

static int mtfb_probe(struct platform_device *pdev)
{
  int ret;
  struct mtfb *mtfb;
  struct fb_info *fb;

  fb = framebuffer_alloc(sizeof(struct mtfb), &amp;pdev-&gt;dev);
  if(!fb){
    dev_err(&amp;pdev-&gt;dev, "Failed to allocate framebuffer device\n");
    return -ENOMEM;
  }

  fb-&gt;fbops = &amp;mtfb_ops;
  fb-&gt;flags = FBINFO_DEFAULT;

  mtfb = fb-&gt;par;
  mtfb-&gt;pdev = pdev;

  mtfb_alloc_gpio(mtfb);
  ili9335_init(mtfb);
  platform_set_drvdata(pdev, mtfb);

  mtfb-&gt;mode.name = "320x240";
  mtfb-&gt;mode.xres = 320;
  mtfb-&gt;mode.yres = 240;
  mtfb-&gt;mode.vmode = FB_VMODE_NONINTERLACED;
  fb_videomode_to_modelist(&amp;mtfb-&gt;mode, 1, &amp;fb-&gt;modelist);
  fb-&gt;mode = &amp;mtfb-&gt;mode;

  fb_videomode_to_var(&amp;fb-&gt;var, fb-&gt;mode);
  fb-&gt;var.bits_per_pixel = 16;
  mtfb_check_var(&amp;fb-&gt;var, fb);

  ret = mtfb_alloc_devmem(mtfb);
  if(ret){
    dev_err(&amp;pdev-&gt;dev, "Failed to allocate video memory\n");
    goto err_iounmap;
  }

  fb-&gt;fix = mtfb_fix;
  fb-&gt;fix.line_length = fb-&gt;var.bits_per_pixel * fb-&gt;var.xres / 8;
  fb-&gt;fix.smem_start = mtfb-&gt;vidmem_phys;
  fb-&gt;fix.smem_len =  fb-&gt;fix.line_length * fb-&gt;var.yres_virtual;
  fb-&gt;screen_base = mtfb-&gt;vidmem;
  fb-&gt;pseudo_palette = mtfb-&gt;pseudo_palette;
  fb_alloc_cmap(&amp;fb-&gt;cmap, 256, 0);

  mutex_init(&amp;mtfb-&gt;lock);
  mtfb-&gt;is_enabled = 1;
  mtfb_set_par(fb);
  
  ret = register_framebuffer(fb);
  if(ret){
    dev_err(&amp;pdev-&gt;dev, "Failed to register framebuffer: %d\n", ret);
    goto err_free_devmem;
  }

  mtfb-&gt;fb = fb;
  fb_prepare_logo(mtfb-&gt;fb, 0);
  fb_show_logo(mtfb-&gt;fb, 0);

  INIT_DELAYED_WORK(&amp;mtfb-&gt;refresh_work, mtfb_refresh_work);
  schedule_delayed_work(&amp;mtfb-&gt;refresh_work, 0);
  return 0;
  
  cancel_delayed_work_sync(&amp;mtfb-&gt;refresh_work);
err_free_devmem:
  fb_dealloc_cmap(&amp;fb-&gt;cmap);
  mtfb_free_devmem(mtfb);
err_iounmap:
  mtfb_free_gpio(mtfb);
  framebuffer_release(fb);
  return ret;
}

static int mtfb_remove(struct platform_device *pdev)
{
  struct mtfb *mtfb = platform_get_drvdata(pdev);

  mtfb_blank(FB_BLANK_POWERDOWN, mtfb-&gt;fb);
  cancel_delayed_work_sync(&amp;mtfb-&gt;refresh_work);
  mtfb_free_gpio(mtfb);

  fb_dealloc_cmap(&amp;mtfb-&gt;fb-&gt;cmap);
  mtfb_free_devmem(mtfb);

  platform_set_drvdata(pdev, NULL);

  framebuffer_release(mtfb-&gt;fb);
  return 0;
}

#ifdef CONFIG_PM

static int mtfb_suspend(struct device *dev)
{
  struct mtfb *mtfb = dev_get_drvdata(dev);

  console_lock();
  fb_set_suspend(mtfb-&gt;fb, 1);
  console_unlock();

  mutex_lock(&amp;mtfb-&gt;lock);
  if(mtfb-&gt;is_enabled){
    mtfb_disable(mtfb);
  }
  mutex_unlock(&amp;mtfb-&gt;lock);
  return 0;
}

static int mtfb_resume(struct device *dev)
{
  struct mtfb *mtfb = dev_get_drvdata(dev);
  clk_enable(mtfb-&gt;ldclk);

  mutex_lock(&amp;mtfb-&gt;lock);
  if(mtfb-&gt;is_enabled){
    mtfb_enable(mtfb);
  }
  mutex_unlock(&amp;mtfb-&gt;lock);

  console_lock();
  fb_set_suspend(mtfb-&gt;fb, 0);
  console_unlock();
  return 0;
}

static const struct dev_pm_ops mtfb_pm_ops = {
  .suspend  = mtfb_suspend,
  .resume   = mtfb_resume,
  .poweroff = mtfb_suspend,
  .restore  = mtfb_resume,
};

#define MTFB_PM_OPS (&amp;mtfb_pm_ops)

#else
#define MTFB_PM_OPS NULL
#endif

static const struct of_device_id of_mt7688_fb_match[] = {
  { .compatible = "mt7688-fb", }, {},
};

static struct platform_driver mtfb_driver = {
  .probe  = mtfb_probe,
  .remove = mtfb_remove,
  .driver = {
    .name = "mt7688-fb",
    .pm   = MTFB_PM_OPS,
    .of_match_table = of_match_ptr(of_mt7688_fb_match),
  },
};

static int __init mtfb_init(void)
{
  return platform_driver_register(&amp;mtfb_driver);
}
module_init(mtfb_init);

static void __exit mtfb_exit(void)
{
  platform_driver_unregister(&amp;mtfb_driver);
}
module_exit(mtfb_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Lars-Peter Clausen &lt;lars@metafoo.de&gt;, Maarten ter Huurne &lt;maarten@treewalker.org&gt;, Steward Fu &lt;steward.fu@gmail.com&gt;");
MODULE_DESCRIPTION("MT7688 SLCD framebuffer driver");
MODULE_ALIAS("platform:mt7688-fb");
</pre><br>

<pre>
$ make ARCH=mips menuconfig
</pre>
<p>
<img src="framebuffer/1.jpg" class="maxSize"><br>
<img src="framebuffer/2.jpg" class="maxSize"><br><br>

完成<br>
<img src="framebuffer/3.jpg" class="maxSize">
</p><br>

<pre>
$ ls -al /dev/f*
</pre>
<p>
<img src="framebuffer/4.jpg" class="maxSize"><br>
P.S. 刷一個320x240的畫面，大約需要0.06秒<br><br>

使用山寨邏輯分析儀測試LCD_WR腳位後，發現其實畫面更新應該是有超過60fps才對，LCD_WR腳位Low的時間大約是80ns(Channel-0是AM335x LCD Clock 33MHz，而Channl-1則是MT7688 580MHz)<br>
<img src="framebuffer/5.jpg" class="maxSize"><br><br>

計算一下:<br>
320(寬) x 240(長) x 2(WR Clock) x 2(2 Bytes) = 307200<br>
1 / 3027200 = 3.25us<br>
因此只要WR Clock小於6.5us (High + Low), 基本上就可以達到60fps
</p>

<p>
<br><a href="../../mcu.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
